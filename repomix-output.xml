This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.editorconfig
.env.example
.gitattributes
.github/workflows/lint.yml
.github/workflows/tests.yml
.gitignore
app/Console/Commands/IndexProjects.php
app/Http/Controllers/Auth/VerifyEmailController.php
app/Http/Controllers/Controller.php
app/Http/Controllers/FaceAuthController.php
app/Livewire/AccesibilidadWidget.php
app/Livewire/Actions/Logout.php
app/Livewire/Auth/ForgotPassword.php
app/Livewire/Auth/Login.php
app/Livewire/Auth/Register.php
app/Livewire/Auth/ResetPassword.php
app/Livewire/Auth/VerifyEmail.php
app/Livewire/ChatbotWidget.php
app/Livewire/Conversation/Show.php
app/Livewire/Cotizaciones.php
app/Livewire/EntrepreneurDashboard.php
app/Livewire/Investment/ProposalModal.php
app/Livewire/InvestorDashboard.php
app/Livewire/LikeButton.php
app/Livewire/MostrarProyectos.php
app/Livewire/NoticiasEconomia.php
app/Livewire/NotificationsBell.php
app/Livewire/Project/ProjectForm.php
app/Livewire/Project/View.php
app/Livewire/Settings/Appearance.php
app/Livewire/Settings/DeleteUserForm.php
app/Livewire/Settings/Password.php
app/Livewire/Settings/Profile.php
app/Livewire/Settings/TwoFactor.php
app/Livewire/Settings/TwoFactor/RecoveryCodes.php
app/Models/Category.php
app/Models/Investment.php
app/Models/Message.php
app/Models/Notification.php
app/Models/Profile.php
app/Models/Project.php
app/Models/ProjectPhoto.php
app/Models/User.php
app/Observers/ProjectObserver.php
app/Providers/AppServiceProvider.php
app/Providers/FortifyServiceProvider.php
app/Services/ChatbotService.php
app/Services/EmbeddingService.php
app/Services/FaceRecognitionService.php
app/Services/VoiceService.php
artisan
bootstrap/app.php
bootstrap/cache/.gitignore
bootstrap/providers.php
composer.json
config/app.php
config/auth.php
config/cache.php
config/cors.php
config/database.php
config/filesystems.php
config/fortify.php
config/logging.php
config/mail.php
config/queue.php
config/services.php
config/session.php
database/.gitignore
database/certs/prod-ca-2021.crt
database/factories/UserFactory.php
database/migrations/0001_01_01_000000_create_users_table.php
database/migrations/0001_01_01_000001_create_cache_table.php
database/migrations/0001_01_01_000002_create_jobs_table.php
database/migrations/2025_09_22_145432_add_two_factor_columns_to_users_table.php
database/migrations/2025_10_16_220716_create_profiles_table.php
database/migrations/2025_10_16_220818_create_categories_table.php
database/migrations/2025_10_16_220819_create_projects_table.php
database/migrations/2025_10_16_220858_create_project_photos_table.php
database/migrations/2025_10_16_220934_create_project_likes_table.php
database/migrations/2025_10_16_221114_create_investments_table.php
database/migrations/2025_10_16_224020_create_sessions_table.php
database/migrations/2025_10_17_012306_add_embedding_to_projects_table.php
database/migrations/2025_10_20_141806_add_status_and_deadline_to_projects_table.php
database/migrations/2025_10_21_004637_create_messages_table.php
database/migrations/2025_10_21_053853_create_notifications_table.php
database/seeders/CategorySeeder.php
database/seeders/DatabaseSeeder.php
et 2a66f08
lang/es.json
lang/es/actions.php
lang/es/auth.php
lang/es/http-statuses.php
lang/es/pagination.php
lang/es/passwords.php
lang/es/validation.php
package.json
phpunit.xml
public/.htaccess
public/apple-touch-icon.png
public/favicon.ico
public/favicon.svg
public/images/nexo.png
public/images/video.mp4
public/index.php
public/robots.txt
README.md
resources/css/app.css
resources/js/app.js
resources/views/components/action-message.blade.php
resources/views/components/app-logo-icon.blade.php
resources/views/components/app-logo.blade.php
resources/views/components/auth-header.blade.php
resources/views/components/auth-session-status.blade.php
resources/views/components/input-otp.blade.php
resources/views/components/layouts/app.blade.php
resources/views/components/layouts/app/header.blade.php
resources/views/components/layouts/app/sidebar.blade.php
resources/views/components/layouts/auth.blade.php
resources/views/components/layouts/auth/card.blade.php
resources/views/components/layouts/auth/simple.blade.php
resources/views/components/layouts/auth/split.blade.php
resources/views/components/layouts/guest.blade.php
resources/views/components/placeholder-pattern.blade.php
resources/views/components/settings/layout.blade.php
resources/views/dashboard.blade.php
resources/views/flux/icon/book-open-text.blade.php
resources/views/flux/icon/chevrons-up-down.blade.php
resources/views/flux/icon/folder-git-2.blade.php
resources/views/flux/icon/layout-grid.blade.php
resources/views/flux/navlist/group.blade.php
resources/views/livewire/accesibilidad-widget.blade.php
resources/views/livewire/auth/confirm-password.blade.php
resources/views/livewire/auth/forgot-password.blade.php
resources/views/livewire/auth/login.blade.php
resources/views/livewire/auth/register.blade.php
resources/views/livewire/auth/reset-password.blade.php
resources/views/livewire/auth/two-factor-challenge.blade.php
resources/views/livewire/auth/verify-email.blade.php
resources/views/livewire/chatbot-widget.blade.php
resources/views/livewire/conversation/show.blade.php
resources/views/livewire/cotizaciones.blade.php
resources/views/livewire/entrepreneur-dashboard.blade.php
resources/views/livewire/investment/proposal-modal.blade.php
resources/views/livewire/investor-dashboard.blade.php
resources/views/livewire/like-button.blade.php
resources/views/livewire/mostrar-proyectos.blade.php
resources/views/livewire/noticias-economia.blade.php
resources/views/livewire/notifications-bell.blade.php
resources/views/livewire/project/project-form.blade.php
resources/views/livewire/project/view.blade.php
resources/views/livewire/settings/appearance.blade.php
resources/views/livewire/settings/delete-user-form.blade.php
resources/views/livewire/settings/password.blade.php
resources/views/livewire/settings/profile.blade.php
resources/views/livewire/settings/two-factor.blade.php
resources/views/livewire/settings/two-factor/recovery-codes.blade.php
resources/views/partials/head.blade.php
resources/views/partials/settings-heading.blade.php
resources/views/welcome.blade.php
routes/auth.php
routes/console.php
routes/web.php
storage/app/.gitignore
storage/app/private/.gitignore
storage/app/public/.gitignore
storage/framework/.gitignore
storage/framework/cache/.gitignore
storage/framework/cache/data/.gitignore
storage/framework/sessions/.gitignore
storage/framework/testing/.gitignore
storage/framework/views/.gitignore
storage/logs/.gitignore
tests/Feature/Auth/AuthenticationTest.php
tests/Feature/Auth/EmailVerificationTest.php
tests/Feature/Auth/PasswordConfirmationTest.php
tests/Feature/Auth/PasswordResetTest.php
tests/Feature/Auth/RegistrationTest.php
tests/Feature/Auth/TwoFactorChallengeTest.php
tests/Feature/DashboardTest.php
tests/Feature/ExampleTest.php
tests/Feature/Settings/PasswordUpdateTest.php
tests/Feature/Settings/ProfileUpdateTest.php
tests/Feature/Settings/TwoFactorAuthenticationTest.php
tests/Pest.php
tests/TestCase.php
tests/Unit/ExampleTest.php
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4
</file>

<file path=".github/workflows/lint.yml">
name: linter

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

permissions:
  contents: write

jobs:
  quality:
    runs-on: ubuntu-latest
    environment: Testing
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Add Flux Credentials Loaded From ENV
        run: composer config http-basic.composer.fluxui.dev "${{ secrets.FLUX_USERNAME }}" "${{ secrets.FLUX_LICENSE_KEY }}"

      - name: Install Dependencies
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          npm install

      - name: Run Pint
        run: vendor/bin/pint

      # - name: Commit Changes
      #   uses: stefanzweifel/git-auto-commit-action@v5
      #   with:
      #     commit_message: fix code style
      #     commit_options: '--no-verify'
      #     file_pattern: |
      #       **/*
      #       !.github/workflows/*
</file>

<file path=".github/workflows/tests.yml">
name: tests

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    environment: Testing

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: xdebug

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm i

      - name: Add Flux Credentials Loaded From ENV
        run: composer config http-basic.composer.fluxui.dev "${{ secrets.FLUX_USERNAME }}" "${{ secrets.FLUX_LICENSE_KEY }}"

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Build Assets
        run: npm run build

      - name: Run Tests
        run: ./vendor/bin/pest
</file>

<file path=".gitignore">
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/storage/pail
/vendor
.env
.env.backup
.env.production
.phpactor.json
.phpunit.result.cache
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log
/auth.json
/.fleet
/.idea
/.nova
/.vscode
/.zed
</file>

<file path="app/Console/Commands/IndexProjects.php">
<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use App\Models\Project;
use Illuminate\Support\Facades\DB;

class IndexProjects extends Command
{
    /**
     * The name and signature of the console command.
     * @var string
     */
    protected $signature = 'projects:index';

    /**
     * The console command description.
     * @var string
     */
    protected $description = 'Genera y guarda embeddings para todos los proyectos usando el modelo BGE.';

    /**
     * BAAI/bge-base-en-v1.5 es un estándar de la industria para RAG. Produce vectores de 768 dimensiones.
     */
    private const EMBEDDING_API_URL = 'https://api-inference.huggingface.co/models/BAAI/bge-base-en-v1.5';

    public function handle(): int
    {
        $this->info('🚀 Iniciando indexación de proyectos con el modelo BGE...');

        $apiToken = config('services.huggingface.api_key');
        if (empty($apiToken)) {
            $this->error('CRÍTICO: La API Key de Hugging Face no está configurada en config/services.php o .env.');
            return self::FAILURE;
        }

        $projects = Project::with('category')->whereNull('embedding')->get();

        if ($projects->isEmpty()) {
            $this->warn('No se encontraron proyectos en la base de datos. Nada que indexar.');
            return self::SUCCESS;
        }

        $this->info('1/2 - Iniciando generación de embeddings para ' . $projects->count() . ' proyectos...');
        $this->output->progressStart($projects->count());

        foreach ($projects as $project) {

            DB::reconnect();

            $categoryName = $project->category?->name ?? 'No especificada';

            $textToEmbed = "Título del proyecto: {$project->title}. "
                . "Categoría: {$categoryName}. "
                . "Descripción: {$project->description}. "
                . "Modelo de negocio: {$project->business_model}. "
                . "Potencial de mercado: {$project->market_potential}.";

            try {
                $response = Http::withToken($apiToken)
                    ->timeout(60)
                    ->post(self::EMBEDDING_API_URL, [
                        'inputs' => $textToEmbed,
                        'options' => ['wait_for_model' => true]
                    ]);

                if ($response->successful()) {
                    $embedding = $response->json();

                    // Guardamos el embedding directamente en el proyecto
                    $project->embedding = $embedding;
                    $project->save();
                } else {
                    $this->error(" -> Fallo para el proyecto ID {$project->id}: " . $response->body());
                }
            } catch (\Exception $e) {
                $this->error(" -> Excepción para el proyecto ID {$project->id}: " . substr($e->getMessage(), 0, 200));
            }

            $this->output->progressAdvance();
            usleep(250000); // pausa para no saturar la API
        }

        $this->output->progressFinish();
        $this->info('2/2 - ✅ Proceso de indexación de proyectos completado.');
        return self::SUCCESS;
    }
}
</file>

<file path="app/Http/Controllers/Controller.php">
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}
</file>

<file path="app/Http/Controllers/FaceAuthController.php">
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use App\Services\FaceRecognitionService;
class FaceAuthController extends Controller
{
    /**
     * Registra el rostro del usuario autenticado actualmente.
     */
    public function enroll(Request $request, FaceRecognitionService $faceService)
    {
        $request->validate(['image' => 'required']);

        $user = Auth::user();
        // La imagen viene del navegador como una data URL (base64)
        $imageBase64 = $request->input('image');
        
        // Extraemos solo los datos de la imagen, quitando el prefijo "data:image/jpeg;base64,"
        $imageData = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $imageBase64));

        try {
            // Hacemos la llamada a la API de Python como 'multipart/form-data'
            $response = Http::asMultipart()
                ->post(config('services.face_api.url') . '/register', [
                    [
                        'name'     => 'identifier',
                        'contents' => $user->email,
                    ],
                    [
                        'name'     => 'image',
                        'contents' => $imageData,
                        'filename' => 'face.jpg'
                    ]
                ]);

            if ($response->successful()) {
                return response()->json(['success' => true, 'message' => 'Rostro registrado exitosamente.']);
            }

            // Si algo falla, lo registramos en el log para depuración
            Log::error('Face API Error (Enroll): ' . $response->body());
            return response()->json(['success' => false, 'message' => 'No se pudo registrar el rostro. Intenta con mejor iluminación.'], 500);

        } catch (\Exception $e) {
            Log::error('Face API Connection Error: ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Error de conexión con el servicio de reconocimiento.'], 500);
        }
    }

    /**
     * Inicia sesión de un usuario a través del reconocimiento facial.
     */
    public function login(Request $request)
    {
        $request->validate(['image' => 'required']);
        $imageBase64 = $request->input('image');
        $imageData = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $imageBase64));

        try {
            $response = Http::asMultipart()
                ->post(config('services.face_api.url') . '/recognize', [
                    [
                        'name'     => 'image',
                        'contents' => $imageData,
                        'filename' => 'face.jpg'
                    ]
                ]);

            if ($response->successful()) {
                $data = $response->json();

                // Verificamos si hubo una coincidencia y no es 'unknown'
                if (!empty($data['matches']) && $data['matches'][0] !== 'unknown') {
                    $userEmail = $data['matches'][0];
                    $user = User::where('email', $userEmail)->first();

                    if ($user) {
                        Auth::login($user);
                        $request->session()->regenerate();
                        // Devolvemos una respuesta exitosa con la URL a la que redirigir
                        return response()->json(['success' => true, 'redirect' => route('dashboard')]);
                    }
                }
                // Si no hay usuario o el rostro es desconocido
                return response()->json(['success' => false, 'message' => 'Rostro no reconocido.'], 401);
            }

            Log::error('Face API Error (Login): ' . $response->body());
            return response()->json(['success' => false, 'message' => 'Error en el servicio de reconocimiento.'], 500);
        } catch (\Exception $e) {
            Log::error('Face API Connection Error (Login): ' . $e->getMessage());
            return response()->json(['success' => false, 'message' => 'Error de conexión con el servicio.'], 500);
        }
    }
}
</file>

<file path="app/Livewire/Actions/Logout.php">
<?php

namespace App\Livewire\Actions;

use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;

class Logout
{
    /**
     * Log the current user out of the application.
     */
    public function __invoke()
    {
        Auth::guard('web')->logout();

        Session::invalidate();
        Session::regenerateToken();

        return redirect('/');
    }
}
</file>

<file path="app/Livewire/Auth/ForgotPassword.php">
<?php

namespace App\Livewire\Auth;

use Illuminate\Support\Facades\Password;
use Livewire\Attributes\Layout;
use Livewire\Component;

#[Layout('components.layouts.auth')]
class ForgotPassword extends Component
{
    public string $email = '';

    /**
     * Send a password reset link to the provided email address.
     */
    public function sendPasswordResetLink(): void
    {
        $this->validate([
            'email' => ['required', 'string', 'email'],
        ]);

        Password::sendResetLink($this->only('email'));

        session()->flash('status', __('A reset link will be sent if the account exists.'));
    }
}
</file>

<file path="app/Livewire/Auth/Login.php">
<?php

namespace App\Livewire\Auth;

use App\Models\User;
use Illuminate\Auth\Events\Lockout;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Laravel\Fortify\Features;
use Livewire\Attributes\Layout;
use Livewire\Attributes\Validate;
use Livewire\Component;

#[Layout('components.layouts.auth')]
class Login extends Component
{
    #[Validate('required|string|email')]
    public string $email = '';

    #[Validate('required|string')]
    public string $password = '';

    public bool $remember = false;

    /**
     * Handle an incoming authentication request.
     */
    public function login(): void
    {
        $this->validate();

        $this->ensureIsNotRateLimited();

        $user = $this->validateCredentials();

        if (Features::canManageTwoFactorAuthentication() && $user->hasEnabledTwoFactorAuthentication()) {
            Session::put([
                'login.id' => $user->getKey(),
                'login.remember' => $this->remember,
            ]);

            $this->redirect(route('two-factor.login'), navigate: true);

            return;
        }

        Auth::login($user, $this->remember);

        RateLimiter::clear($this->throttleKey());
        Session::regenerate();

        $this->redirectIntended(default: route('dashboard', absolute: false), navigate: true);
    }

    /**
     * Validate the user's credentials.
     */
    protected function validateCredentials(): User
    {
        $user = Auth::getProvider()->retrieveByCredentials(['email' => $this->email, 'password' => $this->password]);

        if (! $user || ! Auth::getProvider()->validateCredentials($user, ['password' => $this->password])) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => __('auth.failed'),
            ]);
        }

        return $user;
    }

    /**
     * Ensure the authentication request is not rate limited.
     */
    protected function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout(request()));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => __('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the authentication rate limiting throttle key.
     */
    protected function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->email).'|'.request()->ip());
    }
}
</file>

<file path="app/Livewire/Auth/ResetPassword.php">
<?php

namespace App\Livewire\Auth;

use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Livewire\Attributes\Layout;
use Livewire\Attributes\Locked;
use Livewire\Component;

#[Layout('components.layouts.auth')]
class ResetPassword extends Component
{
    #[Locked]
    public string $token = '';

    public string $email = '';

    public string $password = '';

    public string $password_confirmation = '';

    /**
     * Mount the component.
     */
    public function mount(string $token): void
    {
        $this->token = $token;

        $this->email = request()->string('email')->value();
    }

    /**
     * Reset the password for the given user.
     */
    public function resetPassword(): void
    {
        $this->validate([
            'token' => ['required'],
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $this->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) {
                $user->forceFill([
                    'password' => $this->password,
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        if ($status != Password::PasswordReset) {
            $this->addError('email', __($status));

            return;
        }

        Session::flash('status', __($status));

        $this->redirectRoute('login', navigate: true);
    }
}
</file>

<file path="app/Livewire/Auth/VerifyEmail.php">
<?php

namespace App\Livewire\Auth;

use App\Livewire\Actions\Logout;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Livewire\Attributes\Layout;
use Livewire\Component;

#[Layout('components.layouts.auth')]
class VerifyEmail extends Component
{
    /**
     * Send an email verification notification to the user.
     */
    public function sendVerification(): void
    {
        if (Auth::user()->hasVerifiedEmail()) {
            $this->redirectIntended(default: route('dashboard', absolute: false), navigate: true);

            return;
        }

        Auth::user()->sendEmailVerificationNotification();

        Session::flash('status', 'verification-link-sent');
    }

    /**
     * Log the current user out of the application.
     */
    public function logout(Logout $logout): void
    {
        $logout();

        $this->redirect('/', navigate: true);
    }
}
</file>

<file path="app/Livewire/ChatbotWidget.php">
<?php

namespace App\Livewire;

use Livewire\Component;
use App\Services\ChatbotService;
use App\Services\VoiceService;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Log;

class ChatbotWidget extends Component
{
    public bool $isOpen = false;
    public string $currentMessage = '';
    public array $messages = [];
    public bool $isLoading = false;

    public function mount()
    {
        $this->messages[] = [
            'sender' => 'bot',
            'text' => '¡Hola! Soy tu asistente virtual. Puedes escribirme o usar el micrófono para hablar. ¿Cómo puedo ayudarte?'
        ];
    }

    public function toggleChat()
    {
        $this->isOpen = !$this->isOpen;
        $this->dispatch('chat-toggled', isOpen: $this->isOpen);
    }

    public function sendMessage(ChatbotService $chatbotService, VoiceService $voiceService)
    {
        if (trim($this->currentMessage) === '') {
            return;
        }
        $this->messages[] = ['sender' => 'user', 'text' => $this->currentMessage];
        $this->isLoading = true;
        $userMessage = $this->currentMessage;
        $this->reset('currentMessage');
        
        $history = array_slice($this->messages, -6);
        $botResponseText = $chatbotService->generateResponse($userMessage, $history);

        $this->messages[] = ['sender' => 'bot', 'text' => $botResponseText];
        $this->isLoading = false;
        $this->dispatch('message-sent');

        if ($botResponseText && trim($botResponseText) !== '') {
            $this->sendAudioResponse($botResponseText, $voiceService);
        }
    }

    /**
     * Procesa el audio grabado en el frontend.
     */
    public function processAudio(string $audioBase64, VoiceService $voiceService, ChatbotService $chatbotService)
    {
        $this->isLoading = true;

        try {
            $audioData = base64_decode($audioBase64);
            $tempDir = storage_path('app/temp');
            if (!File::isDirectory($tempDir)) {
                File::makeDirectory($tempDir, 0755, true);
            }
            $tempPath = $tempDir . '/' . Str::random(16) . '.webm';
            File::put($tempPath, $audioData);

            $transcribedText = $voiceService->transcribeAudio($tempPath);
            File::delete($tempPath);

            $botResponseText = '';
            if (!$transcribedText || trim($transcribedText) === '') {
                $botResponseText = 'Lo siento, no pude entender lo que dijiste. ¿Podrías intentarlo de nuevo?';
                $this->messages[] = ['sender' => 'bot', 'text' => $botResponseText];
            } else {
                $this->messages[] = ['sender' => 'user', 'text' => $transcribedText];
                $this->dispatch('message-sent');
                
                $history = array_slice($this->messages, -6);
                $botResponseText = $chatbotService->generateResponse($transcribedText, $history);
                $this->messages[] = ['sender' => 'bot', 'text' => $botResponseText];
            }
            
            $this->isLoading = false;
            $this->dispatch('message-sent');

            if ($botResponseText && trim($botResponseText) !== '') {
                $this->sendAudioResponse($botResponseText, $voiceService);
            }
        } catch (\Exception $e) {
            Log::error('Error en processAudio', ['message' => $e->getMessage()]);
            $this->messages[] = ['sender' => 'bot', 'text' => 'Ocurrió un error procesando el audio.'];
            $this->isLoading = false;
            $this->dispatch('message-sent');
        }
    }

    private function sendAudioResponse(string $text, VoiceService $voiceService)
    {
        $audioContent = $voiceService->synthesizeSpeech($text);
        if ($audioContent) {
            $this->dispatch('play-audio', audioBase64: base64_encode($audioContent));
        } else {
            Log::warning("No se pudo sintetizar audio para la respuesta.");
        }
    }

    public function render()
    {
        return view('livewire.chatbot-widget');
    }
}
</file>

<file path="app/Livewire/Conversation/Show.php">
<?php

namespace App\Livewire\Conversation;

use App\Models\Investment;
use App\Models\Message;
use App\Models\Notification; 
use Illuminate\Support\Facades\Auth;
use Livewire\Component;

class Show extends Component
{
    public Investment $investment;
    public $messageList;
    public string $newMessageBody = '';

    public function mount(Investment $investment)
    {
        $isParticipant = ($investment->investor_id === Auth::id() || $investment->project->user_id === Auth::id());
        if (!$isParticipant) {
            abort(403, 'No tienes permiso para ver esta conversación.');
        }

        $this->investment = $investment->load('project');
        $this->loadMessages();
    }

    public function loadMessages()
    {
        // 1. Contamos cuántos mensajes hay actualmente en la pantalla (si hay alguno).
        $previousMessageCount = $this->messageList ? $this->messageList->count() : 0;

        // 2. Obtenemos la lista actualizada de mensajes desde la base de datos.
        $this->messageList = $this->investment->messages()->with('sender')->get();

        // 3. Comparamos. Si el nuevo conteo es mayor que el anterior, significa que llegó un nuevo mensaje.
        if ($this->messageList->count() > $previousMessageCount) {
            // 4. Disparamos un nuevo evento SOLO si hay mensajes nuevos.
            $this->dispatch('new-message-received');
        }
    }

    public function sendMessage()
    {
        $this->validate([
            'newMessageBody' => 'required|string|min:1',
        ]);

        $receiverId = ($this->investment->investor_id === Auth::id())
            ? $this->investment->project->user_id
            : $this->investment->investor_id;

        Message::create([
            'investment_id' => $this->investment->id,
            'sender_id' => Auth::id(),
            'receiver_id' => $receiverId,
            'body' => $this->newMessageBody,
        ]);

        Notification::create([
            'user_id' => $receiverId,
            'message' => "Has recibido un nuevo mensaje de " . Auth::user()->name . " sobre el proyecto '{$this->investment->project->title}'.",
            'link' => route('conversation.show', $this->investment),
        ]);

        $this->reset('newMessageBody');
        $this->loadMessages();

        $this->dispatch('message-sent');
    }

    public function render()
    {
        return view('livewire.conversation.show');
    }
}
</file>

<file path="app/Livewire/Cotizaciones.php">
<?php

namespace App\Livewire;

use Livewire\Component;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;

class Cotizaciones extends Component
{
    public $dolares = [];
    public $monedasExtranjeras = [];
    public $error = null;

    public function mount()
    {
        $this->cargarCotizaciones();
    }

    public function cargarCotizaciones()
    {
        try {
            // Obtener todos los tipos de dólar
            $dolaresResponse = Http::timeout(8)
                ->get('https://dolarapi.com/v1/dolares');

            if (!$dolaresResponse->successful()) {
                throw new \Exception('Error al obtener tipos de dólar');
            }

            $this->dolares = $dolaresResponse->json();

            // Obtener monedas extranjeras (incluye PYG, EUR, BRL, etc.)
            $monedasResponse = Http::timeout(8)
                ->get('https://dolarapi.com/v1/cotizaciones');

            if (!$monedasResponse->successful()) {
                throw new \Exception('Error al obtener monedas extranjeras');
            }

            $allMonedas = $monedasResponse->json();

            // Filtrar solo las que NO son USD (para evitar duplicados)
            $this->monedasExtranjeras = array_filter($allMonedas, fn($m) => $m['moneda'] !== 'USD');

        } catch (\Exception $e) {
            $this->error = 'Error al cargar cotizaciones: ' . substr($e->getMessage(), 0, 100);
            $this->dolares = [];
            $this->monedasExtranjeras = [];
        }
    }

    public function render()
    {
        return view('livewire.cotizaciones');
    }
}
</file>

<file path="app/Livewire/EntrepreneurDashboard.php">
<?php

namespace App\Livewire;

use App\Models\Investment;
use App\Models\Notification;
use App\Models\Project;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Livewire\Component;

class EntrepreneurDashboard extends Component
{
    public function delete(Project $project)
    {
        if ($project->user_id !== auth()->id()) {
            abort(403);
        }

        foreach ($project->photos as $photo) {
            Storage::disk('public')->delete($photo->path);
        }

        $project->delete();
        
        session()->flash('message', 'Proyecto eliminado exitosamente.');
    }

    /**
     * Acepta una propuesta de inversión, cambiando su estado a 'negotiating'.
     */
    public function acceptProposal(Investment $investment)
    {
        // Medida de seguridad: Asegurarnos de que el emprendedor solo puede
        // aceptar propuestas dirigidas a sus propios proyectos.
        if ($investment->project->user_id !== Auth::id()) {
            abort(403, 'Acción no autorizada.');
        }

        $investment->status = 'negotiating';
        $investment->save();

        Notification::create([
            'user_id' => $investment->investor_id, // El inversor que hizo la propuesta
            'message' => "¡Buenas noticias! Tu propuesta para '{$investment->project->title}' ha sido aceptada. Ya puedes iniciar la conversación.",
            'link' => route('conversation.show', $investment), // Enlace directo a la conversación
        ]);

        session()->flash('message', '¡Propuesta aceptada! Ahora puedes comunicarte con el inversor.');
    }

    /**
     * Rechaza una propuesta de inversión.
     */
    public function rejectProposal(Investment $investment)
    {
        // Medida de seguridad similar.
        if ($investment->project->user_id !== Auth::id()) {
            abort(403, 'Acción no autorizada.');
        }

        $investment->status = 'rejected';
        $investment->save();
        
        session()->flash('message', 'La propuesta ha sido rechazada.');
    }

    public function render()
    {
        $user = Auth::user();

        // Obtenemos los proyectos del usuario.
        $projects = $user->projects()->with('category')->latest()->get();

        // Obtenemos las propuestas recibidas a través de la nueva relación,
        // cargando también el proyecto y el inversor de cada propuesta para mostrarlos.
        $proposals = $user->proposals()
                          ->with(['project', 'investor'])
                          ->latest()
                          ->get();

        return view('livewire.entrepreneur-dashboard', [
            'projects' => $projects,
            'proposals' => $proposals,
        ]);
    }
}
</file>

<file path="app/Livewire/Investment/ProposalModal.php">
<?php

namespace App\Livewire\Investment;

use App\Models\Investment;
use App\Models\Project;
use App\Models\Notification;
use Illuminate\Support\Facades\Auth;
use Livewire\Attributes\On;
use Livewire\Component;

class ProposalModal extends Component
{
    public bool $showModal = false;
    public ?Project $project = null;

    public $proposed_amount = '';
    public string $message = '';

    // Este método escucha el evento que disparamos desde el botón
    #[On('open-proposal-modal')]
    public function openModal($projectId)
    {
        $this->project = Project::find($projectId);
        
        // Sugerimos el monto mínimo como valor por defecto.
        $this->proposed_amount = $this->project->min_investment;
        $this->message = ''; // Reseteamos el mensaje
        
        $this->showModal = true;
    }

    public function closeModal()
    {
        $this->showModal = false;
    }

    public function save()
    {
        if (!Auth::check() || Auth::user()->role !== 'investor') {
            return; // Medida de seguridad
        }

        $this->validate([
            'proposed_amount' => 'required|numeric|min:' . $this->project->min_investment,
            'message' => 'required|string|min:20|max:1000',
        ]);

        Investment::create([
            'project_id' => $this->project->id,
            'investor_id' => Auth::id(),
            'proposed_amount' => $this->proposed_amount,
            'message' => $this->message,
            'status' => 'pending', // estado inicial
        ]);

        Notification::create([
            'user_id' => $this->project->user_id, // El dueño del proyecto
            'message' => "Has recibido una nueva propuesta de inversión de " . Auth::user()->name . " para tu proyecto '{$this->project->title}'.",
            'link' => route('dashboard'), // Lo lleva a su dashboard para que vea la propuesta
        ]);

        $this->closeModal();

        // Enviamos un evento para notificar al usuario que todo salió bien
        $this->dispatch('proposal-sent'); 
    }

    public function render()
    {
        return view('livewire.investment.proposal-modal');
    }
}
</file>

<file path="app/Livewire/InvestorDashboard.php">
<?php

namespace App\Livewire;

use App\Models\Project;
use Illuminate\Support\Facades\Auth;
use Livewire\Component;

class InvestorDashboard extends Component
{
    public function render()
    {
        // 1. Proyectos disponibles para invertir
        $projects = Project::with('category', 'photos', 'likes')->latest()->get();

        // 2. Propuestas que el inversor actual ha enviado
        $myProposals = Auth::user()->investments()
                                   ->with('project') // Carga el proyecto de cada propuesta
                                   ->latest()
                                   ->get();

        return view('livewire.investor-dashboard', [
            'projects' => $projects,
            'myProposals' => $myProposals, // Pasamos las propuestas a la vista
        ]);
    }
}
</file>

<file path="app/Livewire/LikeButton.php">
<?php

namespace App\Livewire;

use Livewire\Component;
use App\Models\Project;
use Illuminate\Support\Facades\Auth;

class LikeButton extends Component
{
    public Project $project;
    public bool $isLiked;
    public int $likesCount;

    public function mount(Project $project)
    {
        $this->project = $project;
        $this->likesCount = $this->project->likes()->count();

        // Verificamos si el usuario actual ha dado "like" a este proyecto.
        // Es importante usar Auth::check() para que no de error si un visitante no logueado ve el botón.
        $this->isLiked = Auth::check() ? Auth::user()->likes()->where('project_id', $this->project->id)->exists() : false;
    }

    // Este método se llama cuando el usuario hace clic en el botón.
    public function toggleLike()
    {
        // Solo los usuarios autenticados pueden dar "like".
        if (!Auth::check()) {
            // Si no está logueado, lo redirigimos a la página de login.
            return $this->redirect(route('login'), navigate: true);
        }

        // Si el 'like' existe, lo quita. Si no existe, lo añade.
        Auth::user()->likes()->toggle($this->project->id);

        // Actualizamos el estado del componente para que la vista reaccione.
        $this->isLiked = !$this->isLiked;
        $this->likesCount = $this->project->likes()->count(); // Recontamos desde la BD para asegurar consistencia.
    }

    public function render()
    {
        return view('livewire.like-button');
    }
}
</file>

<file path="app/Livewire/NoticiasEconomia.php">
<?php

namespace App\Livewire;

use Livewire\Component;
use Illuminate\Support\Facades\Http;

class NoticiasEconomia extends Component
{
    public $noticias = [];
    public $error = '';
    public $loading = true;

    public function mount()
    {
        $this->cargarNoticias();
    }

    public function cargarNoticias()
    {
        $this->loading = true;
        $this->error = '';

        try {
            $apiKey = 'pub_fe6a1674c70749f48be268151caf990c';

            $response = Http::withOptions(['verify' => false])
                ->get('https://newsdata.io/api/1/news', [
                    'apikey' => $apiKey,
                    'country' => 'AR',
                    'language' => 'es',
                    'category' => 'business',
                    'q' => 'economía OR dólar OR inflación OR mercado OR financiero OR bolsa OR exportaciones',
                    'size' => 10
                ]);

            if ($response->successful()) {
                $data = $response->json();
                if (!empty($data['results']) && is_array($data['results'])) {
                    // Mostrar hasta 10 noticias, sin filtrar por imagen/título (por ahora)
                    $this->noticias = collect($data['results'])->take(10)->values()->all();
                } else {
                    $this->noticias = [];
                    $this->error = 'No se encontraron noticias económicas.';
                }
            } else {
                $this->error = "Error en la API: " . ($response->json()['message'] ?? $response->status());
                $this->noticias = [];
            }
        } catch (\Exception $e) {
            $this->error = "Error: " . substr($e->getMessage(), 0, 120);
            $this->noticias = [];
        } finally {
            $this->loading = false;
        }
    }

    public function render()
    {
        return view('livewire.noticias-economia');
    }
}
</file>

<file path="app/Livewire/NotificationsBell.php">
<?php

namespace App\Livewire;

use App\Models\Notification;
use Illuminate\Support\Facades\Auth;
use Livewire\Component;

class NotificationsBell extends Component
{
    public $unreadNotifications;
    public $unreadCount = 0;

    public function mount()
    {
        $this->loadNotifications();
    }

    public function loadNotifications()
    {
        if (Auth::check()) {
            $this->unreadNotifications = Auth::user()->notifications()->whereNull('read_at')->get();
            $this->unreadCount = $this->unreadNotifications->count();
        }
    }

    public function markAsRead(Notification $notification)
    {
        if ($notification->user_id === Auth::id()) {
            $notification->read_at = now();
            $notification->save();
        }
        return $this->redirect($notification->link, navigate: true);
    }

    public function render()
    {
        return view('livewire.notifications-bell');
    }
}
</file>

<file path="app/Livewire/Project/ProjectForm.php">
<?php

namespace App\Livewire\Project;

use App\Models\Project;
use App\Models\Category;
use Illuminate\Support\Facades\Auth;
use Livewire\Component;
use Livewire\WithFileUploads;

class ProjectForm extends Component
{
    use WithFileUploads;

    public Project $project;

    // Propiedades del formulario
    public string $title = '';
    public string $description = '';
    public $category_id = '';
    public $funding_goal = '';
    public $min_investment = '';
    public string $business_model = '';
    public string $market_potential = '';
    public $deadline = '';

    // Propiedad para la subida de fotos
    public $photo;

    public function mount(Project $project)
    {
        $this->project = $project;
        
        if ($this->project->exists) {
            $this->title = $project->title;
            $this->description = $project->description;
            $this->category_id = $project->category_id;
            $this->funding_goal = $project->funding_goal;
            $this->min_investment = $project->min_investment;
            $this->business_model = $project->business_model;
            $this->market_potential = $project->market_potential;
            $this->deadline = $project->deadline ? $project->deadline->format('Y-m-d') : '';
        }
    }

    public function save()
    {
        if ($this->project->exists && $this->project->user_id !== Auth::id()) {
            abort(403);
        }

        $validatedData = $this->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'category_id' => 'required|exists:categories,id',
            'funding_goal' => 'required|numeric|min:0',
            'min_investment' => 'required|numeric|min:0',
            'business_model' => 'required|string',
            'market_potential' => 'required|string',
            'deadline' => 'nullable|date|after:today',
            'photo' => 'nullable|image|max:2048',
        ]);
        
        $projectData = collect($validatedData)->except('photo')->toArray();
        $projectData['user_id'] = Auth::id();

        if (empty($projectData['deadline'])) {
            $projectData['deadline'] = null;
        }
        
        $savedProject = Project::updateOrCreate(
            ['id' => $this->project->id],
            $projectData
        );

        if ($this->photo) {
            $path = $this->photo->store('project-photos', 'public');
            $savedProject->photos()->delete(); 
            $savedProject->photos()->create(['path' => $path]);
        }

        session()->flash('message', 'Proyecto guardado exitosamente.');
        return $this->redirect(route('dashboard'), navigate: true);
    }

    public function render()
    {
        return view('livewire.project.project-form', [
            'categories' => Category::all()
        ]);
    }
}
</file>

<file path="app/Livewire/Project/View.php">
<?php

namespace App\Livewire\Project;

use App\Models\Investment;
use App\Models\Project;
use Illuminate\Support\Facades\Auth;
use Livewire\Component;

class View extends Component
{
    public Project $project;
    public bool $hasProposed = false;

    public function mount(Project $project)
    {
        $this->project = $project->load('category', 'photos', 'entrepreneur');

        // Verificar si el usuario ya ha hecho una propuesta
        if (Auth::check() && Auth::user()->role === 'investor') {
            $this->hasProposed = Investment::where('project_id', $this->project->id)
                                           ->where('investor_id', Auth::id())
                                           ->exists();
        }
    }

    public function render()
    {
        return view('livewire.project.view');
    }
}
</file>

<file path="app/Livewire/Settings/Appearance.php">
<?php

namespace App\Livewire\Settings;

use Livewire\Component;

class Appearance extends Component
{
    //
}
</file>

<file path="app/Livewire/Settings/DeleteUserForm.php">
<?php

namespace App\Livewire\Settings;

use App\Livewire\Actions\Logout;
use Illuminate\Support\Facades\Auth;
use Livewire\Component;

class DeleteUserForm extends Component
{
    public string $password = '';

    /**
     * Delete the currently authenticated user.
     */
    public function deleteUser(Logout $logout): void
    {
        $this->validate([
            'password' => ['required', 'string', 'current_password'],
        ]);

        tap(Auth::user(), $logout(...))->delete();

        $this->redirect('/', navigate: true);
    }
}
</file>

<file path="app/Livewire/Settings/Password.php">
<?php

namespace App\Livewire\Settings;

use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rules\Password as PasswordRule;
use Illuminate\Validation\ValidationException;
use Livewire\Component;

class Password extends Component
{
    public string $current_password = '';

    public string $password = '';

    public string $password_confirmation = '';

    /**
     * Update the password for the currently authenticated user.
     */
    public function updatePassword(): void
    {
        try {
            $validated = $this->validate([
                'current_password' => ['required', 'string', 'current_password'],
                'password' => ['required', 'string', PasswordRule::defaults(), 'confirmed'],
            ]);
        } catch (ValidationException $e) {
            $this->reset('current_password', 'password', 'password_confirmation');

            throw $e;
        }

        Auth::user()->update([
            'password' => $validated['password'],
        ]);

        $this->reset('current_password', 'password', 'password_confirmation');

        $this->dispatch('password-updated');
    }
}
</file>

<file path="app/Livewire/Settings/Profile.php">
<?php

namespace App\Livewire\Settings;

use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Illuminate\Validation\Rule;
use Livewire\Component;

class Profile extends Component
{
    public string $name = '';

    public string $email = '';

    /**
     * Mount the component.
     */
    public function mount(): void
    {
        $this->name = Auth::user()->name;
        $this->email = Auth::user()->email;
    }

    /**
     * Update the profile information for the currently authenticated user.
     */
    public function updateProfileInformation(): void
    {
        $user = Auth::user();

        $validated = $this->validate([
            'name' => ['required', 'string', 'max:255'],

            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore($user->id),
            ],
        ]);

        $user->fill($validated);

        if ($user->isDirty('email')) {
            $user->email_verified_at = null;
        }

        $user->save();

        $this->dispatch('profile-updated', name: $user->name);
    }

    /**
     * Send an email verification notification to the current user.
     */
    public function resendVerificationNotification(): void
    {
        $user = Auth::user();

        if ($user->hasVerifiedEmail()) {
            $this->redirectIntended(default: route('dashboard', absolute: false));

            return;
        }

        $user->sendEmailVerificationNotification();

        Session::flash('status', 'verification-link-sent');
    }
}
</file>

<file path="app/Livewire/Settings/TwoFactor.php">
<?php

namespace App\Livewire\Settings;

use Exception;
use Laravel\Fortify\Actions\ConfirmTwoFactorAuthentication;
use Laravel\Fortify\Actions\DisableTwoFactorAuthentication;
use Laravel\Fortify\Actions\EnableTwoFactorAuthentication;
use Laravel\Fortify\Features;
use Laravel\Fortify\Fortify;
use Livewire\Attributes\Locked;
use Livewire\Attributes\Validate;
use Livewire\Component;
use Symfony\Component\HttpFoundation\Response;

class TwoFactor extends Component
{
    #[Locked]
    public bool $twoFactorEnabled;

    #[Locked]
    public bool $requiresConfirmation;

    #[Locked]
    public string $qrCodeSvg = '';

    #[Locked]
    public string $manualSetupKey = '';

    public bool $showModal = false;

    public bool $showVerificationStep = false;

    #[Validate('required|string|size:6', onUpdate: false)]
    public string $code = '';

    /**
     * Mount the component.
     */
    public function mount(DisableTwoFactorAuthentication $disableTwoFactorAuthentication): void
    {
        abort_unless(Features::enabled(Features::twoFactorAuthentication()), Response::HTTP_FORBIDDEN);

        if (Fortify::confirmsTwoFactorAuthentication() && is_null(auth()->user()->two_factor_confirmed_at)) {
            $disableTwoFactorAuthentication(auth()->user());
        }

        $this->twoFactorEnabled = auth()->user()->hasEnabledTwoFactorAuthentication();
        $this->requiresConfirmation = Features::optionEnabled(Features::twoFactorAuthentication(), 'confirm');
    }

    /**
     * Enable two-factor authentication for the user.
     */
    public function enable(EnableTwoFactorAuthentication $enableTwoFactorAuthentication): void
    {
        $enableTwoFactorAuthentication(auth()->user());

        if (! $this->requiresConfirmation) {
            $this->twoFactorEnabled = auth()->user()->hasEnabledTwoFactorAuthentication();
        }

        $this->loadSetupData();

        $this->showModal = true;
    }

    /**
     * Load the two-factor authentication setup data for the user.
     */
    private function loadSetupData(): void
    {
        $user = auth()->user();

        try {
            $this->qrCodeSvg = $user?->twoFactorQrCodeSvg();
            $this->manualSetupKey = decrypt($user->two_factor_secret);
        } catch (Exception) {
            $this->addError('setupData', 'Failed to fetch setup data.');

            $this->reset('qrCodeSvg', 'manualSetupKey');
        }
    }

    /**
     * Show the two-factor verification step if necessary.
     */
    public function showVerificationIfNecessary(): void
    {
        if ($this->requiresConfirmation) {
            $this->showVerificationStep = true;

            $this->resetErrorBag();

            return;
        }

        $this->closeModal();
    }

    /**
     * Confirm two-factor authentication for the user.
     */
    public function confirmTwoFactor(ConfirmTwoFactorAuthentication $confirmTwoFactorAuthentication): void
    {
        $this->validate();

        $confirmTwoFactorAuthentication(auth()->user(), $this->code);

        $this->closeModal();

        $this->twoFactorEnabled = true;
    }

    /**
     * Reset two-factor verification state.
     */
    public function resetVerification(): void
    {
        $this->reset('code', 'showVerificationStep');

        $this->resetErrorBag();
    }

    /**
     * Disable two-factor authentication for the user.
     */
    public function disable(DisableTwoFactorAuthentication $disableTwoFactorAuthentication): void
    {
        $disableTwoFactorAuthentication(auth()->user());

        $this->twoFactorEnabled = false;
    }

    /**
     * Close the two-factor authentication modal.
     */
    public function closeModal(): void
    {
        $this->reset(
            'code',
            'manualSetupKey',
            'qrCodeSvg',
            'showModal',
            'showVerificationStep',
        );

        $this->resetErrorBag();

        if (! $this->requiresConfirmation) {
            $this->twoFactorEnabled = auth()->user()->hasEnabledTwoFactorAuthentication();
        }
    }

    /**
     * Get the current modal configuration state.
     */
    public function getModalConfigProperty(): array
    {
        if ($this->twoFactorEnabled) {
            return [
                'title' => __('Two-Factor Authentication Enabled'),
                'description' => __('Two-factor authentication is now enabled. Scan the QR code or enter the setup key in your authenticator app.'),
                'buttonText' => __('Close'),
            ];
        }

        if ($this->showVerificationStep) {
            return [
                'title' => __('Verify Authentication Code'),
                'description' => __('Enter the 6-digit code from your authenticator app.'),
                'buttonText' => __('Continue'),
            ];
        }

        return [
            'title' => __('Enable Two-Factor Authentication'),
            'description' => __('To finish enabling two-factor authentication, scan the QR code or enter the setup key in your authenticator app.'),
            'buttonText' => __('Continue'),
        ];
    }
}
</file>

<file path="app/Livewire/Settings/TwoFactor/RecoveryCodes.php">
<?php

namespace App\Livewire\Settings\TwoFactor;

use Exception;
use Laravel\Fortify\Actions\GenerateNewRecoveryCodes;
use Livewire\Attributes\Locked;
use Livewire\Component;

class RecoveryCodes extends Component
{
    #[Locked]
    public array $recoveryCodes = [];

    /**
     * Mount the component.
     */
    public function mount(): void
    {
        $this->loadRecoveryCodes();
    }

    /**
     * Generate new recovery codes for the user.
     */
    public function regenerateRecoveryCodes(GenerateNewRecoveryCodes $generateNewRecoveryCodes): void
    {
        $generateNewRecoveryCodes(auth()->user());

        $this->loadRecoveryCodes();
    }

    /**
     * Load the recovery codes for the user.
     */
    private function loadRecoveryCodes(): void
    {
        $user = auth()->user();

        if ($user->hasEnabledTwoFactorAuthentication() && $user->two_factor_recovery_codes) {
            try {
                $this->recoveryCodes = json_decode(decrypt($user->two_factor_recovery_codes), true);
            } catch (Exception) {
                $this->addError('recoveryCodes', 'Failed to load recovery codes');

                $this->recoveryCodes = [];
            }
        }
    }
}
</file>

<file path="app/Models/Category.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Category extends Model
{
    use HasFactory;
    protected $fillable = ['name', 'slug'];

    public function projects(): HasMany
    {
        return $this->hasMany(Project::class);
    }
}
</file>

<file path="app/Models/Investment.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Investment extends Model
{
    use HasFactory;

    protected $fillable = [
        'project_id',
        'investor_id',
        'status',
        'proposed_amount',
        'message',
        'final_amount',
        'agreement_details',
        'closed_at',
    ];

    protected $casts = [
        'proposed_amount' => 'decimal:2',
        'final_amount' => 'decimal:2',
        'closed_at' => 'datetime',
        'status' => 'string',
    ];

    /**
     * Una inversión está asociada a un proyecto.
     */
    public function project(): BelongsTo
    {
        return $this->belongsTo(Project::class);
    }

    /**
     * Una inversión pertenece a un usuario (inversor).
     */
    public function investor(): BelongsTo
    {
        return $this->belongsTo(User::class, 'investor_id');
    }
    
    public function messages(): HasMany
    {
        return $this->hasMany(Message::class);
    }
}
</file>

<file path="app/Models/Message.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Message extends Model
{
    use HasFactory;

    protected $fillable = [
        'investment_id',
        'sender_id',
        'receiver_id',
        'body',
        'read_at',
    ];

    protected $casts = [
        'read_at' => 'datetime',
    ];

    public function investment(): BelongsTo
    {
        return $this->belongsTo(Investment::class);
    }

    public function sender(): BelongsTo
    {
        return $this->belongsTo(User::class, 'sender_id');
    }

    public function receiver(): BelongsTo
    {
        return $this->belongsTo(User::class, 'receiver_id');
    }
}
</file>

<file path="app/Models/Notification.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Notification extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'message',
        'link',
        'read_at',
    ];

    protected $casts = [
        'read_at' => 'datetime',
    ];

    /**
     * Una notificación pertenece a un usuario.
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }
}
</file>

<file path="app/Models/Profile.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Profile extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'bio',
        'location',
        'company',
        'profile_photo_path',
    ];

    /**
     * Un perfil pertenece a un usuario.
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }
}
</file>

<file path="app/Models/Project.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

/**
 * 
 * @property int $id
 * @property int $user_id
 * @property string $title
 * @property string $description
 * @property int $category_id
 * @property float $funding_goal
 * @property float $min_investment
 * @property string $business_model
 * @property string $market_potential
 * @property string $status
 * @property Carbon|null $deadline
 * @property Carbon $created_at
 * @property Carbon $updated_at
 * @property mixed|null $embedding
 * 
 * --- Relaciones ---
 * @property-read \App\Models\User $entrepreneur
 * @property-read \App\Models\Category $category
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\ProjectPhoto[] $photos
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Investment[] $investments
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\User[] $likes
 * 
 */

class Project extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'title',
        'description',
        'category_id',
        'funding_goal',
        'min_investment',
        'business_model',
        'market_potential',
        'status',
        'deadline',
    ];

    protected $casts = [
        'funding_goal' => 'decimal:2',
        'min_investment' => 'decimal:2',
        'deadline' => 'datetime',
    ];

    /**
     * Un proyecto pertenece a un usuario (emprendedor).
     */
    public function entrepreneur(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    /**
     * Un proyecto pertenece a una categoría.
     */
    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    /**
     * Un proyecto tiene muchas fotos.
     */
    public function photos(): HasMany
    {
        return $this->hasMany(ProjectPhoto::class);
    }

    /**
     * Un proyecto tiene muchas inversiones (intereses de inversores).
     */
    public function investments(): HasMany
    {
        return $this->hasMany(Investment::class);
    }

    /**
     * Un proyecto puede tener muchos 'likes' de usuarios.
     */
    public function likes(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'project_likes')->withTimestamps();
    }

    /**
     * MÉTODOS NUEVOS PARA ANÁLISIS MEJORADO
     */

    /**
     * Calcula cuántos inversores mínimos se necesitan para alcanzar la meta
     */
    public function getRequiredInvestorsCount(): int
    {
        if ($this->min_investment <= 0) return 0;
        return (int) ceil($this->funding_goal / $this->min_investment);
    }

    /**
     * Obtiene el ratio de inversión (meta/inversión mínima)
     */
    public function getInvestmentRatio(): float
    {
        if ($this->min_investment <= 0) return 0;
        return $this->funding_goal / $this->min_investment;
    }

    /**
     * Determina si es un proyecto de alto riesgo (alta inversión mínima)
     */
    public function isHighRisk(): bool
    {
        return $this->min_investment > 50000; // Más de 50,000
    }

    /**
     * Determina si es un proyecto accesible (baja inversión mínima)
     */
    public function isAccessible(): bool
    {
        return $this->min_investment <= 10000; // Hasta 10,000
    }

    /**
     * Obtiene la meta de financiación formateada para TTS
     */
    public function getFundingGoalForTTS(): string
    {
        return $this->formatCurrencyForTTS($this->funding_goal);
    }

    /**
     * Obtiene la inversión mínima formateada para TTS
     */
    public function getMinInvestmentForTTS(): string
    {
        return $this->formatCurrencyForTTS($this->min_investment);
    }

    /**
     * Formatea montos de dinero para TTS
     */
    private function formatCurrencyForTTS(float $amount): string
    {
        if ($amount >= 1000000) {
            $millions = $amount / 1000000;
            if ($millions == intval($millions)) {
                return number_format($millions, 0) . ' millones de pesos';
            } else {
                return number_format($millions, 1) . ' millones de pesos';
            }
        } elseif ($amount >= 1000) {
            $thousands = $amount / 1000;
            if ($thousands == intval($thousands)) {
                return number_format($thousands, 0) . ' mil pesos';
            } else {
                return number_format($thousands, 1) . ' mil pesos';
            }
        } else {
            if ($amount == intval($amount)) {
                return number_format($amount, 0) . ' pesos';
            } else {
                $entero = intval($amount);
                $decimal = round(($amount - $entero) * 100);
                return number_format($entero, 0) . ' pesos con ' . $decimal . ' centavos';
            }
        }
    }
}
</file>

<file path="app/Models/ProjectPhoto.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class ProjectPhoto extends Model
{
    use HasFactory;

    protected $fillable = [
        'project_id',
        'path',
        'caption',
        'is_cover',
    ];

    protected $casts = [
        'is_cover' => 'boolean',
    ];

    /**
     * Una foto pertenece a un proyecto.
     */
    public function project(): BelongsTo
    {
        return $this->belongsTo(Project::class);
    }
}
</file>

<file path="app/Observers/ProjectObserver.php">
<?php

namespace App\Observers;

use App\Models\Project;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ProjectObserver
{
    private const EMBEDDING_API_URL = 'https://api-inference.huggingface.co/models/BAAI/bge-base-en-v1.5';

    /**
     * Handle the Project "created" event.
     * Se dispara justo después de que un proyecto es creado.
     */
    public function created(Project $project): void
    {
        $this->generateAndSaveEmbedding($project);
    }

    /**
     * Handle the Project "updated" event.
     * Se dispara justo después de que un proyecto es actualizado.
     */
    public function updated(Project $project): void
    {
        // Solo regeneramos el embedding si los campos de texto importantes han cambiado.
        // Esto evita llamadas innecesarias a la API si solo se cambia, por ejemplo, el monto.
        if ($project->isDirty(['title', 'description', 'category_id', 'business_model', 'market_potential'])) {
            $this->generateAndSaveEmbedding($project);
        }
    }

    /**
     * Método centralizado para generar y guardar el embedding.
     */
    private function generateAndSaveEmbedding(Project $project): void
    {
        $apiToken = config('services.huggingface.api_key');
        if (empty($apiToken)) {
            Log::error('Observer: La API Key de Hugging Face no está configurada.');
            return;
        }

        // Carga la relación 'category' si no está ya cargada.
        $project->loadMissing('category');

        $categoryName = $project->category?->name ?? 'No especificada';

        $textToEmbed = "Título del proyecto: {$project->title}. "
                     . "Categoría: {$categoryName}. "
                     . "Descripción: {$project->description}. "
                     . "Modelo de negocio: {$project->business_model}. "
                     . "Potencial de mercado: {$project->market_potential}.";

        try {
            $response = Http::withToken($apiToken)
                            ->timeout(60)
                            ->post(self::EMBEDDING_API_URL, [
                                'inputs' => $textToEmbed,
                                'options' => ['wait_for_model' => true]
                            ]);

            if ($response->successful()) {
                $embedding = $response->json();
                
                // Usamos saveQuietly() para guardar el modelo sin disparar
                // de nuevo los eventos 'updated', evitando un bucle infinito.
                $project->embedding = $embedding;
                $project->saveQuietly();

            } else {
                Log::error("Observer: Fallo al generar embedding para el proyecto ID {$project->id}: " . $response->body());
            }

        } catch (\Exception $e) {
            Log::error("Observer: Excepción para el proyecto ID {$project->id}: " . $e->getMessage());
        }
    }
}
</file>

<file path="app/Providers/FortifyServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\ServiceProvider;
use Laravel\Fortify\Fortify;

class FortifyServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Fortify::twoFactorChallengeView(fn () => view('livewire.auth.two-factor-challenge'));
        Fortify::confirmPasswordView(fn () => view('livewire.auth.confirm-password'));

        RateLimiter::for('two-factor', function (Request $request) {
            return Limit::perMinute(5)->by($request->session()->get('login.id'));
        });
    }
}
</file>

<file path="app/Services/ChatbotService.php">
<?php

namespace App\Services;

use App\Models\Project;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ChatbotService
{
    private string $groqApiKey;
    private string $groqModel;
    private string $groqApiUrl = 'https://api.groq.com/openai/v1/chat/completions';
    
    private EmbeddingService $embeddingService;

    public function __construct(EmbeddingService $embeddingService)
    {
        $this->embeddingService = $embeddingService;
        $this->groqApiKey = config('services.groq.api_key');
        $this->groqModel = config('services.groq.model');
    }

    public function generateResponse(string $userInput, array $history = []): string
    {
        Log::info("🤖 ChatbotService - Pregunta recibida", ['pregunta' => $userInput]);

        if (empty($this->groqApiKey)) {
            return 'Lo siento, el servicio de chat no está configurado correctamente.';
        }

        // Detectar intención y obtener contexto
        $intent = $this->detectIntent($userInput);
        
        if ($intent === 'greeting' || $intent === 'meta_question') {
            $contextString = "El usuario no está preguntando por datos específicos.";
        } else {
            $questionEmbedding = $this->embeddingService->generate($userInput);

            if (!$questionEmbedding || !$this->embeddingService->isValidEmbedding($questionEmbedding)) {
                $contextString = 'No se pudo procesar la pregunta para buscar en la base de datos.';
            } else {
                $relevantProjects = $this->searchSimilarProjects($questionEmbedding);
                $contextString = $this->buildEnhancedContextString($relevantProjects, $userInput);
            }
        }

        $messages = $this->buildEnhancedPrompt($userInput, $contextString, $history, $intent);
        
        try {
            $response = Http::withToken($this->groqApiKey)
                ->withHeaders(['Content-Type' => 'application/json'])
                ->timeout(30)
                ->withoutVerifying()
                ->post($this->groqApiUrl, [
                    'model' => $this->groqModel,
                    'messages' => $messages,
                    'temperature' => 0.7,
                    'max_tokens' => 1500, // AUMENTADO para respuestas más largas
                    'stream' => false,
                ]);

            if ($response->successful()) {
                $responseContent = $response->json('choices.0.message.content', 'No pude procesar la respuesta.');
                
                // POST-PROCESAMIENTO MEJORADO
                $responseContent = $this->formatForTTS($responseContent);
                
                return $responseContent;
            }

            return 'Hubo un problema al contactar a nuestro asistente. Por favor, intenta de nuevo más tarde.';

        } catch (\Exception $e) {
            Log::error('💥 Excepción en ChatbotService', ['message' => $e->getMessage()]);
            return 'Ocurrió un error inesperado en el servicio de chat.';
        }
    }

    /**
     * FORMATO TTS MEJORADO - Especialmente para números y moneda argentina
     */
    private function formatForTTS(string $text): string
    {
        // 1. Eliminar markdown completamente
        $text = preg_replace('/\*\*(.*?)\*\*/', '$1', $text);
        $text = preg_replace('/\*(.*?)\*/', '$1', $text);
        $text = preg_replace('/\#\#\# (.*)/', '$1', $text);
        $text = preg_replace('/\#\# (.*)/', '$1', $text);
        $text = preg_replace('/\# (.*)/', '$1', $text);
        
        // 2. Formatear números de dinero en PESOS ARGENTINOS - MEJORADO
        $text = preg_replace_callback('/\$\s*([0-9,]+(?:\.[0-9]+)?)/', function($matches) {
            $amount = $matches[1];
            
            // Remover comas y convertir a número
            $cleanAmount = str_replace(',', '', $amount);
            $number = floatval($cleanAmount);
            
            // Formatear para lectura natural en español
            if ($number == intval($number)) {
                // Número entero
                return $this->formatNumberToWords(intval($number)) . ' pesos';
            } else {
                // Número decimal - evitar "punto cero"
                $entero = intval($number);
                $decimal = round(($number - $entero) * 100);
                
                if ($decimal == 0) {
                    return $this->formatNumberToWords($entero) . ' pesos';
                } else {
                    return $this->formatNumberToWords($entero) . ' pesos con ' . $this->formatNumberToWords($decimal) . ' centavos';
                }
            }
        }, $text);
        
        // 3. Formatear números decimales genéricos (evitar "punto cero")
        $text = preg_replace_callback('/([0-9]+)\.0\b/', function($matches) {
            return $this->formatNumberToWords(intval($matches[1]));
        }, $text);
        
        $text = preg_replace_callback('/\b([0-9]+)\.([0-9]+)\b/', function($matches) {
            $entero = intval($matches[1]);
            $decimal = intval($matches[2]);
            return $this->formatNumberToWords($entero) . ' punto ' . $this->formatNumberToWords($decimal);
        }, $text);
        
        // 4. Reemplazar caracteres problemáticos
        $replacements = [
            '&' => 'y',
            '%' => ' por ciento',
            '#' => 'número',
            '~' => 'aproximadamente',
            '->' => 'hacia',
            '=>' => 'entonces',
            ' - ' => ', ',
            '•' => '-',
        ];
        
        $text = str_replace(array_keys($replacements), array_values($replacements), $text);
        
        // 5. Limpiar espacios múltiples y formato general
        $text = preg_replace('/\s+/', ' ', $text);
        $text = preg_replace('/([.,!?])([A-Za-z])/', '$1 $2', $text);
        
        // 6. Acortar respuestas muy largas (para evitar truncamiento)
        if (strlen($text) > 2000) {
            $text = $this->summarizeLongResponse($text);
        }
        
        return trim($text);
    }

    /**
     * CONVERTIR NÚMEROS A PALABRAS - Especial para español
     */
    private function formatNumberToWords(int $number): string
    {
        if ($number == 0) return 'cero';
        
        $units = ['', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve'];
        $teens = ['diez', 'once', 'doce', 'trece', 'catorce', 'quince', 'dieciséis', 'diecisiete', 'dieciocho', 'diecinueve'];
        $tens = ['', '', 'veinte', 'treinta', 'cuarenta', 'cincuenta', 'sesenta', 'setenta', 'ochenta', 'noventa'];
        $hundreds = ['', 'ciento', 'doscientos', 'trescientos', 'cuatrocientos', 'quinientos', 'seiscientos', 'setecientos', 'ochocientos', 'novecientos'];
        
        if ($number < 10) return $units[$number];
        if ($number < 20) return $teens[$number - 10];
        if ($number < 100) {
            $ten = floor($number / 10);
            $unit = $number % 10;
            
            if ($ten == 2 && $unit > 0) return 'veinti' . $units[$unit];
            if ($unit == 0) return $tens[$ten];
            return $tens[$ten] . ' y ' . $units[$unit];
        }
        if ($number < 1000) {
            $hundred = floor($number / 100);
            $remainder = $number % 100;
            
            if ($hundred == 1 && $remainder == 0) return 'cien';
            if ($remainder == 0) return $hundreds[$hundred];
            return $hundreds[$hundred] . ' ' . $this->formatNumberToWords($remainder);
        }
        if ($number < 1000000) {
            $thousand = floor($number / 1000);
            $remainder = $number % 1000;
            
            $thousandText = $thousand == 1 ? 'mil' : $this->formatNumberToWords($thousand) . ' mil';
            
            if ($remainder == 0) return $thousandText;
            return $thousandText . ' ' . $this->formatNumberToWords($remainder);
        }
        if ($number < 1000000000) {
            $million = floor($number / 1000000);
            $remainder = $number % 1000000;
            
            $millionText = $million == 1 ? 'un millón' : $this->formatNumberToWords($million) . ' millones';
            
            if ($remainder == 0) return $millionText;
            return $millionText . ' ' . $this->formatNumberToWords($remainder);
        }
        
        return strval($number); // Fallback para números muy grandes
    }

    /**
     * RESUMIR RESPUESTAS MUY LARGAS para evitar truncamiento
     */
    private function summarizeLongResponse(string $text): string
    {
        // Si es muy largo, tomar los primeros 1900 caracteres y agregar indicación
        if (strlen($text) > 2000) {
            $text = substr($text, 0, 1900);
            
            // Encontrar el último punto para cortar en una oración completa
            $lastSentence = strrpos($text, '.');
            if ($lastSentence !== false && $lastSentence > 1500) {
                $text = substr($text, 0, $lastSentence + 1);
            }
            
            $text .= '... Si necesitas más detalles, pregunta sobre aspectos específicos.';
        }
        
        return $text;
    }

    /**
     * PROMPT MEJORADO - Instrucciones más específicas para formato
     */
    private function buildEnhancedPrompt(string $userInput, string $contextString, array $history, string $intent): array
    {
        $personality = $this->getPersonalityByIntent($intent);
        
        $systemPrompt = <<<PROMPT
        Eres "NexoBot", un asistente de IA especializado en inversiones y emprendimientos para la plataforma "Nexo Emprendedor".

        {$personality['role']}

        REGLAS ESTRICTAS DE FORMATO Y ESTILO:
        1. **NUNCA uses markdown** - sin negritas, cursivas, viñetas con asteriscos, o símbolos especiales
        2. **Formato de números en PESOS ARGENTINOS**:
           - En lugar de "$10,000.00" escribe "diez mil pesos"
           - En lugar de "$1,500,000" escribe "un millón quinientos mil pesos"  
           - En lugar de "$2,500.50" escribe "dos mil quinientos pesos con cincuenta centavos"
           - NUNCA escribas "10.0" o números con ".0" - siempre escribe el número en palabras
        3. **Estructura clara pero natural**:
           - Usa párrafos cortos
           - Separa ideas con puntos y seguido, no con guiones o asteriscos
           - Usa lenguaje conversacional como si estuvieras hablando
        4. **Longitud adecuada**: Sé conciso pero completo. Responde en 100-200 palabras máximo.
        5. **Evita símbolos técnicos**: No uses ->, =>, #, ~, •, - para listas
        6. **Moneda**: Siempre usa PESOS, no dólares

        REGLAS DE CONTENIDO:
        1. Fundamenta tus respuestas ESTRICTAMENTE en el CONTEXTO proporcionado
        2. Sé proactivo: ofrece ayuda adicional o preguntas de seguimiento
        3. Para comparaciones: destaca diferencias clave de manera objetiva
        4. Para recomendaciones: basa en datos concretos, no en opiniones personales
        5. Siempre habla en español

        CONTEXTO ACTUAL:
        {$contextString}
        PROMPT;

        // Historial de conversación
        $apiHistory = [];
        foreach ($history as $entry) {
            $role = $entry['sender'] === 'bot' ? 'assistant' : 'user';
            $apiHistory[] = ['role' => $role, 'content' => $entry['text']];
        }

        // Mensaje del usuario con guía específica
        $userMessage = "Pregunta del usuario: {$userInput}\n\n";
        $userMessage .= $personality['guidance'];
        $userMessage .= "\n\nRecuerda: Usa siempre palabras para los números y evita símbolos de formato.";

        return array_merge(
            [['role' => 'system', 'content' => $systemPrompt]],
            $apiHistory,
            [['role' => 'user', 'content' => $userMessage]]
        );
    }

    // Los demás métodos permanecen igual (detectIntent, getPersonalityByIntent, searchSimilarProjects, etc.)
    private function detectIntent(string $userInput): string
    {
        $lowerInput = strtolower(trim($userInput));
        
        $greetings = ['hola', 'buenos días', 'buenas tardes', 'buenas noches', 'qué tal', 'como estas', 'hi', 'hello', 'hey', 'saludos'];
        foreach ($greetings as $word) {
            if (str_contains($lowerInput, $word)) return 'greeting';
        }
        
        $meta_questions = ['quién eres', 'qué puedes hacer', 'ayuda', 'cómo funcionas', 'qué eres', 'para qué sirves'];
        foreach ($meta_questions as $word) {
            if (str_contains($lowerInput, $word)) return 'meta_question';
        }
        
        $comparison_keywords = ['comparar', 'comparación', 'diferencia', 'diferencias', 'vs', 'versus', 'mejor', 'peor'];
        foreach ($comparison_keywords as $word) {
            if (str_contains($lowerInput, $word)) return 'comparison';
        }
        
        $recommendation_keywords = ['recomendar', 'recomendación', 'sugerir', 'sugerencia', 'conviene', 'conveniente', 'me conviene'];
        foreach ($recommendation_keywords as $word) {
            if (str_contains($lowerInput, $word)) return 'recommendation';
        }
        
        $analysis_keywords = ['por qué', 'razón', 'razones', 'motivo', 'motivos', 'análisis', 'analizar', 'detalle', 'detalles', 'riesgo', 'riesgos'];
        foreach ($analysis_keywords as $word) {
            if (str_contains($lowerInput, $word)) return 'analysis';
        }

        return 'data_query';
    }

    private function getPersonalityByIntent(string $intent): array
    {
        $personalities = [
            'greeting' => [
                'role' => "Eres un asistente cálido y entusiasta que da la bienvenida a los usuarios.",
                'guidance' => "Saluda amablemente y presenta brevemente cómo puedes ayudar con proyectos e inversiones."
            ],
            'comparison' => [
                'role' => "Eres un analista financiero especializado en comparar proyectos de inversión.",
                'guidance' => "Compara los proyectos de manera objetiva, destacando diferencias clave de forma clara y natural."
            ],
            'recommendation' => [
                'role' => "Eres un asesor de inversiones experimentado que ayuda a elegir entre opciones.",
                'guidance' => "Proporciona recomendaciones basadas en datos concretos. Explica tus razones claramente."
            ],
            'analysis' => [
                'role' => "Eres un analista estratégico que profundiza en los detalles de los proyectos.",
                'guidance' => "Analiza en profundidad los proyectos, considerando factores clave de manera objetiva."
            ],
            'data_query' => [
                'role' => "Eres un investigador meticuloso que encuentra y presenta información relevante.",
                'guidance' => "Presenta la información de manera clara y organizada."
            ],
            'meta_question' => [
                'role' => "Eres un asistente útil que explica tus capacidades de manera clara.",
                'guidance' => "Explica qué puedes hacer y cómo puedes ayudar de forma concisa."
            ]
        ];

        return $personalities[$intent] ?? $personalities['data_query'];
    }

    private function buildEnhancedContextString($projects, string $userQuestion): string
    {
        if ($projects->isEmpty()) {
            return "No se encontró información relevante en la base de datos sobre la consulta del usuario.";
        }
        
        $context = "INFORMACIÓN DETALLADA DE PROYECTOS RELEVANTES:\n\n";
        
        foreach ($projects as $index => $project) {
            $categoryName = $project->category ? $project->category->name : 'Sin categoría';
            
            $context .= "PROYECTO " . ($index + 1) . ":\n";
            $context .= "Título: {$project->title}\n";
            $context .= "Categoría: {$categoryName}\n";
            $context .= "Descripción: {$project->description}\n";
            $context .= "Modelo de Negocio: {$project->business_model}\n";
            $context .= "Potencial de Mercado: {$project->market_potential}\n";
            $context .= "Meta de Financiación: {$project->funding_goal} pesos\n";
            $context .= "Inversión Mínima: {$project->min_investment} pesos\n";
            $context .= "---\n\n";
        }
        
        $context .= "CONTEXTO DE LA CONSULTA:\n";
        $context .= "El usuario preguntó: \"{$userQuestion}\"\n";
        $context .= "Número de proyectos encontrados: " . $projects->count() . "\n";
        
        return trim($context);
    }

    private function searchSimilarProjects(array $questionEmbedding)
    {
        try {
            return Project::query()
                ->with('category')
                ->whereNotNull('embedding')
                ->orderByRaw('embedding <=> ?', [json_encode($questionEmbedding)])
                ->take(3)
                ->get();
        } catch (\Exception $e) {
            return Project::with('category')->latest()->take(2)->get();
        }
    }
}
</file>

<file path="app/Services/EmbeddingService.php">
<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class EmbeddingService
{
    private string $apiKey;

    public function __construct()
    {
        $this->apiKey = config('services.huggingface.api_key');
    }

    public function generate(string $text): ?array
    {
        $model = 'BAAI/bge-base-en-v1.5';
        $apiUrl = "https://api-inference.huggingface.co/models/{$model}";

        try {
            Log::info("🔧 Generando embedding para texto", [
                'text_length' => strlen($text),
                'text_preview' => substr($text, 0, 100) . '...',
                'model' => $model,
                'url' => $apiUrl
            ]);

            $response = Http::withToken($this->apiKey)
                ->timeout(60)
                ->withoutVerifying()
                ->post($apiUrl, [
                    'inputs' => $text,
                    'options' => [
                        'wait_for_model' => true,
                        'use_cache' => true
                    ]
                ]);

            if ($response->successful()) {
                $embedding = $response->json();
                
                Log::info("✅ Embedding generado exitosamente", [
                    'dimensions' => count($embedding),
                    'first_few_values' => array_slice($embedding, 0, 5)
                ]);
                
                return $embedding;
            }

            Log::error('❌ Error en EmbeddingService - Respuesta no exitosa', [
                'status' => $response->status(),
                'body' => $response->body(),
                'text_preview' => substr($text, 0, 100),
                'model' => $model,
                'url' => $apiUrl
            ]);

            // Intentar con modelo alternativo si el principal falla
            if ($response->status() === 404) {
                return $this->tryAlternativeModel($text);
            }

        } catch (\Exception $e) {
            Log::error('💥 Excepción en EmbeddingService', [
                'message' => $e->getMessage(),
                'text_preview' => substr($text, 0, 100)
            ]);
        }

        return null;
    }

    /**
     * Método de respaldo con modelo alternativo
     */
    private function tryAlternativeModel(string $text): ?array
    {
        Log::info("🔄 Intentando con modelo alternativo...");
        
        $alternativeModel = 'sentence-transformers/all-mpnet-base-v2';
        $apiUrl = "https://api-inference.huggingface.co/models/{$alternativeModel}";

        try {
            $response = Http::withToken($this->apiKey)
                ->timeout(60)
                ->withoutVerifying()
                ->post($apiUrl, [
                    'inputs' => $text,
                    'options' => [
                        'wait_for_model' => true,
                        'use_cache' => true
                    ]
                ]);

            if ($response->successful()) {
                $embedding = $response->json();
                Log::info("✅ Embedding generado con modelo alternativo", [
                    'model' => $alternativeModel,
                    'dimensions' => count($embedding)
                ]);
                return $embedding;
            }

            Log::error('❌ Modelo alternativo también falló', [
                'status' => $response->status(),
                'body' => $response->body()
            ]);

        } catch (\Exception $e) {
            Log::error('💥 Excepción en modelo alternativo', [
                'message' => $e->getMessage()
            ]);
        }

        return null;
    }

    /**
     * Verifica si el embedding tiene el formato correcto
     */
    public function isValidEmbedding($embedding): bool
    {
        return is_array($embedding) && 
               count($embedding) > 100 && // Al menos 100 dimensiones (los modelos varían)
               is_numeric($embedding[0]);
    }
}
</file>

<file path="app/Services/FaceRecognitionService.php">
<?php

namespace App\Services;

use App\Models\User;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class FaceRecognitionService
{
    /**
     * Registra el rostro de un usuario en la API de reconocimiento facial.
     *
     * @param User $user El usuario al que se asociará el rostro.
     * @param string $imageBase64 La imagen en formato data URL (base64).
     * @return bool True si fue exitoso, false si falló.
     */
    public function enroll(User $user, string $imageBase64): bool
    {
        // Extraemos solo los datos de la imagen
        $imageData = base64_decode(preg_replace('#^data:image/\w+;base64,#i', '', $imageBase64));

        try {
            $response = Http::asMultipart()
                ->post(config('services.face_api.url') . '/register', [
                    [
                        'name'     => 'identifier',
                        'contents' => $user->email,
                    ],
                    [
                        'name'     => 'image',
                        'contents' => $imageData,
                        'filename' => 'face.jpg'
                    ]
                ]);

            if ($response->successful()) {
                return true;
            }

            Log::error('Face API Error (Enroll Service): ' . $response->body());
            return false;

        } catch (\Exception $e) {
            Log::error('Face API Connection Error (Service): ' . $e->getMessage());
            return false;
        }
    }
}
</file>

<file path="app/Services/VoiceService.php">
<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class VoiceService
{
    private ?string $hfApiKey;
    private ?string $azureApiKey;
    private ?string $azureRegion;

    public function __construct()
    {
        $this->hfApiKey = config('services.huggingface.api_key');
        $this->azureApiKey = config('services.azure.speech_key');
        $this->azureRegion = config('services.azure.speech_region');
    }

    /**
     * Transcribe audio a texto usando Hugging Face (Whisper), que es flexible con los formatos.
     */
    public function transcribeAudio(string $audioFilePath): ?string
    {
        if (empty($this->hfApiKey)) {
            Log::error('Hugging Face API Key no está configurada para STT.');
            return null;
        }

        $model = 'openai/whisper-large-v3';
        $apiUrl = "https://api-inference.huggingface.co/models/{$model}";

        try {
            $response = Http::withToken($this->hfApiKey)
                ->timeout(60)
                ->withBody(file_get_contents($audioFilePath), 'audio/webm') // Enviamos el .webm directamente
                ->withoutVerifying()
                ->post($apiUrl, ['options' => ['wait_for_model' => true]]);

            if ($response->successful()) {
                return $response->json('text');
            }

            Log::error('HuggingFace STT Error', [
                'status' => $response->status(),
                'body' => $response->body()
            ]);
            return null;
        } catch (\Exception $e) {
            Log::error('Excepción en HuggingFace STT', ['message' => $e->getMessage()]);
            return null;
        }
    }

    /**
     * Sintetiza texto a voz usando Azure AI Text to Speech para alta calidad.
     */
    public function synthesizeSpeech(string $text): ?string
    {
        if (empty($this->azureApiKey) || empty($this->azureRegion)) {
            Log::error('Credenciales de Azure no están configuradas para TTS.');
            return null;
        }

        $endpoint = "https://{$this->azureRegion}.tts.speech.microsoft.com/cognitiveservices/v1";
        $ssml = "<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xml:lang='es-ES'><voice name='es-ES-ElviraNeural'>" . htmlspecialchars($text) . "</voice></speak>";

        try {
            $response = Http::withHeaders([
                'Ocp-Apim-Subscription-Key' => $this->azureApiKey,
                'Content-Type' => 'application/ssml+xml',
                'X-Microsoft-OutputFormat' => 'audio-16khz-128kbitrate-mono-mp3',
            ])
            ->withBody($ssml, 'application/ssml+xml')
            ->timeout(60)
            ->withoutVerifying()
            ->post($endpoint);

            if ($response->successful() && str_contains($response->header('Content-Type'), 'audio')) {
                return $response->body();
            }
            
            Log::error('Azure TTS Error', ['status' => $response->status(), 'body' => $response->body()]);
            return null;
        } catch (\Exception $e) {
            Log::error('Excepción en Azure TTS', ['message' => $e->getMessage()]);
            return null;
        }
    }
}
</file>

<file path="artisan">
#!/usr/bin/env php
<?php

use Illuminate\Foundation\Application;
use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
/** @var Application $app */
$app = require_once __DIR__.'/bootstrap/app.php';

$status = $app->handleCommand(new ArgvInput);

exit($status);
</file>

<file path="bootstrap/app.php">
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();
</file>

<file path="bootstrap/cache/.gitignore">
*
!.gitignore
</file>

<file path="bootstrap/providers.php">
<?php

return [
    App\Providers\AppServiceProvider::class,
    App\Providers\FortifyServiceProvider::class,
];
</file>

<file path="config/app.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];
</file>

<file path="config/auth.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];
</file>

<file path="config/cache.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];
</file>

<file path="config/cors.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Cross-Origin Resource Sharing (CORS) Configuration
    |--------------------------------------------------------------------------
    |
    | Here you can configure the settings for cross-origin resource sharing
    | or "CORS". This determines which cross-origin operations may execute
    | in web browsers. You are free to adjust these settings as needed.
    |
    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    |
    */

    'paths' => [
        // <-- CAMBIO 1: Aseguramos que TODAS las rutas ('*') sean manejadas por CORS.
        // Esto es útil en desarrollo para cubrir rutas como /face-login.
        '*',
        'api/*',
        'sanctum/csrf-cookie'
    ],

    'allowed_methods' => ['*'],

    'allowed_origins' => [
        // <-- CAMBIO 2: Añadimos las URLs del servidor de desarrollo de Vite.
        // Esto le dice a Laravel que confíe en las peticiones que vienen de tu frontend.
        // El puerto por defecto es 5173, ajústalo si el tuyo es diferente.
        'http://localhost:5173',
        'http://127.0.0.1:5173',
    ],

    'allowed_origins_patterns' => [],

    'allowed_headers' => ['*'],

    'exposed_headers' => [],

    'max_age' => 0,

    'supports_credentials' => true, // <-- CAMBIO 3: Ponemos esto en 'true' para permitir que el navegador envíe cookies de sesión.

];
</file>

<file path="config/filesystems.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];
</file>

<file path="config/logging.php">
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];
</file>

<file path="config/mail.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];
</file>

<file path="config/queue.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];
</file>

<file path="config/session.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
</file>

<file path="database/.gitignore">
*.sqlite*
</file>

<file path="database/certs/prod-ca-2021.crt">
-----BEGIN CERTIFICATE-----
MIIDxDCCAqygAwIBAgIUbLxMod62P2ktCiAkxnKJwtE9VPYwDQYJKoZIhvcNAQEL
BQAwazELMAkGA1UEBhMCVVMxEDAOBgNVBAgMB0RlbHdhcmUxEzARBgNVBAcMCk5l
dyBDYXN0bGUxFTATBgNVBAoMDFN1cGFiYXNlIEluYzEeMBwGA1UEAwwVU3VwYWJh
c2UgUm9vdCAyMDIxIENBMB4XDTIxMDQyODEwNTY1M1oXDTMxMDQyNjEwNTY1M1ow
azELMAkGA1UEBhMCVVMxEDAOBgNVBAgMB0RlbHdhcmUxEzARBgNVBAcMCk5ldyBD
YXN0bGUxFTATBgNVBAoMDFN1cGFiYXNlIEluYzEeMBwGA1UEAwwVU3VwYWJhc2Ug
Um9vdCAyMDIxIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqQXW
QyHOB+qR2GJobCq/CBmQ40G0oDmCC3mzVnn8sv4XNeWtE5XcEL0uVih7Jo4Dkx1Q
DmGHBH1zDfgs2qXiLb6xpw/CKQPypZW1JssOTMIfQppNQ87K75Ya0p25Y3ePS2t2
GtvHxNjUV6kjOZjEn2yWEcBdpOVCUYBVFBNMB4YBHkNRDa/+S4uywAoaTWnCJLUi
cvTlHmMw6xSQQn1UfRQHk50DMCEJ7Cy1RxrZJrkXXRP3LqQL2ijJ6F4yMfh+Gyb4
O4XajoVj/+R4GwywKYrrS8PrSNtwxr5StlQO8zIQUSMiq26wM8mgELFlS/32Uclt
NaQ1xBRizkzpZct9DwIDAQABo2AwXjALBgNVHQ8EBAMCAQYwHQYDVR0OBBYEFKjX
uXY32CztkhImng4yJNUtaUYsMB8GA1UdIwQYMBaAFKjXuXY32CztkhImng4yJNUt
aUYsMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAB8spzNn+4VU
tVxbdMaX+39Z50sc7uATmus16jmmHjhIHz+l/9GlJ5KqAMOx26mPZgfzG7oneL2b
VW+WgYUkTT3XEPFWnTp2RJwQao8/tYPXWEJDc0WVQHrpmnWOFKU/d3MqBgBm5y+6
jB81TU/RG2rVerPDWP+1MMcNNy0491CTL5XQZ7JfDJJ9CCmXSdtTl4uUQnSuv/Qx
Cea13BX2ZgJc7Au30vihLhub52De4P/4gonKsNHYdbWjg7OWKwNv/zitGDVDB9Y2
CMTyZKG3XEu5Ghl1LEnI3QmEKsqaCLv12BnVjbkSeZsMnevJPs1Ye6TjjJwdik5P
o/bKiIz+Fq8=
-----END CERTIFICATE-----
</file>

<file path="database/factories/UserFactory.php">
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= 'password',
            'remember_token' => Str::random(10),
            'two_factor_secret' => Str::random(10),
            'two_factor_recovery_codes' => Str::random(10),
            'two_factor_confirmed_at' => now(),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }

    /**
     * Indicate that the model does not have two-factor authentication configured.
     */
    public function withoutTwoFactor(): static
    {
        return $this->state(fn (array $attributes) => [
            'two_factor_secret' => null,
            'two_factor_recovery_codes' => null,
            'two_factor_confirmed_at' => null,
        ]);
    }
}
</file>

<file path="database/migrations/0001_01_01_000001_create_cache_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
</file>

<file path="database/migrations/0001_01_01_000002_create_jobs_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};
</file>

<file path="database/migrations/2025_09_22_145432_add_two_factor_columns_to_users_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->text('two_factor_secret')->after('password')->nullable();
            $table->text('two_factor_recovery_codes')->after('two_factor_secret')->nullable();
            $table->timestamp('two_factor_confirmed_at')->after('two_factor_recovery_codes')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn([
                'two_factor_secret',
                'two_factor_recovery_codes',
                'two_factor_confirmed_at',
            ]);
        });
    }
};
</file>

<file path="database/migrations/2025_10_16_220716_create_profiles_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('profiles', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->text('bio')->nullable();
            $table->string('location')->nullable();
            $table->string('company')->nullable(); // Empresa o especialidad
            $table->string('profile_photo_path', 2048)->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('profiles');
    }
};
</file>

<file path="database/migrations/2025_10_16_220818_create_categories_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('slug')->unique(); // Para URLs amigables, ej: 'tecnologia-financiera'
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('categories');
    }
};
</file>

<file path="database/migrations/2025_10_16_220819_create_projects_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('projects', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade'); // El emprendedor dueño
            $table->string('title');
            $table->text('description');
            $table->foreignId('category_id')->constrained()->onDelete('cascade');
            $table->decimal('funding_goal', 15, 2); // Monto total que se busca
            $table->decimal('min_investment', 15, 2); // Monto mínimo por inversor
            $table->text('business_model');
            $table->text('market_potential');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('projects');
    }
};
</file>

<file path="database/migrations/2025_10_16_220858_create_project_photos_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('project_photos', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->string('path', 2048);
            $table->string('caption')->nullable();
            $table->boolean('is_cover')->default(false); // Para marcar una foto como principal
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('project_photos');
    }
};
</file>

<file path="database/migrations/2025_10_16_220934_create_project_likes_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('project_likes', function (Blueprint $table) {
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            // Clave primaria compuesta para evitar likes duplicados
            $table->primary(['user_id', 'project_id']);
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('project_likes');
    }
};
</file>

<file path="database/migrations/2025_10_16_221114_create_investments_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('investments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->onDelete('cascade');
            $table->foreignId('investor_id')->constrained('users')->onDelete('cascade'); // El inversor interesado
            
            $table->enum('status', [
                'pending',      // Interés inicial mostrado por el inversor
                'negotiating',  // Emprendedor e inversor están en contacto
                'accepted',     // El emprendedor acepta la negociación
                'closed',       // Acuerdo cerrado y financiado
                'rejected'      // El emprendedor o inversor rechaza la propuesta
            ])->default('pending');

            $table->decimal('proposed_amount', 15, 2); // Monto que el inversor ofrece
            $table->text('message')->nullable(); // Mensaje inicial del inversor
            
            // Campos para el seguimiento una vez cerrado
            $table->decimal('final_amount', 15, 2)->nullable();
            $table->text('agreement_details')->nullable();
            $table->timestamp('closed_at')->nullable();

            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('investments');
    }
};
</file>

<file path="database/migrations/2025_10_16_224020_create_sessions_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('sessions');
    }
};
</file>

<file path="database/migrations/2025_10_17_012306_add_embedding_to_projects_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('projects', function (Blueprint $table) {
            // Solo intenta crear la columna de vector si NO estamos ejecutando tests.
            if (!app()->runningUnitTests()) {
                // Dimensión a 768 para el modelo
                $table->vector('embedding', 768)->nullable();
            }
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('projects', function (Blueprint $table) {
            if (!app()->runningUnitTests()) {
                $table->dropColumn('embedding');
            }
        });
    }
};
</file>

<file path="database/migrations/2025_10_20_141806_add_status_and_deadline_to_projects_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::table('projects', function (Blueprint $table) {
            // El estado del ciclo de vida del proyecto
            $table->enum('status', ['active', 'funded', 'expired'])->default('active')->after('market_potential');
            // La fecha límite para alcanzar la meta de financiación
            $table->timestamp('deadline')->nullable()->after('status');
        });
    }

    public function down(): void
    {
        Schema::table('projects', function (Blueprint $table) {
            $table->dropColumn(['status', 'deadline']);
        });
    }
};
</file>

<file path="database/migrations/2025_10_21_004637_create_messages_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('messages', function (Blueprint $table) {
            $table->id();
            $table->foreignId('investment_id')->constrained()->onDelete('cascade');
            $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('receiver_id')->constrained('users')->onDelete('cascade');
            $table->text('body');
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('messages');
    }
};
</file>

<file path="database/migrations/2025_10_21_053853_create_notifications_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('notifications', function (Blueprint $table) {
            $table->id();
            // A qué usuario pertenece esta notificación
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            // El texto que se mostrará
            $table->string('message');
            // El enlace al que se redirigirá al hacer clic (puede ser null)
            $table->string('link')->nullable();
            // Para saber si la notificación ya fue leída
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('notifications');
    }
};
</file>

<file path="database/seeders/CategorySeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Category;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class CategorySeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $categories = [
            'Tecnología',
            'AgroTech',
            'FinTech (Tecnología Financiera)',
            'Salud y Bienestar',
            'Educación',
            'Turismo y Hotelería',
            'Energías Renovables',
            'Comercio Electrónico',
            'Software como Servicio (SaaS)',
            'Alimentos y Bebidas',
            'Inmobiliario',
            'Impacto Social',
            'General'
        ];

        foreach ($categories as $categoryName) {
            DB::reconnect();

            Category::updateOrCreate(
                ['name' => $categoryName],
                ['slug' => Str::slug($categoryName)]
            );
        }
    }
}
</file>

<file path="lang/es.json">
{
    "(and :count more error)": "(y :count error más)",
    "(and :count more errors)": "(y :count error más)|(y :count errores más)|(y :count errores más)",
    "2FA Recovery Codes": "Códigos de recuperación de 2FA",
    "A decryption key is required.": "Se requiere una clave de descifrado.",
    "A new verification link has been sent to the email address you provided during registration.": "Se ha enviado un nuevo enlace de verificación a la dirección de correo electrónico que proporcionó durante el registro.",
    "A new verification link has been sent to your email address.": "Se ha enviado un nuevo enlace de verificación a su dirección de correo electrónico.",
    "A reset link will be sent if the account exists.": "Se enviará un enlace de restablecimiento si la cuenta existe.",
    "A Timeout Occurred": "Se produjo un tiempo de espera",
    "Accept": "Aceptar",
    "Accepted": "Aceptado",
    "Action": "Acción",
    "Actions": "Acciones",
    "Add": "Añadir",
    "Add :name": "Agregar :name",
    "Admin": "Administrar",
    "Agree": "Aceptar",
    "All rights reserved.": "Todos los derechos reservados.",
    "Already have an account?": "¿Ya tiene una cuenta?",
    "Already Reported": "Ya Reportado",
    "Appearance": "Apariencia",
    "Archive": "Archivar",
    "Are you sure you want to delete your account?": "¿Está seguro que desea eliminar su cuenta?",
    "Assign": "Asignar",
    "Associate": "Asociar",
    "Attach": "Adjuntar",
    "Authentication Code": "Código de autenticación",
    "Back": "Atrás",
    "Bad Gateway": "Mala puerta de enlace",
    "Bad Request": "Solicitud incorrecta",
    "Bandwidth Limit Exceeded": "Límite de ancho de banda excedido",
    "Browse": "Navegar",
    "Cancel": "Cancelar",
    "Choose": "Elija",
    "Choose :name": "Elegir :name",
    "Choose File": "Elija archivo",
    "Choose Image": "Elegir Imagen",
    "Click here to re-send the verification email.": "Haga clic aquí para reenviar el correo de verificación.",
    "Click to copy": "Haga clic para copiar",
    "Client Closed Request": "Solicitud cerrada del cliente",
    "Close": "Cerrar",
    "Collapse": "Colapsar",
    "Collapse All": "Colapsar todo",
    "Comment": "Comentar",
    "Confirm": "Confirmar",
    "Confirm Password": "Confirmar contraseña",
    "Confirm password": "Confirmar contraseña",
    "Conflict": "Conflicto",
    "Connect": "Conectar",
    "Connection Closed Without Response": "Conexión cerrada sin respuesta",
    "Connection Timed Out": "Tiempo de conexión agotado",
    "Continue": "Continuar",
    "Create": "Crear",
    "Create :name": "Crear :name",
    "Create account": "Crear cuenta",
    "Create an account": "Crear una cuenta",
    "Created": "Creado",
    "Current password": "Contraseña actual",
    "Dark": "Oscuro",
    "Dashboard": "Panel",
    "Delete": "Eliminar",
    "Delete :name": "Eliminar :name",
    "Delete account": "Eliminar cuenta",
    "Delete your account and all of its resources": "Elimine su cuenta y todos sus recursos",
    "Detach": "Desvincular",
    "Details": "Detalles",
    "Disable": "Deshabilitar",
    "Disable 2FA": "Desactivar 2FA",
    "Disabled": "Desactivado",
    "Discard": "Descartar",
    "Documentation": "Documentación",
    "Don't have an account?": "¿No tiene una cuenta?",
    "Done": "Hecho",
    "Down": "Abajo",
    "Duplicate": "Duplicar",
    "Duplicate :name": "Duplicar :name",
    "Each recovery code can be used once to access your account and will be removed after use. If you need more, click Regenerate Codes above.": "Cada código de recuperación se puede usar una vez para acceder a su cuenta y se eliminará después de usarlo. Si necesita más, haga clic arriba en \"Regenerar códigos\".",
    "Edit": "Editar",
    "Edit :name": "Editar :name",
    "Email": "Correo electrónico",
    "Email Address": "Correo electrónico",
    "Email address": "Correo electrónico",
    "Email password reset link": "Enviar enlace de restablecimiento de contraseña",
    "Enable": "Habilitar",
    "Enable 2FA": "Habilitar 2FA",
    "Enable Two-Factor Authentication": "Habilitar autenticación de dos factores",
    "Enabled": "Habilitado",
    "Encrypted environment file already exists.": "El archivo de entorno cifrado ya existe.",
    "Encrypted environment file not found.": "No se encontró el archivo de entorno cifrado.",
    "Ensure your account is using a long, random password to stay secure": "Asegúrese de que su cuenta esté usando una contraseña larga y aleatoria para mantenerla segura",
    "Enter the 6-digit code from your authenticator app.": "Ingrese el código de 6 dígitos de su aplicación de autenticación.",
    "Enter the authentication code provided by your authenticator application.": "Ingrese el código de autenticación proporcionado por su aplicación de autenticación.",
    "Enter your details below to create your account": "Ingrese sus datos a continuación para crear su cuenta",
    "Enter your email and password below to log in": "Ingrese su correo electrónico y contraseña a continuación para iniciar sesión",
    "Enter your email to receive a password reset link": "Ingrese su correo electrónico para recibir un enlace de restablecimiento de contraseña",
    "Environment file already exists.": "El archivo de entorno ya existe.",
    "Environment file not found.": "Archivo de entorno no encontrado.",
    "errors": "errores",
    "Expand": "Expandir",
    "Expand All": "Expandir todo",
    "Expectation Failed": "Expectativa fallida",
    "Explanation": "Explicación",
    "Export": "Exportar",
    "Export :name": "Exportar :name",
    "Failed Dependency": "Dependencia fallida",
    "File": "Archivo",
    "Files": "Archivos",
    "Forbidden": "Prohibido",
    "Forgot password": "Olvido de contraseña",
    "Forgot your password?": "¿Olvidó su contraseña?",
    "Found": "Encontrado",
    "Full name": "Nombre completo",
    "Gateway Timeout": "Tiempo de espera de puerta de enlace",
    "Go Home": "Ir a inicio",
    "Go to page :page": "Ir a la página :page",
    "Gone": "Recurso no disponible",
    "Hello!": "¡Hola!",
    "Hide": "Ocultar",
    "Hide :name": "Ocultar :name",
    "Hide Recovery Codes": "Ocultar códigos de recuperación",
    "Home": "Inicio",
    "HTTP Version Not Supported": "Versión HTTP no compatible",
    "I'm a teapot": "Soy una tetera",
    "If you did not create an account, no further action is required.": "Si no ha creado una cuenta, no se requiere ninguna acción adicional.",
    "If you did not request a password reset, no further action is required.": "Si no ha solicitado el restablecimiento de contraseña, omita este mensaje de correo electrónico.",
    "If you're having trouble clicking the \":actionText\" button, copy and paste the URL below\ninto your web browser:": "Si está teniendo problemas al hacer clic en el botón \":actionText\", copie y pegue la URL de abajo\nen su navegador web:",
    "IM Used": "IM usado",
    "Image": "Imagen",
    "Impersonate": "Personificar",
    "Impersonation": "Personificación",
    "Import": "Importar",
    "Import :name": "Importar :name",
    "Insufficient Storage": "Espacio insuficiente",
    "Internal Server Error": "Error interno del servidor",
    "Introduction": "Introducción",
    "Invalid filename.": "Nombre de archivo no válido.",
    "Invalid JSON was returned from the route.": "Se devolvió un JSON no válido desde la ruta.",
    "Invalid SSL Certificate": "Certificado SSL no válido",
    "Length Required": "Longitud requerida",
    "Light": "Claro",
    "Like": "Me gusta",
    "Load": "Cargar",
    "Localize": "Localizar",
    "Location": "Ubicación",
    "Locked": "Bloqueado",
    "Log In": "Iniciar sesión",
    "Log in": "Iniciar sesión",
    "log in": "iniciar sesión",
    "Log in to your account": "Inicie sesión en su cuenta",
    "Log Out": "Finalizar sesión",
    "Log out": "Cerrar sesión",
    "Login": "Iniciar sesión",
    "login using a recovery code": "iniciar sesión usando un código de recuperación",
    "login using an authentication code": "iniciar sesión usando un código de autenticación",
    "Logout": "Finalizar sesión",
    "Loop Detected": "Bucle detectado",
    "Maintenance Mode": "Modo de mantenimiento",
    "Manage your profile and account settings": "Administre su perfil y la configuración de su cuenta",
    "Manage your two-factor authentication settings": "Administre su configuración de autenticación de dos factores",
    "Method Not Allowed": "Método no permitido",
    "Misdirected Request": "Solicitud mal dirigida",
    "Moved Permanently": "Movido permanentemente",
    "Multi-Status": "Multiestado",
    "Multiple Choices": "Múltiples opciones",
    "Name": "Nombre",
    "Network Authentication Required": "Se requiere autenticación de red",
    "Network Connect Timeout Error": "Error de tiempo de espera de conexión de red",
    "Network Read Timeout Error": "Error de tiempo de espera de lectura de red",
    "New": "Nuevo",
    "New :name": "Nuevo :name",
    "New password": "Nueva contraseña",
    "No": "No",
    "No Content": "Sin contenido",
    "Non-Authoritative Information": "Información no autorizada",
    "Not Acceptable": "Inaceptable",
    "Not Extended": "no extendido",
    "Not Found": "No encontrado",
    "Not Implemented": "No se ha implementado",
    "Not Modified": "No modificado",
    "of": "de",
    "OK": "Correcto",
    "Once your account is deleted, all of its resources and data will also be permanently deleted. Please confirm you would like to permanently delete your account.": "Una vez que se elimine su cuenta, todos sus recursos y datos también se eliminarán de forma permanente. Confirme que desea eliminar su cuenta de forma permanente.",
    "Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.": "Una vez que se elimine su cuenta, todos sus recursos y datos se eliminarán de forma permanente. Ingrese su contraseña para confirmar que desea eliminar su cuenta de forma permanente.",
    "Open": "Abrir",
    "Open in a current window": "Abrir en una ventana actual",
    "Open in a new window": "Abrir en una ventana nueva",
    "Open in a parent frame": "Abrir en un marco principal",
    "Open in the topmost frame": "Abrir en el marco superior",
    "Open on the website": "Abrir en el sitio web",
    "or you can": "o usted puede",
    "or, enter the code manually": "o, ingrese el código manualmente",
    "Or, return to": "O, regrese a",
    "Origin Is Unreachable": "El origen es inalcanzable",
    "Page Expired": "Página expirada",
    "Pagination Navigation": "Navegación por los enlaces de paginación",
    "Partial Content": "Contenido parcial",
    "Password": "Contraseña",
    "Payload Too Large": "Solicitud demasiado grande",
    "Payment Required": "Pago requerido",
    "Permanent Redirect": "Redirección permanente",
    "Platform": "Plataforma",
    "Please click the button below to verify your email address.": "Por favor, haga clic en el botón de abajo para verificar su dirección de correo electrónico.",
    "Please confirm access to your account by entering one of your emergency recovery codes.": "Confirme el acceso a su cuenta ingresando uno de sus códigos de recuperación de emergencia.",
    "Please enter your new password below": "Por favor, introduzca su nueva contraseña a continuación",
    "Please verify your email address by clicking on the link we just emailed to you.": "Por favor, verifique su dirección de correo electrónico haciendo clic en el enlace que acabamos de enviarle.",
    "Precondition Failed": "Error de condición previa",
    "Precondition Required": "Precondición requerida",
    "Preview": "Previsualizar",
    "Price": "Precio",
    "Processing": "Procesando",
    "Profile": "Perfil",
    "Proxy Authentication Required": "Se requiere autenticación proxy",
    "Railgun Error": "Error de cañón de riel",
    "Range Not Satisfiable": "Rango no satisfactorio",
    "Record": "Registro",
    "Recovery Code": "Código de recuperación",
    "Recovery codes let you regain access if you lose your 2FA device. Store them in a secure password manager.": "Los códigos de recuperación le permiten recuperar el acceso si pierde su dispositivo con autenticación de dos factores. Guárdelos en un gestor de contraseñas seguro.",
    "Regards,": "Saludos,",
    "Regenerate Codes": "Regenerar códigos",
    "Register": "Registrarse",
    "Remember me": "Mantener sesión activa",
    "Repository": "Repositorio",
    "Request Header Fields Too Large": "Campos de encabezado de solicitud demasiado grandes",
    "Request Timeout": "Solicitud de tiempo de espera",
    "Resend verification email": "Reenviar correo de verificación",
    "Reset Content": "Restablecer contenido",
    "Reset Password": "Restablecer contraseña",
    "Reset password": "Restablecer contraseña",
    "Reset Password Notification": "Notificación de restablecimiento de contraseña",
    "Restore": "Restaurar",
    "Restore :name": "Restaurar :name",
    "results": "resultados",
    "Retry With": "Reintentar con",
    "Save": "Guardar",
    "Save & Close": "Guardar y cerrar",
    "Save & Return": "Guardar y volver",
    "Save :name": "Guardar :name",
    "Saved.": "Guardado.",
    "Search": "Buscar",
    "Search :name": "Buscar :name",
    "See Other": "Ver otros",
    "Select": "Seleccione",
    "Select All": "Seleccionar todo",
    "Send": "Enviar",
    "Server Error": "Error del servidor",
    "Service Unavailable": "Servicio no disponible",
    "Session Has Expired": "La sesión ha expirado",
    "Settings": "Configuración",
    "Show": "Mostrar",
    "Show :name": "Mostrar :name",
    "Show All": "Mostrar todo",
    "Showing": "Mostrando",
    "Sign In": "Iniciar sesión",
    "Sign up": "Regístrese",
    "Solve": "Resolver",
    "SSL Handshake Failed": "Protocolo de enlace SSL fallido",
    "Start": "Comenzar",
    "Stop": "Detener",
    "Submit": "Enviar",
    "Subscribe": "Suscriba",
    "Switch": "Cambiar",
    "Switch To Role": "Cambiar de rol",
    "Switching Protocols": "Protocolos de conmutación",
    "System": "Sistema",
    "Tag": "Etiqueta",
    "Tags": "Etiquetas",
    "Temporary Redirect": "Redirección temporal",
    "The :attribute must be at least :length characters and contain at least one number.": "La :attribute debe tener al menos :length caracteres y contener por lo menos un número.",
    "The :attribute must be at least :length characters and contain at least one special character and one number.": "La :attribute debe tener al menos :length caracteres y contener por lo menos un caracter especial y un número.",
    "The :attribute must be at least :length characters and contain at least one special character.": "La :attribute debe tener al menos :length caracteres y contener por lo menos un carácter especial.",
    "The :attribute must be at least :length characters and contain at least one uppercase character and one number.": "La :attribute debe tener al menos :length caracteres y contener por lo menos una letra mayúscula y un número.",
    "The :attribute must be at least :length characters and contain at least one uppercase character and one special character.": "La :attribute debe tener al menos :length caracteres y contener por lo menos una letra mayúscula y un carácter especial.",
    "The :attribute must be at least :length characters and contain at least one uppercase character, one number, and one special character.": "La :attribute debe tener al menos :length caracteres y contener por lo menos una letra mayúscula, un número y un carácter especial.",
    "The :attribute must be at least :length characters and contain at least one uppercase character.": "La :attribute debe tener al menos :length caracteres y contener por lo menos una letra mayúscula.",
    "The :attribute must be at least :length characters.": "La :attribute debe tener al menos :length caracteres.",
    "The given data was invalid.": "Los datos proporcionados no son válidos.",
    "The provided password does not match your current password.": "La contraseña proporcionada no coincide con su contraseña actual.",
    "The provided password was incorrect.": "La contraseña proporcionada no es correcta.",
    "The provided two factor authentication code was invalid.": "El código de autenticación de dos factores proporcionado no es válido.",
    "The provided two factor recovery code was invalid.": "El código de recuperación de dos factores proporcionado no es válido.",
    "The response is not a streamed response.": "La respuesta no es una respuesta transmitida.",
    "The response is not a view.": "La respuesta no es una vista.",
    "This action is unauthorized.": "Esta acción no está autorizada.",
    "This is a secure area of the application. Please confirm your password before continuing.": "Esta es una zona segura de la aplicación. Confirme su contraseña antes de continuar.",
    "This password reset link will expire in :count minutes.": "Este enlace de restablecimiento de contraseña expirará en :count minutos.",
    "to": "al",
    "To finish enabling two-factor authentication, scan the QR code or enter the setup key in your authenticator app.": "Para terminar de habilitar la autenticación de dos factores, escanee el código QR o ingrese la clave de configuración en su aplicación de autenticación.",
    "Toggle navigation": "Alternar navegación",
    "Too Early": "Demasiado temprano",
    "Too Many Requests": "Demasiadas peticiones",
    "Translate": "Traducir",
    "Translate It": "Traducirlo",
    "Two Factor Authentication": "Autenticación de Dos Factores",
    "Two-Factor Auth": "Autenticación de Dos Factores",
    "Two-Factor Authentication Enabled": "Autenticación de dos factores habilitada",
    "Two-factor authentication is now enabled. Scan the QR code or enter the setup key in your authenticator app.": "La autenticación de dos factores ya está habilitada. Escanea el código QR o introduce la clave de configuración en tu app de autenticación.",
    "Unauthorized": "No autorizado",
    "Unavailable For Legal Reasons": "No disponible por razones legales",
    "Unknown Error": "Error desconocido",
    "Unpack": "Desglosar",
    "Unprocessable Entity": "Entidad no procesable",
    "Unsubscribe": "Darse de baja",
    "Unsupported Media Type": "Tipo de medio no admitido",
    "Up": "Arriba",
    "Update": "Actualizar",
    "Update :name": "Actualizar :name",
    "Update password": "Actualizar contraseña",
    "Update the appearance settings for your account": "Actualice la configuración de apariencia de su cuenta",
    "Update your account's appearance settings": "Actualice la configuración de apariencia de su cuenta",
    "Update your name and email address": "Actualice su nombre y dirección de correo electrónico",
    "Upgrade Required": "Se requiere actualización",
    "URI Too Long": "URI demasiado largo",
    "Use Proxy": "Usa proxy",
    "User": "Usuario",
    "Variant Also Negotiates": "Variante También Negocia",
    "Verify Authentication Code": "Verificar código de autenticación",
    "Verify Email Address": "Confirme su correo electrónico",
    "View": "Ver",
    "View :name": "Ver :name",
    "View Recovery Codes": "Ver códigos de recuperación",
    "Web Server is Down": "El servidor web está caído",
    "When you enable two-factor authentication, you will be prompted for a secure pin during login. This pin can be retrieved from a TOTP-supported application on your phone.": "Al activar la autenticación de dos factores, se le solicitará un PIN seguro al iniciar sesión. Puede obtenerlo desde una aplicación compatible con TOTP en su teléfono.",
    "Whoops!": "¡Ups!",
    "With two-factor authentication enabled, you will be prompted for a secure, random pin during login, which you can retrieve from the TOTP-supported application on your phone.": "Con la autenticación de dos factores habilitada, se le solicitará un PIN aleatorio seguro durante el inicio de sesión, que puede recuperar de la aplicación compatible con TOTP en su teléfono.",
    "Yes": "Sí",
    "You are receiving this email because we received a password reset request for your account.": "Ha recibido este mensaje porque se solicitó un restablecimiento de contraseña para su cuenta.",
    "Your email address is unverified.": "Su dirección de correo electrónico no está verificada."
}
</file>

<file path="lang/es/actions.php">
<?php

declare(strict_types=1);

return [
    'accept'          => 'Aceptar',
    'action'          => 'Acción',
    'actions'         => 'Acciones',
    'add'             => 'Agregar',
    'admin'           => 'Administrar',
    'agree'           => 'Aceptar',
    'archive'         => 'Archivar',
    'assign'          => 'Asignar',
    'associate'       => 'Asociar',
    'attach'          => 'Adjuntar',
    'browse'          => 'Navegar',
    'cancel'          => 'Cancelar',
    'choose'          => 'Elegir',
    'choose_file'     => 'Elegir archivo',
    'choose_image'    => 'Elegir Imagen',
    'click_to_copy'   => 'Haga clic para copiar',
    'close'           => 'Cerrar',
    'collapse'        => 'Colapsar',
    'collapse_all'    => 'Colapsar todo',
    'comment'         => 'Comentar',
    'confirm'         => 'Confirmar',
    'connect'         => 'Conectar',
    'create'          => 'Crear',
    'delete'          => 'Borrar',
    'detach'          => 'Desasociar',
    'details'         => 'Detalles',
    'disable'         => 'Desactivar',
    'discard'         => 'Descartar',
    'done'            => 'Hecho',
    'down'            => 'Abajo',
    'duplicate'       => 'Duplicar',
    'edit'            => 'Editar',
    'enable'          => 'Permitir',
    'expand'          => 'Expandir',
    'expand_all'      => 'Expandir todo',
    'explanation'     => 'Explicación',
    'export'          => 'Exportar',
    'file'            => 'Archivo',
    'files'           => 'Archivos',
    'go_home'         => 'Ir a Inicio',
    'hide'            => 'Ocultar',
    'home'            => 'Inicio',
    'image'           => 'Imagen',
    'impersonate'     => 'Personificar',
    'impersonation'   => 'Personificación',
    'import'          => 'Importar',
    'introduction'    => 'Introducción',
    'like'            => 'Me gusta',
    'load'            => 'Cargar',
    'localize'        => 'Localizar',
    'log_in'          => 'Acceder',
    'log_out'         => 'Cerrar sesión',
    'named'           => [
        'add'       => 'Agregar :name',
        'choose'    => 'Elegir :name',
        'create'    => 'Crear :name',
        'delete'    => 'Eliminar :name',
        'duplicate' => 'Duplicar :name',
        'edit'      => 'Editar :name',
        'export'    => 'Exportar :name',
        'hide'      => 'Ocultar :name',
        'import'    => 'Importar :name',
        'new'       => 'Nuevo :name',
        'restore'   => 'Restaurar :name',
        'save'      => 'Guardar :name',
        'search'    => 'Buscar :name',
        'show'      => 'Mostrar :name',
        'update'    => 'Actualizar :name',
        'view'      => 'Ver :name',
    ],
    'new'             => 'Nuevo',
    'no'              => 'No',
    'open'            => 'Abrir',
    'open_website'    => 'Abrir en el sitio web',
    'preview'         => 'Previsualizar',
    'price'           => 'Precio',
    'record'          => 'Registro',
    'restore'         => 'Restaurar',
    'save'            => 'Guardar',
    'save_and_close'  => 'Guardar y cerrar',
    'save_and_return' => 'Guardar y volver',
    'search'          => 'Buscar',
    'select'          => 'Seleccionar',
    'select_all'      => 'Seleccionar todo',
    'send'            => 'Enviar',
    'settings'        => 'Ajustes',
    'show'            => 'Mostrar',
    'show_all'        => 'Mostrar todo',
    'sign_in'         => 'Iniciar sesión',
    'solve'           => 'Resolver',
    'start'           => 'Comenzar',
    'stop'            => 'Detener',
    'submit'          => 'Enviar',
    'subscribe'       => 'Suscribir',
    'switch'          => 'Cambiar',
    'switch_to_role'  => 'Cambiar de rol',
    'tag'             => 'Etiqueta',
    'tags'            => 'Etiquetas',
    'target_link'     => [
        'blank'  => 'Abrir en una ventana nueva',
        'parent' => 'Abrir en el marco principal',
        'self'   => 'Abrir en la ventana actual',
        'top'    => 'Abrir en el marco superior',
    ],
    'translate'       => 'Traducir',
    'translate_it'    => 'Traducirlo',
    'unpack'          => 'Desglosar',
    'unsubscribe'     => 'Darse de baja',
    'up'              => 'Arriba',
    'update'          => 'Actualizar',
    'user'            => 'Usuario',
    'view'            => 'Ver',
    'yes'             => 'Sí',
];
</file>

<file path="lang/es/auth.php">
<?php

declare(strict_types=1);

return [
    'failed'   => 'Estas credenciales no coinciden con nuestros registros.',
    'password' => 'La contraseña es incorrecta.',
    'throttle' => 'Demasiados intentos de acceso. Por favor intente nuevamente en :seconds segundos.',
];
</file>

<file path="lang/es/http-statuses.php">
<?php

declare(strict_types=1);

return [
    '0'            => 'Error desconocido',
    '100'          => 'Continuar',
    '101'          => 'Protocolos de conmutación',
    '102'          => 'Procesando',
    '200'          => 'DE ACUERDO',
    '201'          => 'Creado',
    '202'          => 'Aceptado',
    '203'          => 'Información no autorizada',
    '204'          => 'Sin contenido',
    '205'          => 'Restablecer contenido',
    '206'          => 'Contenido parcial',
    '207'          => 'Multiestado',
    '208'          => 'Ya Reportado',
    '226'          => 'IM usado',
    '300'          => 'Múltiples opciones',
    '301'          => 'Movido permanentemente',
    '302'          => 'Encontrado',
    '303'          => 'Ver otros',
    '304'          => 'No modificado',
    '305'          => 'Usa proxy',
    '307'          => 'Redirección temporal',
    '308'          => 'Redirección permanente',
    '400'          => 'Solicitud incorrecta',
    '401'          => 'No autorizado',
    '402'          => 'Pago requerido',
    '403'          => 'Prohibido',
    '404'          => 'No encontrado',
    '405'          => 'Método no permitido',
    '406'          => 'Inaceptable',
    '407'          => 'Se requiere autenticación proxy',
    '408'          => 'Solicitud de tiempo de espera',
    '409'          => 'Conflicto',
    '410'          => 'Recurso no disponible',
    '411'          => 'Longitud requerida',
    '412'          => 'Error de condición previa',
    '413'          => 'Solicitud demasiado grande',
    '414'          => 'URI demasiado largo',
    '415'          => 'Tipo de medio no admitido',
    '416'          => 'Rango no satisfactorio',
    '417'          => 'Expectativa fallida',
    '418'          => 'Soy una tetera',
    '419'          => 'La sesión ha expirado',
    '421'          => 'Solicitud mal dirigida',
    '422'          => 'Entidad no procesable',
    '423'          => 'Bloqueado',
    '424'          => 'Dependencia fallida',
    '425'          => 'Demasiado temprano',
    '426'          => 'Se requiere actualización',
    '428'          => 'Precondición requerida',
    '429'          => 'Demasiadas solicitudes',
    '431'          => 'Campos de encabezado de solicitud demasiado grandes',
    '444'          => 'Conexión cerrada sin respuesta',
    '449'          => 'Reintentar con',
    '451'          => 'No disponible por razones legales',
    '499'          => 'Solicitud cerrada del cliente',
    '500'          => 'Error interno del servidor',
    '501'          => 'No se ha implementado',
    '502'          => 'Mala puerta de enlace',
    '503'          => 'Modo de mantenimiento',
    '504'          => 'Tiempo de espera de puerta de enlace',
    '505'          => 'Versión HTTP no compatible',
    '506'          => 'Variante También Negocia',
    '507'          => 'Espacio insuficiente',
    '508'          => 'Bucle detectado',
    '509'          => 'Límite de ancho de banda excedido',
    '510'          => 'no extendido',
    '511'          => 'Se requiere autenticación de red',
    '520'          => 'Error desconocido',
    '521'          => 'El servidor web está caído',
    '522'          => 'Tiempo de conexión agotado',
    '523'          => 'El origen es inalcanzable',
    '524'          => 'Se produjo un tiempo de espera',
    '525'          => 'Protocolo de enlace SSL fallido',
    '526'          => 'Certificado SSL no válido',
    '527'          => 'Error de cañón de riel',
    '598'          => 'Error de tiempo de espera de lectura de red',
    '599'          => 'Error de tiempo de espera de conexión de red',
    'unknownError' => 'Error desconocido',
];
</file>

<file path="lang/es/pagination.php">
<?php

declare(strict_types=1);

return [
    'next'     => 'Siguiente &raquo;',
    'previous' => '&laquo; Anterior',
];
</file>

<file path="lang/es/passwords.php">
<?php

declare(strict_types=1);

return [
    'reset'     => 'Su contraseña ha sido restablecida.',
    'sent'      => 'Le hemos enviado por correo electrónico el enlace para restablecer su contraseña.',
    'throttled' => 'Por favor espere antes de intentar de nuevo.',
    'token'     => 'El token de restablecimiento de contraseña es inválido.',
    'user'      => 'No encontramos ningún usuario con ese correo electrónico.',
];
</file>

<file path="lang/es/validation.php">
<?php

declare(strict_types=1);

return [
    'accepted'               => 'El campo :attribute debe ser aceptado.',
    'accepted_if'            => 'El campo :attribute debe ser aceptado cuando :other sea :value.',
    'active_url'             => 'El campo :attribute debe ser una URL válida.',
    'after'                  => 'El campo :attribute debe ser una fecha posterior a :date.',
    'after_or_equal'         => 'El campo :attribute debe ser una fecha posterior o igual a :date.',
    'alpha'                  => 'El campo :attribute sólo debe contener letras.',
    'alpha_dash'             => 'El campo :attribute sólo debe contener letras, números, guiones y guiones bajos.',
    'alpha_num'              => 'El campo :attribute sólo debe contener letras y números.',
    'any_of'                 => 'El campo :attribute no es válido.',
    'array'                  => 'El campo :attribute debe ser un conjunto.',
    'ascii'                  => 'El campo :attribute solo debe contener caracteres alfanuméricos y símbolos de un solo byte.',
    'before'                 => 'El campo :attribute debe ser una fecha anterior a :date.',
    'before_or_equal'        => 'El campo :attribute debe ser una fecha anterior o igual a :date.',
    'between'                => [
        'array'   => 'El campo :attribute tiene que tener entre :min - :max elementos.',
        'file'    => 'El campo :attribute debe pesar entre :min - :max kilobytes.',
        'numeric' => 'El campo :attribute tiene que estar entre :min - :max.',
        'string'  => 'El campo :attribute tiene que tener entre :min - :max caracteres.',
    ],
    'boolean'                => 'El campo :attribute debe tener un valor verdadero o falso.',
    'can'                    => 'El campo :attribute contiene un valor no autorizado.',
    'confirmed'              => 'La confirmación de :attribute no coincide.',
    'contains'               => 'Al campo :attribute le falta un valor obligatorio.',
    'current_password'       => 'La contraseña es incorrecta.',
    'date'                   => 'El campo :attribute debe ser una fecha válida.',
    'date_equals'            => 'El campo :attribute debe ser una fecha igual a :date.',
    'date_format'            => 'El campo :attribute debe coincidir con el formato :format.',
    'decimal'                => 'El campo :attribute debe tener :decimal cifras decimales.',
    'declined'               => 'El campo :attribute debe ser rechazado.',
    'declined_if'            => 'El campo :attribute debe ser rechazado cuando :other sea :value.',
    'different'              => 'El campo :attribute y :other deben ser diferentes.',
    'digits'                 => 'El campo :attribute debe tener :digits dígitos.',
    'digits_between'         => 'El campo :attribute debe tener entre :min y :max dígitos.',
    'dimensions'             => 'El campo :attribute tiene dimensiones de imagen no válidas.',
    'distinct'               => 'El campo :attribute contiene un valor duplicado.',
    'doesnt_contain'         => 'El campo :attribute no debe contener ninguno de los siguientes valores: :values.',
    'doesnt_end_with'        => 'El campo :attribute no debe finalizar con uno de los siguientes: :values.',
    'doesnt_start_with'      => 'El campo :attribute no debe comenzar con uno de los siguientes: :values.',
    'email'                  => 'El campo :attribute no es un correo válido.',
    'ends_with'              => 'El campo :attribute debe finalizar con uno de los siguientes valores: :values',
    'enum'                   => 'El campo :attribute no está en la lista de valores permitidos.',
    'exists'                 => 'El campo :attribute no existe.',
    'extensions'             => 'El campo :attribute debe tener una de las siguientes extensiones: :values.',
    'file'                   => 'El campo :attribute debe ser un archivo.',
    'filled'                 => 'El campo :attribute es obligatorio.',
    'gt'                     => [
        'array'   => 'El campo :attribute debe tener más de :value elementos.',
        'file'    => 'El campo :attribute debe tener más de :value kilobytes.',
        'numeric' => 'El campo :attribute debe ser mayor que :value.',
        'string'  => 'El campo :attribute debe tener más de :value caracteres.',
    ],
    'gte'                    => [
        'array'   => 'El campo :attribute debe tener como mínimo :value elementos.',
        'file'    => 'El campo :attribute debe tener como mínimo :value kilobytes.',
        'numeric' => 'El campo :attribute debe ser como mínimo :value.',
        'string'  => 'El campo :attribute debe tener como mínimo :value caracteres.',
    ],
    'hex_color'              => 'El campo :attribute debe tener un color hexadecimal válido.',
    'image'                  => 'El campo :attribute debe ser una imagen.',
    'in'                     => 'El campo :attribute no está en la lista de valores permitidos.',
    'in_array'               => 'El campo :attribute debe existir en :other.',
    'in_array_keys'          => 'El campo :attribute debe contener al menos una de las siguientes claves: :values.',
    'integer'                => 'El campo :attribute debe ser un número entero.',
    'ip'                     => 'El campo :attribute debe ser una dirección IP válida.',
    'ipv4'                   => 'El campo :attribute debe ser una dirección IPv4 válida.',
    'ipv6'                   => 'El campo :attribute debe ser una dirección IPv6 válida.',
    'json'                   => 'El campo :attribute debe ser una cadena JSON válida.',
    'list'                   => 'El campo :attribute debe ser una lista.',
    'lowercase'              => 'El campo :attribute debe estar en minúscula.',
    'lt'                     => [
        'array'   => 'El campo :attribute debe tener menos de :value elementos.',
        'file'    => 'El campo :attribute debe tener menos de :value kilobytes.',
        'numeric' => 'El campo :attribute debe ser menor que :value.',
        'string'  => 'El campo :attribute debe tener menos de :value caracteres.',
    ],
    'lte'                    => [
        'array'   => 'El campo :attribute debe tener como máximo :value elementos.',
        'file'    => 'El campo :attribute debe tener como máximo :value kilobytes.',
        'numeric' => 'El campo :attribute debe ser como máximo :value.',
        'string'  => 'El campo :attribute debe tener como máximo :value caracteres.',
    ],
    'mac_address'            => 'El campo :attribute debe ser una dirección MAC válida.',
    'max'                    => [
        'array'   => 'El campo :attribute no debe tener más de :max elementos.',
        'file'    => 'El campo :attribute no debe ser mayor que :max kilobytes.',
        'numeric' => 'El campo :attribute no debe ser mayor que :max.',
        'string'  => 'El campo :attribute no debe ser mayor que :max caracteres.',
    ],
    'max_digits'             => 'El campo :attribute no debe tener más de :max dígitos.',
    'mimes'                  => 'El campo :attribute debe ser un archivo con formato: :values.',
    'mimetypes'              => 'El campo :attribute debe ser un archivo con formato: :values.',
    'min'                    => [
        'array'   => 'El campo :attribute debe tener al menos :min elementos.',
        'file'    => 'El tamaño de :attribute debe ser de al menos :min kilobytes.',
        'numeric' => 'El tamaño de :attribute debe ser de al menos :min.',
        'string'  => 'El campo :attribute debe contener al menos :min caracteres.',
    ],
    'min_digits'             => 'El campo :attribute debe tener al menos :min dígitos.',
    'missing'                => 'El campo :attribute no debe estar presente.',
    'missing_if'             => 'El campo :attribute no debe estar presente cuando :other sea :value.',
    'missing_unless'         => 'El campo :attribute no debe estar presente a menos que :other sea :value.',
    'missing_with'           => 'El campo :attribute no debe estar presente si alguno de los campos :values está presente.',
    'missing_with_all'       => 'El campo :attribute no debe estar presente cuando los campos :values estén presentes.',
    'multiple_of'            => 'El campo :attribute debe ser múltiplo de :value',
    'not_in'                 => 'El campo :attribute no debe estar en la lista.',
    'not_regex'              => 'El formato del campo :attribute no es válido.',
    'numeric'                => 'El campo :attribute debe ser numérico.',
    'password'               => [
        'letters'       => 'La :attribute debe contener al menos una letra.',
        'mixed'         => 'La :attribute debe contener al menos una letra mayúscula y una minúscula.',
        'numbers'       => 'La :attribute debe contener al menos un número.',
        'symbols'       => 'La :attribute debe contener al menos un símbolo.',
        'uncompromised' => 'La :attribute proporcionada se ha visto comprometida en una filtración de datos (data leak). Elija una :attribute diferente.',
    ],
    'present'                => 'El campo :attribute debe estar presente.',
    'present_if'             => 'El campo :attribute debe estar presente cuando :other es :value.',
    'present_unless'         => 'El campo :attribute debe estar presente a menos que :other sea :value.',
    'present_with'           => 'El campo :attribute debe estar presente cuando :values esté presente.',
    'present_with_all'       => 'El campo :attribute debe estar presente cuando :values estén presentes.',
    'prohibited'             => 'El campo :attribute está prohibido.',
    'prohibited_if'          => 'El campo :attribute está prohibido cuando :other es :value.',
    'prohibited_if_accepted' => 'El campo :attribute está prohibido cuando se acepta :other.',
    'prohibited_if_declined' => 'El campo :attribute está prohibido cuando se rechaza :other.',
    'prohibited_unless'      => 'El campo :attribute está prohibido a menos que :other sea :values.',
    'prohibits'              => 'El campo :attribute prohibe que :other esté presente.',
    'regex'                  => 'El formato del campo :attribute no es válido.',
    'required'               => 'El campo :attribute es obligatorio.',
    'required_array_keys'    => 'El campo :attribute debe contener entradas para: :values.',
    'required_if'            => 'El campo :attribute es obligatorio cuando :other es :value.',
    'required_if_accepted'   => 'El campo :attribute es obligatorio si :other es aceptado.',
    'required_if_declined'   => 'El campo :attribute es obligatorio si :other es rechazado.',
    'required_unless'        => 'El campo :attribute es obligatorio a menos que :other esté en :values.',
    'required_with'          => 'El campo :attribute es obligatorio cuando :values está presente.',
    'required_with_all'      => 'El campo :attribute es obligatorio cuando :values están presentes.',
    'required_without'       => 'El campo :attribute es obligatorio cuando :values no está presente.',
    'required_without_all'   => 'El campo :attribute es obligatorio cuando ninguno de :values está presente.',
    'same'                   => 'Los campos :attribute y :other deben coincidir.',
    'size'                   => [
        'array'   => 'El campo :attribute debe contener :size elementos.',
        'file'    => 'El tamaño de :attribute debe ser :size kilobytes.',
        'numeric' => 'El tamaño de :attribute debe ser :size.',
        'string'  => 'El campo :attribute debe contener :size caracteres.',
    ],
    'starts_with'            => 'El campo :attribute debe comenzar con uno de los siguientes valores: :values',
    'string'                 => 'El campo :attribute debe ser una cadena de caracteres.',
    'timezone'               => 'El campo :attribute debe ser una zona horaria válida.',
    'ulid'                   => 'El campo :attribute debe ser un ULID válido.',
    'unique'                 => 'El campo :attribute ya ha sido registrado.',
    'uploaded'               => 'Subir :attribute ha fallado.',
    'uppercase'              => 'El campo :attribute debe estar en mayúscula.',
    'url'                    => 'El campo :attribute debe ser una URL válida.',
    'uuid'                   => 'El campo :attribute debe ser un UUID válido.',
    'attributes'             => [
        'address'                  => 'dirección',
        'affiliate_url'            => 'URL de afiliado',
        'age'                      => 'edad',
        'amount'                   => 'cantidad',
        'announcement'             => 'anuncio',
        'area'                     => 'área',
        'audience_prize'           => 'premio del público',
        'audience_winner'          => 'ganador del público',
        'available'                => 'disponible',
        'birthday'                 => 'cumpleaños',
        'body'                     => 'contenido',
        'city'                     => 'ciudad',
        'company'                  => 'compañía',
        'compilation'              => 'compilación',
        'concept'                  => 'concepto',
        'conditions'               => 'condiciones',
        'content'                  => 'contenido',
        'contest'                  => 'concurso',
        'country'                  => 'país',
        'cover'                    => 'portada',
        'created_at'               => 'creado el',
        'creator'                  => 'creador',
        'currency'                 => 'moneda',
        'current_password'         => 'contraseña actual',
        'customer'                 => 'cliente',
        'date'                     => 'fecha',
        'date_of_birth'            => 'fecha de nacimiento',
        'dates'                    => 'fechas',
        'day'                      => 'día',
        'deleted_at'               => 'eliminado el',
        'description'              => 'descripción',
        'display_type'             => 'tipo de visualización',
        'district'                 => 'distrito',
        'duration'                 => 'duración',
        'email'                    => 'correo electrónico',
        'excerpt'                  => 'extracto',
        'filter'                   => 'filtro',
        'finished_at'              => 'terminado el',
        'first_name'               => 'nombre',
        'gender'                   => 'género',
        'grand_prize'              => 'gran Premio',
        'group'                    => 'grupo',
        'hour'                     => 'hora',
        'image'                    => 'imagen',
        'image_desktop'            => 'imagen de escritorio',
        'image_main'               => 'imagen principal',
        'image_mobile'             => 'imagen móvil',
        'images'                   => 'imágenes',
        'is_audience_winner'       => 'es ganador de audiencia',
        'is_hidden'                => 'está oculto',
        'is_subscribed'            => 'está suscrito',
        'is_visible'               => 'es visible',
        'is_winner'                => 'es ganador',
        'items'                    => 'elementos',
        'key'                      => 'clave',
        'last_name'                => 'apellidos',
        'lesson'                   => 'lección',
        'line_address_1'           => 'línea de dirección 1',
        'line_address_2'           => 'línea de dirección 2',
        'login'                    => 'acceso',
        'message'                  => 'mensaje',
        'middle_name'              => 'segundo nombre',
        'minute'                   => 'minuto',
        'mobile'                   => 'móvil',
        'month'                    => 'mes',
        'name'                     => 'nombre',
        'national_code'            => 'código nacional',
        'number'                   => 'número',
        'password'                 => 'contraseña',
        'password_confirmation'    => 'confirmación de la contraseña',
        'phone'                    => 'teléfono',
        'photo'                    => 'foto',
        'portfolio'                => 'portafolio',
        'postal_code'              => 'código postal',
        'preview'                  => 'vista preliminar',
        'price'                    => 'precio',
        'product_id'               => 'ID del producto',
        'product_uid'              => 'UID del producto',
        'product_uuid'             => 'UUID del producto',
        'promo_code'               => 'código promocional',
        'province'                 => 'provincia',
        'quantity'                 => 'cantidad',
        'reason'                   => 'razón',
        'recaptcha_response_field' => 'respuesta del recaptcha',
        'referee'                  => 'árbitro',
        'referees'                 => 'árbitros',
        'reject_reason'            => 'motivo de rechazo',
        'remember'                 => 'recordar',
        'restored_at'              => 'restaurado el',
        'result_text_under_image'  => 'texto bajo la imagen',
        'role'                     => 'rol',
        'rule'                     => 'regla',
        'rules'                    => 'reglas',
        'second'                   => 'segundo',
        'sex'                      => 'sexo',
        'shipment'                 => 'envío',
        'short_text'               => 'texto corto',
        'size'                     => 'tamaño',
        'skills'                   => 'habilidades',
        'slug'                     => 'slug',
        'specialization'           => 'especialización',
        'started_at'               => 'comenzado el',
        'state'                    => 'estado',
        'status'                   => 'estado',
        'street'                   => 'calle',
        'student'                  => 'estudiante',
        'subject'                  => 'asunto',
        'tag'                      => 'etiqueta',
        'tags'                     => 'etiquetas',
        'teacher'                  => 'profesor',
        'terms'                    => 'términos',
        'test_description'         => 'descripción de prueba',
        'test_locale'              => 'idioma de prueba',
        'test_name'                => 'nombre de prueba',
        'text'                     => 'texto',
        'time'                     => 'hora',
        'title'                    => 'título',
        'type'                     => 'tipo',
        'updated_at'               => 'actualizado el',
        'user'                     => 'usuario',
        'username'                 => 'usuario',
        'value'                    => 'valor',
        'winner'                   => 'ganador',
        'work'                     => 'trabajo',
        'year'                     => 'año',
    ],
];
</file>

<file path="phpunit.xml">
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="APP_MAINTENANCE_DRIVER" value="file"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_STORE" value="array"/>
        <env name="DB_CONNECTION" value="sqlite"/>
        <env name="DB_DATABASE" value=":memory:"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>
</file>

<file path="public/.htaccess">
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Handle X-XSRF-Token Header
    RewriteCond %{HTTP:x-xsrf-token} .
    RewriteRule .* - [E=HTTP_X_XSRF_TOKEN:%{HTTP:X-XSRF-Token}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
</file>

<file path="public/favicon.svg">
<svg width="166" height="166" viewBox="0 0 166 166" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M162.041 38.7592C162.099 38.9767 162.129 39.201 162.13 39.4264V74.4524C162.13 74.9019 162.011 75.3435 161.786 75.7325C161.561 76.1216 161.237 76.4442 160.847 76.6678L131.462 93.5935V127.141C131.462 128.054 130.977 128.897 130.186 129.357L68.8474 164.683C68.707 164.763 68.5538 164.814 68.4007 164.868C68.3432 164.887 68.289 164.922 68.2284 164.938C67.7996 165.051 67.3489 165.051 66.9201 164.938C66.8499 164.919 66.7861 164.881 66.7191 164.855C66.5787 164.804 66.4319 164.76 66.2979 164.683L4.97219 129.357C4.58261 129.133 4.2589 128.81 4.0337 128.421C3.8085 128.032 3.68976 127.591 3.68945 127.141L3.68945 22.0634C3.68945 21.8336 3.72136 21.6101 3.7788 21.393C3.79794 21.3196 3.84262 21.2526 3.86814 21.1791C3.91601 21.0451 3.96068 20.9078 4.03088 20.7833C4.07874 20.7003 4.14894 20.6333 4.20638 20.5566C4.27977 20.4545 4.34678 20.3491 4.43293 20.2598C4.50632 20.1863 4.60205 20.1321 4.68501 20.0682C4.77755 19.9916 4.86051 19.9086 4.96581 19.848L35.6334 2.18492C36.0217 1.96139 36.4618 1.84375 36.9098 1.84375C37.3578 1.84375 37.7979 1.96139 38.1862 2.18492L68.8506 19.848H68.857C68.9591 19.9118 69.0452 19.9916 69.1378 20.065C69.2207 20.1289 69.3133 20.1863 69.3867 20.2566C69.476 20.3491 69.5398 20.4545 69.6164 20.5566C69.6707 20.6333 69.7441 20.7003 69.7887 20.7833C69.8621 20.911 69.9036 21.0451 69.9546 21.1791C69.9802 21.2526 70.0248 21.3196 70.044 21.3962C70.1027 21.6138 70.1328 21.8381 70.1333 22.0634V87.6941L95.686 72.9743V39.4232C95.686 39.1997 95.7179 38.9731 95.7753 38.7592C95.7977 38.6826 95.8391 38.6155 95.8647 38.5421C95.9157 38.408 95.9604 38.2708 96.0306 38.1463C96.0785 38.0633 96.1487 37.9962 96.2029 37.9196C96.2795 37.8175 96.3433 37.7121 96.4326 37.6227C96.506 37.5493 96.5986 37.495 96.6815 37.4312C96.7773 37.3546 96.8602 37.2716 96.9623 37.2109L127.633 19.5479C128.021 19.324 128.461 19.2062 128.91 19.2062C129.358 19.2062 129.798 19.324 130.186 19.5479L160.85 37.2109C160.959 37.2748 161.042 37.3546 161.137 37.428C161.217 37.4918 161.31 37.5493 161.383 37.6195C161.473 37.7121 161.536 37.8175 161.613 37.9196C161.67 37.9962 161.741 38.0633 161.785 38.1463C161.859 38.2708 161.9 38.408 161.951 38.5421C161.98 38.6155 162.021 38.6826 162.041 38.7592ZM157.018 72.9743V43.8477L146.287 50.028L131.462 58.5675V87.6941L157.021 72.9743H157.018ZM126.354 125.663V96.5176L111.771 104.85L70.1301 128.626V158.046L126.354 125.663ZM8.80126 26.4848V125.663L65.0183 158.043V128.629L35.6494 112L35.6398 111.994L35.6271 111.988C35.5281 111.93 35.4452 111.847 35.3526 111.777C35.2729 111.713 35.1803 111.662 35.1101 111.592L35.1038 111.582C35.0208 111.502 34.9634 111.403 34.8932 111.314C34.8293 111.228 34.7528 111.154 34.7017 111.065L34.6985 111.055C34.6411 110.96 34.606 110.845 34.5645 110.736C34.523 110.64 34.4688 110.551 34.4432 110.449C34.4113 110.328 34.4049 110.197 34.3922 110.072C34.3794 109.976 34.3539 109.881 34.3539 109.785V109.778V41.2045L19.5322 32.6619L8.80126 26.4848ZM36.913 7.35007L11.3635 22.0634L36.9066 36.7768L62.4529 22.0602L36.9066 7.35007H36.913ZM50.1999 99.1736L65.0215 90.6374V26.4848L54.2906 32.6651L39.4657 41.2045V105.357L50.1999 99.1736ZM128.91 24.713L103.363 39.4264L128.91 54.1397L154.453 39.4232L128.91 24.713ZM126.354 58.5675L111.529 50.028L100.798 43.8477V72.9743L115.619 81.5106L126.354 87.6941V58.5675ZM67.5711 124.205L105.042 102.803L123.772 92.109L98.2451 77.4053L68.8538 94.3341L42.0663 109.762L67.5711 124.205Z" fill="#FF2D20"/>
</svg>
</file>

<file path="public/index.php">
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());
</file>

<file path="public/robots.txt">
User-agent: *
Disallow:
</file>

<file path="resources/css/app.css">
@import 'tailwindcss';
@import '../../vendor/livewire/flux/dist/flux.css';

@source '../views';
@source '../../vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php';
@source '../../vendor/livewire/flux-pro/stubs/**/*.blade.php';
@source '../../vendor/livewire/flux/stubs/**/*.blade.php';

@custom-variant dark (&:where(.dark, .dark *));

@theme {
    --font-sans: 'Instrument Sans', ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';

    --color-zinc-50: #fafafa;
    --color-zinc-100: #f5f5f5;
    --color-zinc-200: #e5e5e5;
    --color-zinc-300: #d4d4d4;
    --color-zinc-400: #a3a3a3;
    --color-zinc-500: #737373;
    --color-zinc-600: #525252;
    --color-zinc-700: #404040;
    --color-zinc-800: #262626;
    --color-zinc-900: #171717;
    --color-zinc-950: #0a0a0a;

    --color-accent: var(--color-neutral-800);
    --color-accent-content: var(--color-neutral-800);
    --color-accent-foreground: var(--color-white);
}

@layer theme {
    .dark {
        --color-accent: var(--color-white);
        --color-accent-content: var(--color-white);
        --color-accent-foreground: var(--color-neutral-800);
    }
}

@layer base {

    *,
    ::after,
    ::before,
    ::backdrop,
    ::file-selector-button {
        border-color: var(--color-gray-200, currentColor);
    }
}

[data-flux-field]:not(ui-radio, ui-checkbox) {
    @apply grid gap-2;
}

[data-flux-label] {
    @apply  !mb-0 !leading-tight;
}

input:focus[data-flux-control],
textarea:focus[data-flux-control],
select:focus[data-flux-control] {
    @apply outline-hidden ring-2 ring-accent ring-offset-2 ring-offset-accent-foreground;
}

/* \[:where(&)\]:size-4 {
    @apply size-4;
} */
</file>

<file path="resources/views/components/action-message.blade.php">
@props([
    'on',
])

<div
    x-data="{ shown: false, timeout: null }"
    x-init="@this.on('{{ $on }}', () => { clearTimeout(timeout); shown = true; timeout = setTimeout(() => { shown = false }, 2000); })"
    x-show.transition.out.opacity.duration.1500ms="shown"
    x-transition:leave.opacity.duration.1500ms
    style="display: none"
    {{ $attributes->merge(['class' => 'text-sm']) }}
>
    {{ $slot->isEmpty() ? __('Saved.') : $slot }}
</div>
</file>

<file path="resources/views/components/app-logo-icon.blade.php">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 42" {{ $attributes }}>
    <path 
        fill="currentColor" 
        fill-rule="evenodd" 
        clip-rule="evenodd"
        d="M17.2 5.633 8.6.855 0 5.633v26.51l16.2 9 16.2-9v-8.442l7.6-4.223V9.856l-8.6-4.777-8.6 4.777V18.3l-5.6 3.111V5.633ZM38 18.301l-5.6 3.11v-6.157l5.6-3.11V18.3Zm-1.06-7.856-5.54 3.078-5.54-3.079 5.54-3.078 5.54 3.079ZM24.8 18.3v-6.157l5.6 3.111v6.158L24.8 18.3Zm-1 1.732 5.54 3.078-13.14 7.302-5.54-3.078 13.14-7.3v-.002Zm-16.2 7.89 7.6 4.222V38.3L2 30.966V7.92l5.6 3.111v16.892ZM8.6 9.3 3.06 6.222 8.6 3.143l5.54 3.08L8.6 9.3Zm21.8 15.51-13.2 7.334V38.3l13.2-7.334v-6.156ZM9.6 11.034l5.6-3.11v14.6l-5.6 3.11v-14.6Z"
    />
</svg>
</file>

<file path="resources/views/components/app-logo.blade.php">
<div class="flex aspect-square size-8 items-center justify-center rounded-md bg-accent-content text-accent-foreground">
    <x-app-logo-icon class="size-5 fill-current text-white dark:text-black" />
</div>
<div class="ms-1 grid flex-1 text-start text-sm">
    <span class="mb-0.5 truncate leading-tight font-semibold">Laravel Starter Kit</span>
</div>
</file>

<file path="resources/views/components/auth-header.blade.php">
@props([
    'title',
    'description',
])

<div class="flex w-full flex-col text-center">
    <flux:heading size="xl">{{ $title }}</flux:heading>
    <flux:subheading>{{ $description }}</flux:subheading>
</div>
</file>

<file path="resources/views/components/auth-session-status.blade.php">
@props([
    'status',
])

@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600']) }}>
        {{ $status }}
    </div>
@endif
</file>

<file path="resources/views/components/input-otp.blade.php">
@props([
    'digits' => 6,
    'name' => 'code',
])

<div
    @focus-2fa-auth-code.window="$refs.input1?.focus()"
    @clear-2fa-auth-code.window="clearAll()"
    class="relative"
    x-data="{
        totalDigits: @js($digits),
        digitIndices: @js(range(1, $digits)),
        init() {
            $nextTick(() => {
                this.$refs.input1?.focus();
            });
        },
        getInput(index) {
            return this.$refs['input' + index];
        },
        setValue(index, value) {
            this.getInput(index).value = value;
        },
        getCode() {
            return this.digitIndices
                .map(i => this.getInput(i).value)
                .join('');
        },
        updateHiddenField() {
            this.$refs.code.value = this.getCode();
            this.$refs.code.dispatchEvent(new Event('input', { bubbles: true }));
            this.$refs.code.dispatchEvent(new Event('change', { bubbles: true }));
        },
        handleNumberKey(index, key) {
            this.setValue(index, key);

            if (index < this.totalDigits) {
                this.getInput(index + 1).focus();
            }

            $nextTick(() => {
                this.updateHiddenField();
            });
        },
        handleBackspace(index) {
            const currentInput = this.getInput(index);

            if (currentInput.value !== '') {
                currentInput.value = '';
                this.updateHiddenField();
                return;
            }

            if (index <= 1) {
                return;
            }

            const previousInput = this.getInput(index - 1);

            previousInput.value = '';
            previousInput.focus();

            this.updateHiddenField();
        },
        handleKeyDown(index, event) {
            const key = event.key;

            if (/^[0-9]$/.test(key)) {
                event.preventDefault();
                this.handleNumberKey(index, key);
                return;
            }

            if (key === 'Backspace') {
                event.preventDefault();
                this.handleBackspace(index);
                return;
            }
        },
        handlePaste(event) {
            event.preventDefault();

            const pastedText = (event.clipboardData || window.clipboardData).getData('text');
            const numericOnly = pastedText.replace(/[^0-9]/g, '');
            const digitsToFill = Math.min(numericOnly.length, this.totalDigits);

            this.digitIndices
                .slice(0, digitsToFill)
                .forEach(index => {
                    this.setValue(index, numericOnly[index - 1]);
                });

            if (numericOnly.length >= this.totalDigits) {
                this.updateHiddenField();
            }
        },
        clearAll() {
            this.digitIndices.forEach(index => {
                this.setValue(index, '');
            });

            this.$refs.code.value = '';
            this.$refs.input1?.focus();
        }
    }"
>
    <div class="flex items-center">
        @for ($x = 1; $x <= $digits; $x++)
            <input
                x-ref="input{{ $x }}"
                type="text"
                inputmode="numeric"
                pattern="[0-9]"
                maxlength="1"
                autocomplete="off"
                @paste="handlePaste"
                @keydown="handleKeyDown({{ $x }}, $event)"
                @focus="$el.select()"
                @input="$el.value = $el.value.replace(/[^0-9]/g, '').slice(0, 1)"
                @class([
                    'flex size-10 items-center justify-center border border-zinc-300 bg-accent-foreground text-center text-sm font-medium text-accent-content transition-colors focus:border-accent focus:border-2 focus:outline-none focus:relative focus:z-10 dark:border-zinc-700 dark:focus:border-accent',
                    'rounded-l-md' => $x === 1,
                    'rounded-r-md' => $x === $digits,
                    '-ml-px' => $x > 1,
                ])
            />
        @endfor
    </div>

    <input
        {{ $attributes->except(['digits']) }}
        type="hidden"
        x-ref="code"
        name="{{ $name }}"
        minlength="{{ $digits }}"
        maxlength="{{ $digits }}"
    />
</div>
</file>

<file path="resources/views/components/layouts/app.blade.php">
<x-layouts.app.sidebar :title="$title ?? null">
    <flux:main>
        {{ $slot }}
    </flux:main>
</x-layouts.app.sidebar>
</file>

<file path="resources/views/components/layouts/auth.blade.php">
<x-layouts.auth.simple :title="$title ?? null">
    {{ $slot }}
</x-layouts.auth.simple>
</file>

<file path="resources/views/components/layouts/auth/card.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="dark">
    <head>
        @include('partials.head')
    </head>
    <body class="min-h-screen bg-neutral-100 antialiased dark:bg-linear-to-b dark:from-neutral-950 dark:to-neutral-900">
        <div class="bg-muted flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10">
            <div class="flex w-full max-w-md flex-col gap-6">
                <a href="{{ route('home') }}" class="flex flex-col items-center gap-2 font-medium" wire:navigate>
                    <span class="flex h-9 w-9 items-center justify-center rounded-md">
                        <x-app-logo-icon class="size-9 fill-current text-black dark:text-white" />
                    </span>

                    <span class="sr-only">{{ config('app.name', 'Laravel') }}</span>
                </a>

                <div class="flex flex-col gap-6">
                    <div class="rounded-xl border bg-white dark:bg-stone-950 dark:border-stone-800 text-stone-800 shadow-xs">
                        <div class="px-10 py-8">{{ $slot }}</div>
                    </div>
                </div>
            </div>
        </div>
        @fluxScripts
    </body>
</html>
</file>

<file path="resources/views/components/layouts/auth/split.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="dark">
    <head>
        @include('partials.head')
    </head>
    <body class="min-h-screen bg-white antialiased dark:bg-linear-to-b dark:from-neutral-950 dark:to-neutral-900">
        <div class="relative grid h-dvh flex-col items-center justify-center px-8 sm:px-0 lg:max-w-none lg:grid-cols-2 lg:px-0">
            <div class="bg-muted relative hidden h-full flex-col p-10 text-white lg:flex dark:border-e dark:border-neutral-800">
                <div class="absolute inset-0 bg-neutral-900"></div>
                <a href="{{ route('home') }}" class="relative z-20 flex items-center text-lg font-medium" wire:navigate>
                    <span class="flex h-10 w-10 items-center justify-center rounded-md">
                        <x-app-logo-icon class="me-2 h-7 fill-current text-white" />
                    </span>
                    {{ config('app.name', 'Laravel') }}
                </a>

                @php
                    [$message, $author] = str(Illuminate\Foundation\Inspiring::quotes()->random())->explode('-');
                @endphp

                <div class="relative z-20 mt-auto">
                    <blockquote class="space-y-2">
                        <flux:heading size="lg">&ldquo;{{ trim($message) }}&rdquo;</flux:heading>
                        <footer><flux:heading>{{ trim($author) }}</flux:heading></footer>
                    </blockquote>
                </div>
            </div>
            <div class="w-full lg:p-8">
                <div class="mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]">
                    <a href="{{ route('home') }}" class="z-20 flex flex-col items-center gap-2 font-medium lg:hidden" wire:navigate>
                        <span class="flex h-9 w-9 items-center justify-center rounded-md">
                            <x-app-logo-icon class="size-9 fill-current text-black dark:text-white" />
                        </span>

                        <span class="sr-only">{{ config('app.name', 'Laravel') }}</span>
                    </a>
                    {{ $slot }}
                </div>
            </div>
        </div>
        @fluxScripts
    </body>
</html>
</file>

<file path="resources/views/components/layouts/guest.blade.php">
<!DOCTYPE html>
<html lang="es" class="scroll-smooth" x-data x-bind:class="$store.theme.dark ? 'dark' : ''">
<head>
    @include('partials.head')
</head>
<body class="bg-white text-gray-800 dark:bg-gray-900 dark:text-gray-100 transition-colors duration-300">

<div id="main-content">
    <!-- Navbar -->
    <header class="flex justify-between items-center px-6 py-4 shadow-sm dark:shadow-gray-800">
        <a href="{{ route('home') }}" wire:navigate>
            <img 
                src="{{ asset('images/nexo.png') }}" 
                alt="Logo" 
                class="w-40 h-20 dark:drop-shadow-[0_0_14px_rgba(255,255,255,1.95)] transition duration-300"
            />
        </a>

        <nav class="flex items-center space-x-4">
            @auth
                <a href="{{ url('/dashboard') }}" class="text-sm hover:underline">Dashboard</a>
            @else
                {{-- Solo mostrar botón de Iniciar Sesión si NO estamos en la página de login --}}
                @if (!request()->routeIs('login'))
                    <a href="{{ route('login') }}" wire:navigate class="px-4 py-2 text-sm rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition">Iniciar Sesión</a>
                @endif

                {{-- Solo mostrar botón de Registrarse si NO estamos en la página de registro --}}
                @if (!request()->routeIs('register'))
                    <a href="{{ route('register') }}" wire:navigate class="px-4 py-2 text-sm rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition">Registrarse</a>
                @endif
            @endauth

            <button 
                @click="$store.theme.toggle()"
                class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition"
                aria-label="Alternar modo oscuro"
            >
                <svg x-show="!$store.theme.dark" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 2a.75.75 0 01.75.75V4a.75.75 0 01-1.5 0V2.75A.75.75 0 0110 2zM10 16a.75.75 0 01.75.75V18a.75.75 0 01-1.5 0v-1.25A.75.75 0 0110 16zM4 9.25a.75.75 0 000 1.5H2.75a.75.75 0 000-1.5H4zM17.25 9.25a.75.75 0 000 1.5H19a.75.75 0 000-1.5h-1.75zM4.22 4.22a.75.75 0 011.06 0L6.5 5.44a.75.75 0 11-1.06 1.06L4.22 5.28a.75.75 0 010-1.06zM14.56 14.56a.75.75 0 011.06 0l1.22 1.22a.75.75 0 01-1.06 1.06l-1.22-1.22a.75.75 0 010-1.06zM14.56 5.44a.75.75 0 010-1.06l1.22-1.22a.75.75 0 111.06 1.06L15.62 5.44a.75.75 0 01-1.06 0zM4.22 15.78a.75.75 0 010-1.06l1.22-1.22a.75.75 0 111.06 1.06L5.28 15.78a.75.75 0 01-1.06 0z"></path>
                </svg>
                <svg x-show="$store.theme.dark" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M17.293 13.293A8 8 0 016.707 2.707 8 8 0 1017.293 13.293z"></path>
                </svg>
            </button>
        </nav>
    </header>

    {{-- El contenido específico de cada página irá aquí --}}
    {{ $slot }}

    <footer class="text-center py-6 text-sm border-t dark:border-gray-700">
        © {{ date('Y') }} Zona NEA – Formosa. Todos los derechos reservados.
    </footer>
</div>
   
@livewire('accesibilidad-widget')

@livewireScripts
{{-- La pila de scripts para Swiper y otros --}}
@stack('scripts')

<script>
    // Inicializar el store de tema antes de que Alpine.js cargue
    document.addEventListener('alpine:init', () => {
        Alpine.store('theme', {
            dark: localStorage.getItem('theme') === 'dark' || 
                  (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches),

            init() {
                // Aplicar el tema al inicializar
                this.updateDocumentClass();
            },

            toggle() {
                this.dark = !this.dark;
                localStorage.setItem('theme', this.dark ? 'dark' : 'light');
                this.updateDocumentClass();
            },

            updateDocumentClass() {
                if (this.dark) {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
            }
        });

        // Inicializar el tema inmediatamente
        Alpine.store('theme').init();
    });

    // Fallback: aplicar tema basado en localStorage si Alpine no está listo
    if (localStorage.getItem('theme') === 'dark') {
        document.documentElement.classList.add('dark');
    } else if (localStorage.getItem('theme') === 'light') {
        document.documentElement.classList.remove('dark');
    }
</script>

</body>
</html>
</file>

<file path="resources/views/components/placeholder-pattern.blade.php">
@props([
    'id' => uniqid(),
])

<svg {{ $attributes }} fill="none">
    <defs>
        <pattern id="pattern-{{ $id }}" x="0" y="0" width="8" height="8" patternUnits="userSpaceOnUse">
            <path d="M-1 5L5 -1M3 9L8.5 3.5" stroke-width="0.5"></path>
        </pattern>
    </defs>
    <rect stroke="none" fill="url(#pattern-{{ $id }})" width="100%" height="100%"></rect>
</svg>
</file>

<file path="resources/views/components/settings/layout.blade.php">
<div class="flex items-start max-md:flex-col">
    <div class="me-10 w-full pb-4 md:w-[220px]">
        <flux:navlist>
            <flux:navlist.item :href="route('settings.profile')" wire:navigate>{{ __('Profile') }}</flux:navlist.item>
            <flux:navlist.item :href="route('settings.password')" wire:navigate>{{ __('Password') }}</flux:navlist.item>
            @if (Laravel\Fortify\Features::canManageTwoFactorAuthentication())
                <flux:navlist.item :href="route('two-factor.show')" wire:navigate>{{ __('Two-Factor Auth') }}</flux:navlist.item>
            @endif
            <flux:navlist.item :href="route('settings.appearance')" wire:navigate>{{ __('Appearance') }}</flux:navlist.item>
        </flux:navlist>
    </div>

    <flux:separator class="md:hidden" />

    <div class="flex-1 self-stretch max-md:pt-6">
        <flux:heading>{{ $heading ?? '' }}</flux:heading>
        <flux:subheading>{{ $subheading ?? '' }}</flux:subheading>

        <div class="mt-5 w-full max-w-lg">
            {{ $slot }}
        </div>
    </div>
</div>
</file>

<file path="resources/views/flux/icon/book-open-text.blade.php">
{{-- Credit: Lucide (https://lucide.dev) --}}

@props([
    'variant' => 'outline',
])

@php
    if ($variant === 'solid') {
        throw new \Exception('The "solid" variant is not supported in Lucide.');
    }

    $classes = Flux::classes('shrink-0')->add(
        match ($variant) {
            'outline' => '[:where(&)]:size-6',
            'solid' => '[:where(&)]:size-6',
            'mini' => '[:where(&)]:size-5',
            'micro' => '[:where(&)]:size-4',
        },
    );

    $strokeWidth = match ($variant) {
        'outline' => 2,
        'mini' => 2.25,
        'micro' => 2.5,
    };
@endphp

<svg
    {{ $attributes->class($classes) }}
    data-flux-icon
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="{{ $strokeWidth }}"
    stroke-linecap="round"
    stroke-linejoin="round"
    aria-hidden="true"
    data-slot="icon"
>
    <path d="M12 7v14" />
    <path d="M16 12h2" />
    <path d="M16 8h2" />
    <path d="M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z" />
    <path d="M6 12h2" />
    <path d="M6 8h2" />
</svg>
</file>

<file path="resources/views/flux/icon/chevrons-up-down.blade.php">
{{-- Credit: Lucide (https://lucide.dev) --}}

@props([
    'variant' => 'outline',
])

@php
    if ($variant === 'solid') {
        throw new \Exception('The "solid" variant is not supported in Lucide.');
    }

    $classes = Flux::classes('shrink-0')->add(
        match ($variant) {
            'outline' => '[:where(&)]:size-6',
            'solid' => '[:where(&)]:size-6',
            'mini' => '[:where(&)]:size-5',
            'micro' => '[:where(&)]:size-4',
        },
    );

    $strokeWidth = match ($variant) {
        'outline' => 2,
        'mini' => 2.25,
        'micro' => 2.5,
    };
@endphp

<svg
    {{ $attributes->class($classes) }}
    data-flux-icon
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="{{ $strokeWidth }}"
    stroke-linecap="round"
    stroke-linejoin="round"
    aria-hidden="true"
    data-slot="icon"
>
    <path d="m7 15 5 5 5-5" />
    <path d="m7 9 5-5 5 5" />
</svg>
</file>

<file path="resources/views/flux/icon/folder-git-2.blade.php">
{{-- Credit: Lucide (https://lucide.dev) --}}

@props([
    'variant' => 'outline',
])

@php
    if ($variant === 'solid') {
        throw new \Exception('The "solid" variant is not supported in Lucide.');
    }

    $classes = Flux::classes('shrink-0')->add(
        match ($variant) {
            'outline' => '[:where(&)]:size-6',
            'solid' => '[:where(&)]:size-6',
            'mini' => '[:where(&)]:size-5',
            'micro' => '[:where(&)]:size-4',
        },
    );

    $strokeWidth = match ($variant) {
        'outline' => 2,
        'mini' => 2.25,
        'micro' => 2.5,
    };
@endphp

<svg
    {{ $attributes->class($classes) }}
    data-flux-icon
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="{{ $strokeWidth }}"
    stroke-linecap="round"
    stroke-linejoin="round"
    aria-hidden="true"
    data-slot="icon"
>
    <path d="M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5" />
    <circle cx="13" cy="12" r="2" />
    <path d="M18 19c-2.8 0-5-2.2-5-5v8" />
    <circle cx="20" cy="19" r="2" />
</svg>
</file>

<file path="resources/views/flux/icon/layout-grid.blade.php">
{{-- Credit: Lucide (https://lucide.dev) --}}

@props([
    'variant' => 'outline',
])

@php
    if ($variant === 'solid') {
        throw new \Exception('The "solid" variant is not supported in Lucide.');
    }

    $classes = Flux::classes('shrink-0')->add(
        match ($variant) {
            'outline' => '[:where(&)]:size-6',
            'solid' => '[:where(&)]:size-6',
            'mini' => '[:where(&)]:size-5',
            'micro' => '[:where(&)]:size-4',
        },
    );

    $strokeWidth = match ($variant) {
        'outline' => 2,
        'mini' => 2.25,
        'micro' => 2.5,
    };
@endphp

<svg
    {{ $attributes->class($classes) }}
    data-flux-icon
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="{{ $strokeWidth }}"
    stroke-linecap="round"
    stroke-linejoin="round"
    aria-hidden="true"
    data-slot="icon"
>
    <rect width="7" height="7" x="3" y="3" rx="1" />
    <rect width="7" height="7" x="14" y="3" rx="1" />
    <rect width="7" height="7" x="14" y="14" rx="1" />
    <rect width="7" height="7" x="3" y="14" rx="1" />
</svg>
</file>

<file path="resources/views/flux/navlist/group.blade.php">
@props([
    'expandable' => false,
    'expanded' => true,
    'heading' => null,
])

<?php if ($expandable && $heading): ?>

<ui-disclosure
    {{ $attributes->class('group/disclosure') }}
    @if ($expanded === true) open @endif
    data-flux-navlist-group
>
    <button
        type="button"
        class="group/disclosure-button mb-[2px] flex h-10 w-full items-center rounded-lg text-zinc-500 hover:bg-zinc-800/5 hover:text-zinc-800 lg:h-8 dark:text-white/80 dark:hover:bg-white/[7%] dark:hover:text-white"
    >
        <div class="ps-3 pe-4">
            <flux:icon.chevron-down class="hidden size-3! group-data-open/disclosure-button:block" />
            <flux:icon.chevron-right class="block size-3! group-data-open/disclosure-button:hidden" />
        </div>

        <span class="text-sm font-medium leading-none">{{ $heading }}</span>
    </button>

    <div class="relative hidden space-y-[2px] ps-7 data-open:block" @if ($expanded === true) data-open @endif>
        <div class="absolute inset-y-[3px] start-0 ms-4 w-px bg-zinc-200 dark:bg-white/30"></div>

        {{ $slot }}
    </div>
</ui-disclosure>

<?php elseif ($heading): ?>

<div {{ $attributes->class('block space-y-[2px]') }}>
    <div class="px-1 py-2">
        <div class="text-xs leading-none text-zinc-400">{{ $heading }}</div>
    </div>

    <div>
        {{ $slot }}
    </div>
</div>

<?php else: ?>

<div {{ $attributes->class('block space-y-[2px]') }}>
    {{ $slot }}
</div>

<?php endif; ?>
</file>

<file path="resources/views/livewire/auth/confirm-password.blade.php">
<x-layouts.auth>
    <div class="flex flex-col gap-6">
        <x-auth-header
            :title="__('Confirm password')"
            :description="__('This is a secure area of the application. Please confirm your password before continuing.')"
        />

        <x-auth-session-status class="text-center" :status="session('status')" />

        <form method="POST" action="{{ route('password.confirm.store') }}" class="flex flex-col gap-6">
            @csrf

            <flux:input
                name="password"
                :label="__('Password')"
                type="password"
                required
                autocomplete="current-password"
                :placeholder="__('Password')"
                viewable
            />

            <flux:button variant="primary" type="submit" class="w-full" data-test="confirm-password-button">
                {{ __('Confirm') }}
            </flux:button>
        </form>
    </div>
</x-layouts.auth>
</file>

<file path="resources/views/livewire/auth/forgot-password.blade.php">
<div class="flex flex-col gap-6">
    <x-auth-header :title="__('Forgot password')" :description="__('Enter your email to receive a password reset link')" />

    <!-- Session Status -->
    <x-auth-session-status class="text-center" :status="session('status')" />

    <form method="POST" wire:submit="sendPasswordResetLink" class="flex flex-col gap-6">
        <!-- Email Address -->
        <flux:input
            wire:model="email"
            :label="__('Email Address')"
            type="email"
            required
            autofocus
            placeholder="email@example.com"
        />

        <flux:button variant="primary" type="submit" class="w-full">{{ __('Email password reset link') }}</flux:button>
    </form>

    <div class="space-x-1 rtl:space-x-reverse text-center text-sm text-zinc-400">
        <span>{{ __('Or, return to') }}</span>
        <flux:link :href="route('login')" wire:navigate>{{ __('log in') }}</flux:link>
    </div>
</div>
</file>

<file path="resources/views/livewire/auth/reset-password.blade.php">
<div class="flex flex-col gap-6">
    <x-auth-header :title="__('Reset password')" :description="__('Please enter your new password below')" />

    <!-- Session Status -->
    <x-auth-session-status class="text-center" :status="session('status')" />

    <form method="POST" wire:submit="resetPassword" class="flex flex-col gap-6">
        <!-- Email Address -->
        <flux:input
            wire:model="email"
            :label="__('Email')"
            type="email"
            required
            autocomplete="email"
        />

        <!-- Password -->
        <flux:input
            wire:model="password"
            :label="__('Password')"
            type="password"
            required
            autocomplete="new-password"
            :placeholder="__('Password')"
            viewable
        />

        <!-- Confirm Password -->
        <flux:input
            wire:model="password_confirmation"
            :label="__('Confirm password')"
            type="password"
            required
            autocomplete="new-password"
            :placeholder="__('Confirm password')"
            viewable
        />

        <div class="flex items-center justify-end">
            <flux:button type="submit" variant="primary" class="w-full">
                {{ __('Reset password') }}
            </flux:button>
        </div>
    </form>
</div>
</file>

<file path="resources/views/livewire/auth/two-factor-challenge.blade.php">
<x-layouts.auth>
    <div class="flex flex-col gap-6">
        <div
            class="relative w-full h-auto"
            x-cloak
            x-data="{
                showRecoveryInput: @js($errors->has('recovery_code')),
                code: '',
                recovery_code: '',
                toggleInput() {
                    this.showRecoveryInput = !this.showRecoveryInput;

                    this.code = '';
                    this.recovery_code = '';

                    $dispatch('clear-2fa-auth-code');

                    $nextTick(() => {
                        this.showRecoveryInput
                            ? this.$refs.recovery_code?.focus()
                            : $dispatch('focus-2fa-auth-code');
                    });
                },
            }"
        >
            <div x-show="!showRecoveryInput">
                <x-auth-header
                    :title="__('Authentication Code')"
                    :description="__('Enter the authentication code provided by your authenticator application.')"
                />
            </div>

            <div x-show="showRecoveryInput">
                <x-auth-header
                    :title="__('Recovery Code')"
                    :description="__('Please confirm access to your account by entering one of your emergency recovery codes.')"
                />
            </div>

            <form method="POST" action="{{ route('two-factor.login.store') }}">
                @csrf

                <div class="space-y-5 text-center">
                    <div x-show="!showRecoveryInput">
                        <div class="flex items-center justify-center my-5">
                            <x-input-otp
                                name="code"
                                digits="6"
                                autocomplete="one-time-code"
                                x-model="code"
                            />
                        </div>

                        @error('code')
                            <flux:text color="red">
                                {{ $message }}
                            </flux:text>
                        @enderror
                    </div>

                    <div x-show="showRecoveryInput">
                        <div class="my-5">
                            <flux:input
                                type="text"
                                name="recovery_code"
                                x-ref="recovery_code"
                                x-bind:required="showRecoveryInput"
                                autocomplete="one-time-code"
                                x-model="recovery_code"
                            />
                        </div>

                        @error('recovery_code')
                            <flux:text color="red">
                                {{ $message }}
                            </flux:text>
                        @enderror
                    </div>

                    <flux:button
                        variant="primary"
                        type="submit"
                        class="w-full"
                    >
                        {{ __('Continue') }}
                    </flux:button>
                </div>

                <div class="mt-5 space-x-0.5 text-sm leading-5 text-center">
                    <span class="opacity-50">{{ __('or you can') }}</span>
                    <div class="inline font-medium underline cursor-pointer opacity-80">
                        <span x-show="!showRecoveryInput" @click="toggleInput()">{{ __('login using a recovery code') }}</span>
                        <span x-show="showRecoveryInput" @click="toggleInput()">{{ __('login using an authentication code') }}</span>
                    </div>
                </div>
            </form>
        </div>
    </div>
</x-layouts.auth>
</file>

<file path="resources/views/livewire/auth/verify-email.blade.php">
<div class="mt-4 flex flex-col gap-6">
    <flux:text class="text-center">
        {{ __('Please verify your email address by clicking on the link we just emailed to you.') }}
    </flux:text>

    @if (session('status') == 'verification-link-sent')
        <flux:text class="text-center font-medium !dark:text-green-400 !text-green-600">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </flux:text>
    @endif

    <div class="flex flex-col items-center justify-between space-y-3">
        <flux:button wire:click="sendVerification" variant="primary" class="w-full">
            {{ __('Resend verification email') }}
        </flux:button>

        <flux:link class="text-sm cursor-pointer" wire:click="logout">
            {{ __('Log out') }}
        </flux:link>
    </div>
</div>
</file>

<file path="resources/views/livewire/chatbot-widget.blade.php">
<div>

    <div class="fixed bottom-5 right-5 z-50">
        <!-- Chat Window -->
        <div
            x-data="{
                isOpen: @entangle('isOpen'),
                scrollToBottom() {
                    $nextTick(() => {
                        const messagesContainer = document.getElementById('messages-container');
                        if (messagesContainer) {
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        }
                    });
                }
            }"
            @play-audio.window="playAudio($event.detail.audioBase64)"
            @chat-toggled.window="scrollToBottom"
            @message-sent.window="scrollToBottom"
            x-show="isOpen"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 transform translate-y-4"
            x-transition:enter-end="opacity-100 transform translate-y-0"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 transform translate-y-0"
            x-transition:leave-end="opacity-0 transform translate-y-4"
            class="flex flex-col w-full max-w-sm h-[32rem] bg-white dark:bg-gray-800 rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700"
            style="display: none;"
        >
            <!-- Header, Messages Area... (Sin cambios) -->
            <div class="flex justify-between items-center p-4 bg-gray-50 dark:bg-gray-900/50 rounded-t-xl border-b dark:border-gray-700">
                <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">Asistente Virtual</h3>
                <button wire:click="toggleChat" class="text-gray-500 hover:text-gray-800 dark:hover:text-gray-200">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                </button>
            </div>
            <div id="messages-container" class="flex-1 p-4 overflow-y-auto space-y-4">
                @foreach($messages as $message)
                    <div class="flex @if($message['sender'] === 'user') justify-end @else justify-start @endif">
                        <div class="max-w-[80%] rounded-lg px-3 py-2 @if($message['sender'] === 'user') bg-blue-600 text-white @else bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 @endif">
                            <p class="text-sm">{{ $message['text'] }}</p>
                        </div>
                    </div>
                @endforeach
                <div wire:loading wire:target="sendMessage, processAudio" class="flex justify-start">
                     <div class="max-w-[80%] rounded-lg px-3 py-2 bg-gray-200 dark:bg-gray-700">
                        <div class="flex items-center space-x-1">
                            <span class="h-1.5 w-1.5 bg-gray-500 rounded-full animate-pulse [animation-delay:-0.3s]"></span>
                            <span class="h-1.5 w-1.5 bg-gray-500 rounded-full animate-pulse [animation-delay:-0.15s]"></span>
                            <span class="h-1.5 w-1.5 bg-gray-500 rounded-full animate-pulse"></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Input Area -->
            <div class="p-4 border-t dark:border-gray-700 bg-gray-50 dark:bg-gray-900/50 rounded-b-xl"
                 x-data="voiceChatbot()">
                <div class="flex items-center space-x-2">
                    <input
                        type="text"
                        wire:model="currentMessage"
                        wire:keydown.enter="sendMessage"
                        placeholder="Escribe o presiona el micrófono..."
                        class="w-full bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 text-sm"
                        :disabled="$wire.isLoading || isRecording"
                    >
                    <button x-show="$wire.currentMessage.trim() !== ''" wire:click="sendMessage" wire:disabled="$wire.isLoading" class="bg-blue-600 text-white rounded-md p-2 hover:bg-blue-700 disabled:bg-blue-400 disabled:cursor-not-allowed transition">
                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M3.105 2.289a.75.75 0 00-.826.95l1.414 4.949a.75.75 0 00.95.826L11.25 9.25v1.5L4.643 12.01a.75.75 0 00-.826.95l1.414 4.949a.75.75 0 00.95.826L16.25 12.25a.75.75 0 000-1.414L3.105 2.289z" /></svg>
                    </button>
                    
                    <button
                        x-show="$wire.currentMessage.trim() === ''"
                        @click="isRecording ? stopRecording() : startRecording()"
                        :disabled="$wire.isLoading"
                        class="text-white rounded-md p-2 transition disabled:bg-gray-400"
                        :class="isRecording ? 'bg-red-600 hover:bg-red-700' : 'bg-blue-600 hover:bg-blue-700'">
                        <svg x-show="!isRecording" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" /></svg>
                        <svg x-show="isRecording" class="h-5 w-5 animate-pulse" fill="currentColor" viewBox="0 0 20 20"><path d="M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5z" /></svg>
                    </button>
                </div>
            </div>
        </div>

        <!-- Floating Button -->
        <div x-data="{ isOpen: @entangle('isOpen') }">
            <button x-show="!isOpen" wire:click="toggleChat" class="bg-blue-600 text-white rounded-full h-16 w-16 flex items-center justify-center shadow-lg hover:bg-blue-700 transition transform hover:scale-110">
                <svg class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /></svg>
            </button>
        </div>
    </div>

    <script>
        function playAudio(base64String) {
            const audioUrl = `data:audio/mpeg;base64,${base64String}`;
            const audio = new Audio(audioUrl);
            audio.play().catch(e => console.error("Error al reproducir el audio:", e));
        }

        function voiceChatbot() {
            return {
                isRecording: false,
                mediaRecorder: null,
                audioChunks: [],

                startRecording() {
                    const silentAudio = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA');
                    silentAudio.play().catch(() => {});

                    navigator.mediaDevices.getUserMedia({ audio: true })
                        .then(stream => {
                            this.isRecording = true;
                            this.mediaRecorder = new MediaRecorder(stream);
                            this.mediaRecorder.start();
                            this.audioChunks = [];

                            this.mediaRecorder.addEventListener("dataavailable", event => {
                                this.audioChunks.push(event.data);
                            });

                            this.mediaRecorder.addEventListener("stop", () => {
                                this.isRecording = false;                                
                                this.sendAudio();
                                stream.getTracks().forEach(track => track.stop());
                            });
                        }).catch(err => {
                            console.error("Error al acceder al micrófono:", err);
                            alert("Se necesita permiso para usar el micrófono.");
                        });
                },
                stopRecording() {
                    if (this.mediaRecorder && this.isRecording) {
                        this.mediaRecorder.stop();
                    }
                },
                sendAudio() {
                    const audioBlob = new Blob(this.audioChunks, { type: 'audio/webm' });
                    const reader = new FileReader();
                    reader.readAsDataURL(audioBlob);
                    reader.onloadend = () => {
                        const base64String = reader.result.split(',')[1];
                        @this.processAudio(base64String);
                    };
                }
            }
        }
    </script>
</div>
</file>

<file path="resources/views/livewire/conversation/show.blade.php">
<div class="max-w-4xl mx-auto py-12 px-4">
    <h1 class="text-3xl font-bold mb-2">Conversación sobre: {{ $investment->project->title }}</h1>
    <p class="text-gray-500 dark:text-gray-400 mb-8">Negociando una inversión de ${{ number_format($investment->proposed_amount, 2) }}</p>

    {{-- Contenedor de mensajes con auto-scroll --}}
    <div 
        wire:poll.10s="loadMessages" 
        class="space-y-6 bg-white dark:bg-zinc-800 p-6 rounded-lg shadow-md h-96 overflow-y-auto"
        
        x-data="{
            scrollToBottom() {
                // Espera al siguiente 'tick' del DOM para asegurarse de que el nuevo
                // mensaje se ha renderizado antes de calcular la altura.
                this.$nextTick(() => {
                    $el.scrollTop = $el.scrollHeight;
                });
            }
        }"
        x-init="scrollToBottom()"
        @message-sent.window="scrollToBottom()"
        @new-message-received.window="scrollToBottom()"
    >
        @forelse($messageList as $message)
            <div class="flex {{ $message->sender_id === auth()->id() ? 'justify-end' : 'justify-start' }}">
                <div class="max-w-lg px-4 py-2 rounded-lg {{ $message->sender_id === auth()->id() ? 'bg-blue-600 text-white' : 'bg-gray-200 dark:bg-zinc-700 text-gray-800 dark:text-gray-200' }}">
                    {{-- La clase whitespace-pre-line preserva los saltos de línea --}}
                    <p class="text-sm whitespace-pre-line">{{ $message->body }}</p>
                    <p class="text-xs text-right mt-1 opacity-75">{{ $message->created_at->format('g:i A') }}</p>
                </div>
            </div>
        @empty
            <p class="text-center text-gray-500">Aún no hay mensajes. ¡Inicia la conversación!</p>
        @endforelse
    </div>

    {{-- Formulario para enviar un nuevo mensaje --}}
    <form wire:submit="sendMessage" class="mt-6">
        <textarea 
            wire:model="newMessageBody"
            placeholder="Escribe tu mensaje..."
            rows="3"
            class="w-full border-zinc-300 dark:border-zinc-700 dark:bg-zinc-900 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            {{-- Lógica para enviar con Enter y nueva línea con Shift+Enter --}}
            @keydown.enter="if(!$event.shiftKey) { event.preventDefault(); $wire.sendMessage() }"
        ></textarea>
        @error('newMessageBody') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
        
        <div class="mt-2 text-right">
            <flux:button type="submit" variant="primary">Enviar</flux:button>
        </div>
    </form>
</div>
</file>

<file path="resources/views/livewire/cotizaciones.blade.php">
<div class="px-6 py-8 max-w-6xl mx-auto">
    <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white">💱 Cotizaciones Argentina y Región</h2>

    @if($error)
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6 text-center">
            {{ $error }}
        </div>
    @endif

    <!-- Sección: Tipos de Dólar -->
    @if(!empty($dolares))
        <div class="mb-10">
            <h3 class="text-xl font-semibold mb-4 text-gray-700 dark:text-gray-300 flex items-center">
                <span class="bg-blue-100 text-blue-800 text-xs font-semibold px-2.5 py-0.5 rounded mr-2">USD</span>
                Tipos de Dólar en Argentina
            </h3>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                @foreach($dolares as $d)
                    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-850 rounded-xl shadow p-4 border-l-4 border-blue-500">
                        <h4 class="font-bold text-lg text-gray-800 dark:text-white">{{ $d['nombre'] }}</h4>
                        <div class="mt-2 space-y-1 text-sm">
                            @if(isset($d['compra']))
                                <p><span class="font-medium">Compra:</span> ${{ number_format($d['compra'], 2, ',', '.') }}</p>
                            @endif
                            @if(isset($d['venta']))
                                <p><span class="font-medium">Venta:</span> ${{ number_format($d['venta'], 2, ',', '.') }}</p>
                            @endif
                            @if(isset($d['fechaActualizacion']))
                                <p class="text-xs text-gray-500 mt-1">
                                    🕒 {{ \Carbon\Carbon::parse($d['fechaActualizacion'])->format('d/m H:i') }}
                                </p>
                            @endif
                        </div>
                    </div>
                @endforeach
            </div>
        </div>
    @endif

    <!-- Sección: Monedas Extranjeras (incluye PYG) -->
    @if(!empty($monedasExtranjeras))
        <div>
            <h3 class="text-xl font-semibold mb-4 text-gray-700 dark:text-gray-300">🌎 Monedas Internacionales y Regionales</h3>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                @foreach($monedasExtranjeras as $m)
                    <div class="bg-gradient-to-r from-green-50 to-emerald-50 dark:from-gray-800 dark:to-gray-850 rounded-xl shadow p-4 border-l-4 border-green-500">
                        <div class="flex items-center justify-between">
                            <h4 class="font-bold text-lg text-gray-800 dark:text-white">{{ $m['nombre'] }}</h4>
                            <span class="bg-gray-200 dark:bg-gray-700 text-xs px-2 py-0.5 rounded">{{ $m['moneda'] }}</span>
                        </div>
                        <div class="mt-2 space-y-1 text-sm">
                            @if(isset($m['compra']))
                                <p><span class="font-medium">Compra:</span> ${{ number_format($m['compra'], 2, ',', '.') }}</p>
                            @endif
                            @if(isset($m['venta']))
                                <p><span class="font-medium">Venta:</span> ${{ number_format($m['venta'], 2, ',', '.') }}</p>
                            @endif
                            @if(isset($m['fechaActualizacion']))
                                <p class="text-xs text-gray-500 mt-1">
                                    🕒 {{ \Carbon\Carbon::parse($m['fechaActualizacion'])->format('d/m H:i') }}
                                </p>
                            @endif
                        </div>
                    </div>
                @endforeach
            </div>
        </div>
    @endif

    @if(empty($dolares) && empty($monedasExtranjeras) && !$error)
        <div class="text-center text-gray-500 py-6">
            Cargando cotizaciones...
        </div>
    @endif
</div>
</file>

<file path="resources/views/livewire/entrepreneur-dashboard.blade.php">
<div>
    {{-- SECCIÓN 1: MIS PROYECTOS --}}
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold">Mis Proyectos</h2>
        <a href="{{ route('project.create') }}" wire:navigate class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition">
            Crear Nuevo Proyecto
        </a>
    </div>

    @if (session()->has('message'))
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span class="block sm:inline">{{ session('message') }}</span>
        </div>
    @endif

    <div class="bg-white dark:bg-zinc-800 rounded-lg shadow-md overflow-x-auto">
        <table class="w-full text-left">
            <thead class="border-b dark:border-zinc-700">
                <tr>
                    <th class="p-4">Título</th>
                    <th class="p-4">Categoría</th>
                    <th class="p-4">Meta de Financiación</th>
                    <th class="p-4">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @forelse ($projects as $project)
                    <tr class="border-b dark:border-zinc-700 last:border-b-0">
                        <td class="p-4">{{ $project->title }}</td>
                        <td class="p-4">{{ $project->category->name ?? 'Sin categoría' }}</td>
                        <td class="p-4">${{ number_format($project->funding_goal, 2) }}</td>
                        <td class="p-4 flex gap-2">
                            <a href="{{ route('project.edit', $project) }}" wire:navigate class="text-blue-500 hover:underline">Editar</a>
                            <button wire:click="delete({{ $project->id }})" wire:confirm="¿Estás seguro de que quieres eliminar este proyecto?" class="text-red-500 hover:underline">
                                Eliminar
                            </button>
                        </td>
                    </tr>
                @empty
                    <tr>
                        <td colspan="4" class="p-4 text-center text-zinc-500">
                            Aún no has creado ningún proyecto. ¡Anímate a empezar!
                        </td>
                    </tr>
                @endforelse
            </tbody>
        </table>
    </div>

    {{-- SECCIÓN 2: PROPUESTAS RECIBIDAS --}}
    <div class="mt-12">
        <h2 class="text-2xl font-bold mb-6">Propuestas de Inversión Recibidas</h2>

        <div class="space-y-6">
            @forelse ($proposals as $proposal)
                <div class="bg-white dark:bg-zinc-800 rounded-lg shadow-md p-6">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Propuesta para tu proyecto:</p>
                            <h3 class="text-xl font-bold text-indigo-600 dark:text-indigo-400">{{ $proposal->project->title }}</h3>
                            <p class="mt-2 text-sm">
                                <span class="font-semibold">Inversor:</span> {{ $proposal->investor->name }}
                            </p>
                            <p class="text-sm">
                                <span class="font-semibold">Monto Propuesto:</span> ${{ number_format($proposal->proposed_amount, 2) }}
                            </p>
                        </div>
                        <div>
                            <flux:badge 
                                :color="$proposal->status === 'pending' ? 'yellow' : ($proposal->status === 'negotiating' ? 'blue' : ($proposal->status === 'rejected' ? 'red' : 'gray'))"
                            >
                                {{ ucfirst($proposal->status) }}
                            </flux:badge>
                        </div>
                    </div>

                    <div class="mt-4 pt-4 border-t dark:border-zinc-700">
                        <p class="text-sm font-semibold mb-2">Mensaje del Inversor:</p>
                        <p class="text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-zinc-700 p-3 rounded-md">{{ $proposal->message }}</p>
                    </div>
                    <div class="mt-6 flex justify-end gap-4">
                        {{-- Si la propuesta está pendiente, muestra los botones de acción --}}
                        @if ($proposal->status === 'pending')
                            <flux:button 
                                variant="danger"
                                wire:click="rejectProposal({{ $proposal->id }})"
                                wire:confirm="¿Estás seguro de que quieres rechazar esta propuesta?"
                            >
                                Rechazar
                            </flux:button>
                            <flux:button 
                                variant="primary"
                                wire:click="acceptProposal({{ $proposal->id }})"
                            >
                                Aceptar Contacto
                            </flux:button>
                        
                        {{-- Si la propuesta está en negociación, muestra el enlace al chat --}}
                        @elseif ($proposal->status === 'negotiating')
                            <a href="{{ route('conversation.show', $proposal) }}" wire:navigate class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition">
                                Iniciar Conversación
                            </a>
                        @endif
                    </div>
                </div>
            @empty
                <div class="bg-white dark:bg-zinc-800 rounded-lg shadow-md p-6 text-center">
                    <p class="text-gray-500 dark:text-gray-400">Aún no has recibido ninguna propuesta de inversión.</p>
                </div>
            @endforelse
        </div>
    </div>
</div>
</file>

<file path="resources/views/livewire/investment/proposal-modal.blade.php">
<div>
    @if ($showModal)
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-30 backdrop-blur-sm" x-data @keydown.escape.window="$wire.closeModal()">
        
        <div class="bg-white dark:bg-zinc-800 rounded-lg shadow-xl p-6 w-full max-w-lg" @click.away="$wire.closeModal()">
            <h3 class="text-xl font-bold mb-4">Proponer Inversión para "{{ $project->title }}"</h3>
            
            <form wire:submit="save" class="space-y-4">
                <div>
                    <label for="amount" class="block text-sm font-medium">Monto a Proponer ($)</label>
                    <input type="number" wire:model="proposed_amount" id="amount" class="mt-1 block w-full border-zinc-300 dark:border-zinc-700 dark:bg-zinc-900 rounded-md shadow-sm">
                    @error('proposed_amount') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                </div>
                
                <div>
                    <label for="message" class="block text-sm font-medium">Mensaje para el Emprendedor</label>
                    <textarea wire:model="message" id="message" rows="4" class="mt-1 block w-full border-zinc-300 dark:border-zinc-700 dark:bg-zinc-900 rounded-md shadow-sm"></textarea>
                    @error('message') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
                </div>
                
                <div class="flex justify-end gap-4 pt-4">
                    <flux:button type="button" variant="filled" wire:click="closeModal">Cancelar</flux:button>
                    <flux:button type="submit" variant="primary">Enviar Propuesta</flux:button>
                </div>
            </form>
        </div>
    </div>
    @endif
</div>
</file>

<file path="resources/views/livewire/investor-dashboard.blade.php">
<div>
    <div>
        {{-- MIS PROPUESTAS ENVIADAS --}}
        <div class="mb-12">
            <h2 class="text-2xl font-bold mb-6">Mis Propuestas Enviadas</h2>

            <div class="space-y-4">
                @forelse($myProposals as $proposal)
                <div class="bg-white dark:bg-zinc-800 rounded-lg shadow-md p-4 flex justify-between items-center">
                    <div>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Propuesta para:</p>
                        <a href="{{ route('project.view', $proposal->project) }}" wire:navigate class="text-lg font-bold text-indigo-600 dark:text-indigo-400 hover:underline">
                            {{ $proposal->project->title }}
                        </a>
                        <p class="text-sm mt-1">Monto: ${{ number_format($proposal->proposed_amount, 2) }}</p>
                    </div>
                    <div class="text-right">
                        <flux:badge
                            :color="$proposal->status === 'pending' ? 'yellow' : ($proposal->status === 'negotiating' ? 'blue' : ($proposal->status === 'rejected' ? 'red' : 'gray'))">
                            {{ ucfirst($proposal->status) }}
                        </flux:badge>

                        {{-- Mensaje de acción cuando la propuesta es aceptada --}}
                        @if($proposal->status === 'negotiating')
                        <p class="text-xs text-green-600 dark:text-green-400 mt-1">¡El emprendedor ha aceptado!</p>
                        <a href="{{ route('conversation.show', $proposal) }}" wire:navigate class="text-sm text-blue-500 hover:underline">
                            Iniciar Conversación
                        </a>
                        @endif
                    </div>
                </div>
                @empty
                <p class="text-gray-500 dark:text-gray-400">Aún no has enviado ninguna propuesta de inversión.</p>
                @endforelse
            </div>
        </div>

        {{-- LÍNEA SEPARADORA --}}
        <hr class="my-12 border-gray-200 dark:border-zinc-700">

        <h2 class="text-2xl font-bold mb-6">Proyectos Buscando Inversión</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @forelse ($projects as $project)
            <div class="bg-white dark:bg-zinc-800 rounded-lg shadow-md overflow-hidden transition-transform hover:scale-105">
                {{-- Usamos la primera foto como portada --}}
                @if ($project->photos->first())
                <img src="{{ Storage::url($project->photos->first()->path) }}" alt="{{ $project->title }}" class="w-full h-48 object-cover">
                @else
                {{-- Un placeholder si no hay foto --}}
                <div class="w-full h-48 bg-zinc-200 dark:bg-zinc-700 flex items-center justify-center">
                    <span class="text-zinc-500">Sin Imagen</span>
                </div>
                @endif

                <div class="p-4">
                    <h3 class="text-lg font-bold">{{ $project->title }}</h3>
                    <p class="text-sm text-zinc-500 dark:text-zinc-400 mb-2">{{ $project->industry }}</p>
                    <p class="text-sm mb-4">{{ Str::limit($project->description, 100) }}</p>

                    <div class="flex justify-between items-center text-sm">
                        <span class="font-semibold">Meta: ${{ number_format($project->funding_goal, 2) }}</span>
                        <livewire:like-button :project="$project" :key="'like-'.$project->id" />
                        <a href="{{ route('project.view', $project) }}" wire:navigate class="text-blue-500 hover:underline">Ver Más</a>
                    </div>
                </div>
            </div>
            @empty
            <p>No hay proyectos disponibles en este momento.</p>
            @endforelse
        </div>
    </div>
</file>

<file path="resources/views/livewire/like-button.blade.php">
<div class="flex items-center space-x-2">
    <button 
        wire:click="toggleLike"
        wire:loading.attr="disabled"
        class="flex items-center justify-center p-2 rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        aria-label="Dar Me Gusta"
    >
        {{-- El corazón SVG cambia de estilo según si el proyecto ya tiene like o no --}}
        <svg 
            class="w-6 h-6 transition-transform transform hover:scale-110 {{ $isLiked ? 'text-red-500 fill-current' : 'text-gray-400 hover:text-red-500' }}" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
        >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 016.364 0L12 7.636l1.318-1.318a4.5 4.5 0 116.364 6.364L12 20.364l-7.682-7.682a4.5 4.5 0 010-6.364z"></path>
        </svg>
    </button>
    <span class="text-sm font-medium text-gray-500 dark:text-gray-400">{{ $likesCount }}</span>
</div>
</file>

<file path="resources/views/livewire/mostrar-proyectos.blade.php">
<div class="px-6 py-12 max-w-7xl mx-auto">
    <h2 class="text-2xl font-semibold mb-6 text-center">🌱 Proyectos Destacados</h2>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />

    <div class="swiper mySwiper">
        <div class="swiper-wrapper">
            @forelse($proyectos as $proyecto)
                <div class="swiper-slide">
                    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md hover:shadow-lg transition overflow-hidden h-full flex flex-col">
                        {{-- 1. Lógica para mostrar la primera foto del proyecto --}}
                        @if ($proyecto->photos->isNotEmpty())
                            <img 
                                src="{{ Storage::url($proyecto->photos->first()->path) }}" 
                                alt="{{ $proyecto->title }}" 
                                class="w-full h-48 object-cover"
                            >
                        @else
                            {{-- Un placeholder si no hay foto --}}
                            <div class="w-full h-48 bg-zinc-200 dark:bg-zinc-700 flex items-center justify-center">
                                <span class="text-zinc-500">Sin Imagen</span>
                            </div>
                        @endif

                        <div class="p-4 flex-grow">
                            {{-- 2. Accede a las propiedades del modelo --}}
                            <h3 class="font-bold text-lg mb-2">{{ $proyecto->title }}</h3>
                            <p class="text-gray-600 dark:text-gray-300 text-sm">{{ Str::limit($proyecto->description, 100) }}</p>
                        </div>
                    </div>
                </div>
            @empty
                {{-- 3. Mensaje si no hay proyectos --}}
                <div class="swiper-slide">
                    <p class="text-center text-zinc-500 col-span-full">No hay proyectos disponibles en este momento.</p>
                </div>
            @endforelse
        </div>

        <div class="swiper-button-next !text-blue-600 dark:!text-blue-400"></div>
        <div class="swiper-button-prev !text-blue-600 dark:!text-blue-400"></div>
        <div class="swiper-pagination !bottom-0 mt-4"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
<script>
    let swiperInstance = null;

    function initSwiper() {
        // Destruir la instancia anterior si existe
        if (swiperInstance !== null) {
            swiperInstance.destroy(true, true);
            swiperInstance = null;
        }

        const slides = document.querySelectorAll('.mySwiper .swiper-slide');
        if (slides.length === 0) return;

        swiperInstance = new Swiper('.mySwiper', {
            slidesPerView: 1,
            spaceBetween: 20,
            loop: slides.length > 3,
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            breakpoints: {
                640: { slidesPerView: 2 },
                1024: { slidesPerView: 3 },
            },
        });
    }

    // Inicializar al cargar la página
    document.addEventListener('DOMContentLoaded', initSwiper);

    // Reinicializar cuando Livewire actualice el DOM
    document.addEventListener('livewire:navigated', initSwiper);
    document.addEventListener('livewire:updated', initSwiper);
</script>
</div>
</file>

<file path="resources/views/livewire/noticias-economia.blade.php">
<div class="px-6 py-10 max-w-7xl mx-auto">
    <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-white">📰 Noticias de Economía - Argentina</h2>

    @if($loading)
        <div class="text-center py-6 text-gray-500">Cargando noticias...</div>
    @elseif($error)
        <div class="bg-red-100 text-red-700 p-4 rounded text-center mb-6">{{ $error }}</div>
    @elseif(empty($noticias))
        <div class="text-center py-6 text-gray-500">No hay noticias disponibles.</div>
    @else
        <div class="relative">
            <button 
                onclick="document.querySelector('.news-scroll').scrollBy({left: -300, behavior: 'smooth'})"
                class="absolute left-0 top-1/2 transform -translate-y-1/2 z-10 bg-white dark:bg-gray-800 p-2 rounded-full shadow-md hover:bg-gray-100 dark:hover:bg-gray-700"
                aria-label="Anterior"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
            </button>

            <div class="news-scroll overflow-x-auto flex space-x-4 pb-4 pt-2 px-4
                        [&::-webkit-scrollbar]:hidden
                        [-ms-overflow-style:none]
                        [scrollbar-width:none]">
                @foreach($noticias as $n)
                    <div class="flex-shrink-0 w-80 bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden h-full flex flex-col">
                        <img 
                            src="{{ !empty($n['image_url']) ? $n['image_url'] : asset('images/logo.png') }}" 
                            alt="{{ $n['title'] ?? 'Noticia' }}"
                            class="w-full h-32 object-cover"
                            loading="lazy"
                            onerror="this.src='{{ asset('images/nexo.png') }}'"
                        >
                        <div class="p-4 flex-grow flex flex-col">
                            <span class="text-xs text-blue-600 dark:text-blue-400 font-medium mb-1">
                                {{ $n['creator'][0] ?? 'Fuente' }}
                            </span>
                            <h3 class="font-bold text-lg mb-2 line-clamp-2">{{ $n['title'] ?? 'Sin título' }}</h3>
                            <p class="text-gray-600 dark:text-gray-300 text-sm mb-3 line-clamp-3">
                                {{ Str::limit(strip_tags($n['description'] ?? ''), 120) }}
                            </p>
                            <a 
                                href="{{ $n['link'] }}" 
                                target="_blank"
                                class="mt-auto text-blue-600 hover:underline text-sm font-medium"
                            >
                                Leer más →
                            </a>
                        </div>
                    </div>
                @endforeach
            </div>

            <button 
                onclick="document.querySelector('.news-scroll').scrollBy({left: 300, behavior: 'smooth'})"
                class="absolute right-0 top-1/2 transform -translate-y-1/2 z-10 bg-white dark:bg-gray-800 p-2 rounded-full shadow-md hover:bg-gray-100 dark:hover:bg-gray-700"
                aria-label="Siguiente"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
            </button>
        </div>
    @endif
</div>
</file>

<file path="resources/views/livewire/notifications-bell.blade.php">
<flux:dropdown position="top" align="end">
    {{-- El botón de la campana es el 'trigger' del dropdown --}}
    <button wire:poll.30s.keep-alive="loadNotifications" class="relative p-2 rounded-full hover:bg-gray-100 dark:hover:bg-zinc-700 focus:outline-none">
        <svg class="h-6 w-6 text-gray-600 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6 6 0 10-12 0v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
        </svg>
        @if($unreadCount > 0)
            <span class="absolute top-0 right-0 h-3 w-3 bg-red-500 rounded-full border-2 border-white dark:border-zinc-800"></span>
        @endif
    </button>

    {{-- El menú es un <flux:menu> que es el contenido del dropdown --}}
    <flux:menu class="w-80">
        <div class="p-4 font-bold border-b dark:border-zinc-700">Notificaciones</div>
        <div class="max-h-96 overflow-y-auto">
            @forelse($unreadNotifications as $notification)
                <a 
                    wire:click.prevent="markAsRead({{ $notification->id }})"
                    href="{{ $notification->link }}"
                    class="block px-4 py-3 hover:bg-gray-100 dark:hover:bg-zinc-700"
                >
                    <p class="text-sm text-gray-700 dark:text-gray-200">{{ $notification->message }}</p>
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{{ $notification->created_at->diffForHumans() }}</p>
                </a>
            @empty
                <p class="text-sm text-center text-gray-500 py-6">No tienes notificaciones nuevas.</p>
            @endforelse
        </div>
    </flux:menu>
</flux:dropdown>
</file>

<file path="resources/views/livewire/project/project-form.blade.php">
<div>
    <h2 class="text-2xl font-bold mb-6">
        {{ $project->exists ? 'Editar Proyecto' : 'Crear Nuevo Proyecto' }}
    </h2>

    <form wire:submit="save" class="space-y-6">
        <flux:input wire:model="title" label="Título del Proyecto" required />
        @error('title') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror

        <textarea wire:model="description" placeholder="Descripción detallada del proyecto" rows="5" class="block w-full border-zinc-300 dark:border-zinc-700 dark:bg-zinc-900 dark:text-zinc-300 rounded-md shadow-sm"></textarea>
        @error('description') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror

        <div>
            <label for="category" class="block font-medium text-sm text-zinc-700 dark:text-zinc-300">Categoría</label>
            <select wire:model="category_id" id="category" class="block w-full mt-1 border-zinc-300 dark:border-zinc-700 dark:bg-zinc-900 dark:text-zinc-300 rounded-md shadow-sm">
                <option value="">Selecciona una categoría</option>
                @foreach($categories as $category)
                <option value="{{ $category->id }}">{{ $category->name }}</option>
                @endforeach
            </select>
            @error('category_id') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror
        </div>

        <flux:input wire:model="funding_goal" label="Meta de Financiación ($)" type="number" step="0.01" required />
        @error('funding_goal') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror

        <flux:input wire:model="min_investment" label="Inversión Mínima por Inversor ($)" type="number" step="0.01" required />
        @error('min_investment') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror

        <textarea wire:model="business_model" placeholder="Modelo de Negocio" rows="3" class="block w-full border-zinc-300 dark:border-zinc-700 dark:bg-zinc-900 dark:text-zinc-300 rounded-md shadow-sm"></textarea>
        @error('business_model') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror

        <textarea wire:model="market_potential" placeholder="Potencial de Mercado" rows="3" class="block w-full border-zinc-300 dark:border-zinc-700 dark:bg-zinc-900 dark:text-zinc-300 rounded-md shadow-sm"></textarea>
        @error('market_potential') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror

        <flux:input wire:model="deadline" label="Fecha Límite (Opcional)" type="date" />
        @error('deadline') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror

        <div>
            <label class="block font-medium text-sm text-zinc-700 dark:text-zinc-300">Foto del Proyecto</label>
            <input type="file" wire:model="photo" class="mt-1 block w-full text-sm text-zinc-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
            @error('photo') <span class="text-red-500 text-sm">{{ $message }}</span> @enderror

            <div wire:loading wire:target="photo" class="text-sm text-zinc-500 mt-1">Cargando...</div>

            @if ($photo)
            <div class="mt-2">
                <p>Previsualización:</p>
                <img src="{{ $photo->temporaryUrl() }}" class="w-48 h-auto rounded">
            </div>
            @elseif ($project->exists && $project->photos->first())
            <div class="mt-2">
                <p>Foto Actual:</p>
                <img src="{{ Storage::url($project->photos->first()->path) }}" class="w-48 h-auto rounded">
            </div>
            @endif
        </div>

        <div class="flex gap-4">
            <flux:button type="submit" variant="primary">Guardar Proyecto</flux:button>
            <a href="{{ route('dashboard') }}" wire:navigate class="px-4 py-2 text-sm rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                Cancelar
            </a>
        </div>
    </form>
</div>
</file>

<file path="resources/views/livewire/project/view.blade.php">
<div>
    <div class="max-w-4xl mx-auto py-12 px-4">
        {{-- Título y Categoría --}}
        <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white">{{ $project->title }}</h1>
        <p class="mt-2 text-lg text-indigo-600 dark:text-indigo-400 font-semibold">{{ $project->category->name }}</p>

        {{-- Galería de Fotos (si hay) --}}
        @if($project->photos->isNotEmpty())
        <div class="mt-8">
            <img src="{{ Storage::url($project->photos->first()->path) }}" alt="{{ $project->title }}" class="w-full h-80 object-cover rounded-lg shadow-lg">
        </div>
        @endif

        {{-- Detalles Financieros --}}
        <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
            <div class="p-4 bg-gray-100 dark:bg-zinc-800 rounded-lg">
                <p class="text-sm text-gray-500 dark:text-gray-400">Meta de Financiación</p>
                <p class="text-2xl font-bold">${{ number_format($project->funding_goal, 0) }}</p>
            </div>
            <div class="p-4 bg-gray-100 dark:bg-zinc-800 rounded-lg">
                <p class="text-sm text-gray-500 dark:text-gray-400">Inversión Mínima</p>
                <p class="text-2xl font-bold">${{ number_format($project->min_investment, 0) }}</p>
            </div>
            <div class="p-4 bg-gray-100 dark:bg-zinc-800 rounded-lg">
                <p class="text-sm text-gray-500 dark:text-gray-400">Fecha Límite</p>
                <p class="text-2xl font-bold">{{ $project->deadline ? $project->deadline->format('d/m/Y') : 'Abierto' }}</p>
            </div>
        </div>

        {{-- Descripción y Detalles --}}
        <div class="mt-10 prose prose-lg dark:prose-invert max-w-none">
            <h2>Descripción</h2>
            <p>{{ $project->description }}</p>

            <h2>Modelo de Negocio</h2>
            <p>{{ $project->business_model }}</p>

            <h2>Potencial de Mercado</h2>
            <p>{{ $project->market_potential }}</p>
        </div>

        {{-- Botón de Acción (para Inversores) --}}
        <div class="mt-10 text-center">
            @if(Auth::user()->role === 'investor' && Auth::id() !== $project->user_id)

            @if($hasProposed)
            {{-- Si ya propuso, muestra un mensaje de confirmación --}}
            <div class="p-4 bg-green-100 dark:bg-green-900 border border-green-400 dark:border-green-700 text-green-700 dark:text-green-200 rounded-lg">
                <p class="font-semibold">✓ Ya has enviado una propuesta para este proyecto.</p>
                <p class="text-sm">El emprendedor ha sido notificado y puedes seguir el estado desde tu dashboard.</p>
            </div>
            @else
            {{-- Si no ha propuesto, muestra el botón --}}
            <flux:button
                variant="primary"
                wire:click="$dispatch('open-proposal-modal', { projectId: {{ $project->id }} })">
                Proponer Inversión
            </flux:button>
            @endif

            @endif
        </div>
    </div>

    {{-- Aquí vivirá nuestro modal de propuesta --}}
    <livewire:investment.proposal-modal />

    {{-- Opcional: Toast de notificación de éxito --}}
    <div
        x-data="{ show: false }"
        @proposal-sent.window="show = true; setTimeout(() => show = false, 3000)"
        x-show="show"
        x-transition
        style="display: none;"
        class="fixed bottom-5 right-5 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg">
        ¡Propuesta enviada exitosamente!
    </div>
</div>
</file>

<file path="resources/views/livewire/settings/appearance.blade.php">
<section class="w-full">
    @include('partials.settings-heading')

    <x-settings.layout :heading="__('Appearance')" :subheading=" __('Update the appearance settings for your account')">
        <flux:radio.group x-data variant="segmented" x-model="$flux.appearance">
            <flux:radio value="light" icon="sun">{{ __('Light') }}</flux:radio>
            <flux:radio value="dark" icon="moon">{{ __('Dark') }}</flux:radio>
            <flux:radio value="system" icon="computer-desktop">{{ __('System') }}</flux:radio>
        </flux:radio.group>
    </x-settings.layout>
</section>
</file>

<file path="resources/views/livewire/settings/delete-user-form.blade.php">
<section class="mt-10 space-y-6">
    <div class="relative mb-5">
        <flux:heading>{{ __('Delete account') }}</flux:heading>
        <flux:subheading>{{ __('Delete your account and all of its resources') }}</flux:subheading>
    </div>

    <flux:modal.trigger name="confirm-user-deletion">
        <flux:button variant="danger" x-data="" x-on:click.prevent="$dispatch('open-modal', 'confirm-user-deletion')">
            {{ __('Delete account') }}
        </flux:button>
    </flux:modal.trigger>

    <flux:modal name="confirm-user-deletion" :show="$errors->isNotEmpty()" focusable class="max-w-lg">
        <form method="POST" wire:submit="deleteUser" class="space-y-6">
            <div>
                <flux:heading size="lg">{{ __('Are you sure you want to delete your account?') }}</flux:heading>

                <flux:subheading>
                    {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}
                </flux:subheading>
            </div>

            <flux:input wire:model="password" :label="__('Password')" type="password" />

            <div class="flex justify-end space-x-2 rtl:space-x-reverse">
                <flux:modal.close>
                    <flux:button variant="filled">{{ __('Cancel') }}</flux:button>
                </flux:modal.close>

                <flux:button variant="danger" type="submit">{{ __('Delete account') }}</flux:button>
            </div>
        </form>
    </flux:modal>
</section>
</file>

<file path="resources/views/livewire/settings/password.blade.php">
<section class="w-full">
    @include('partials.settings-heading')

    <x-settings.layout :heading="__('Update password')" :subheading="__('Ensure your account is using a long, random password to stay secure')">
        <form method="POST" wire:submit="updatePassword" class="mt-6 space-y-6">
            <flux:input
                wire:model="current_password"
                :label="__('Current password')"
                type="password"
                required
                autocomplete="current-password"
            />
            <flux:input
                wire:model="password"
                :label="__('New password')"
                type="password"
                required
                autocomplete="new-password"
            />
            <flux:input
                wire:model="password_confirmation"
                :label="__('Confirm Password')"
                type="password"
                required
                autocomplete="new-password"
            />

            <div class="flex items-center gap-4">
                <div class="flex items-center justify-end">
                    <flux:button variant="primary" type="submit" class="w-full">{{ __('Save') }}</flux:button>
                </div>

                <x-action-message class="me-3" on="password-updated">
                    {{ __('Saved.') }}
                </x-action-message>
            </div>
        </form>
    </x-settings.layout>
</section>
</file>

<file path="resources/views/livewire/settings/two-factor.blade.php">
<section class="w-full">
    @include('partials.settings-heading')

    <x-settings.layout
        :heading="__('Two Factor Authentication')"
        :subheading="__('Manage your two-factor authentication settings')"
    >
        <div class="flex flex-col w-full mx-auto space-y-6 text-sm" wire:cloak>
            @if ($twoFactorEnabled)
                <div class="space-y-4">
                    <div class="flex items-center gap-3">
                        <flux:badge color="green">{{ __('Enabled') }}</flux:badge>
                    </div>

                    <flux:text>
                        {{ __('With two-factor authentication enabled, you will be prompted for a secure, random pin during login, which you can retrieve from the TOTP-supported application on your phone.') }}
                    </flux:text>

                    <livewire:settings.two-factor.recovery-codes :$requiresConfirmation/>

                    <div class="flex justify-start">
                        <flux:button
                            variant="danger"
                            icon="shield-exclamation"
                            icon:variant="outline"
                            wire:click="disable"
                        >
                            {{ __('Disable 2FA') }}
                        </flux:button>
                    </div>
                </div>
            @else
                <div class="space-y-4">
                    <div class="flex items-center gap-3">
                        <flux:badge color="red">{{ __('Disabled') }}</flux:badge>
                    </div>

                    <flux:text variant="subtle">
                        {{ __('When you enable two-factor authentication, you will be prompted for a secure pin during login. This pin can be retrieved from a TOTP-supported application on your phone.') }}
                    </flux:text>

                    <flux:button
                        variant="primary"
                        icon="shield-check"
                        icon:variant="outline"
                        wire:click="enable"
                    >
                        {{ __('Enable 2FA') }}
                    </flux:button>
                </div>
            @endif
        </div>
    </x-settings.layout>

    <flux:modal
        name="two-factor-setup-modal"
        class="max-w-md md:min-w-md"
        @close="closeModal"
        wire:model="showModal"
    >
        <div class="space-y-6">
            <div class="flex flex-col items-center space-y-4">
                <div class="p-0.5 w-auto rounded-full border border-stone-100 dark:border-stone-600 bg-white dark:bg-stone-800 shadow-sm">
                    <div class="p-2.5 rounded-full border border-stone-200 dark:border-stone-600 overflow-hidden bg-stone-100 dark:bg-stone-200 relative">
                        <div class="flex items-stretch absolute inset-0 w-full h-full divide-x [&>div]:flex-1 divide-stone-200 dark:divide-stone-300 justify-around opacity-50">
                            @for ($i = 1; $i <= 5; $i++)
                                <div></div>
                            @endfor
                        </div>

                        <div class="flex flex-col items-stretch absolute w-full h-full divide-y [&>div]:flex-1 inset-0 divide-stone-200 dark:divide-stone-300 justify-around opacity-50">
                            @for ($i = 1; $i <= 5; $i++)
                                <div></div>
                            @endfor
                        </div>

                        <flux:icon.qr-code class="relative z-20 dark:text-accent-foreground"/>
                    </div>
                </div>

                <div class="space-y-2 text-center">
                    <flux:heading size="lg">{{ $this->modalConfig['title'] }}</flux:heading>
                    <flux:text>{{ $this->modalConfig['description'] }}</flux:text>
                </div>
            </div>

            @if ($showVerificationStep)
                <div class="space-y-6">
                    <div class="flex flex-col items-center space-y-3">
                        <x-input-otp
                            :digits="6"
                            name="code"
                            wire:model="code"
                            autocomplete="one-time-code"
                        />
                        @error('code')
                            <flux:text color="red">
                                {{ $message }}
                            </flux:text>
                        @enderror
                    </div>

                    <div class="flex items-center space-x-3">
                        <flux:button
                            variant="outline"
                            class="flex-1"
                            wire:click="resetVerification"
                        >
                            {{ __('Back') }}
                        </flux:button>

                        <flux:button
                            variant="primary"
                            class="flex-1"
                            wire:click="confirmTwoFactor"
                            x-bind:disabled="$wire.code.length < 6"
                        >
                            {{ __('Confirm') }}
                        </flux:button>
                    </div>
                </div>
            @else
                @error('setupData')
                    <flux:callout variant="danger" icon="x-circle" heading="{{ $message }}"/>
                @enderror

                <div class="flex justify-center">
                    <div class="relative w-64 overflow-hidden border rounded-lg border-stone-200 dark:border-stone-700 aspect-square">
                        @empty($qrCodeSvg)
                            <div class="absolute inset-0 flex items-center justify-center bg-white dark:bg-stone-700 animate-pulse">
                                <flux:icon.loading/>
                            </div>
                        @else
                            <div class="flex items-center justify-center h-full p-4">
                                {!! $qrCodeSvg !!}
                            </div>
                        @endempty
                    </div>
                </div>

                <div>
                    <flux:button
                        :disabled="$errors->has('setupData')"
                        variant="primary"
                        class="w-full"
                        wire:click="showVerificationIfNecessary"
                    >
                        {{ $this->modalConfig['buttonText'] }}
                    </flux:button>
                </div>

                <div class="space-y-4">
                    <div class="relative flex items-center justify-center w-full">
                        <div class="absolute inset-0 w-full h-px top-1/2 bg-stone-200 dark:bg-stone-600"></div>
                        <span class="relative px-2 text-sm bg-white dark:bg-stone-800 text-stone-600 dark:text-stone-400">
                            {{ __('or, enter the code manually') }}
                        </span>
                    </div>

                    <div
                        class="flex items-center space-x-2"
                        x-data="{
                            copied: false,
                            async copy() {
                                try {
                                    await navigator.clipboard.writeText('{{ $manualSetupKey }}');
                                    this.copied = true;
                                    setTimeout(() => this.copied = false, 1500);
                                } catch (e) {
                                    console.warn('Could not copy to clipboard');
                                }
                            }
                        }"
                    >
                        <div class="flex items-stretch w-full border rounded-xl dark:border-stone-700">
                            @empty($manualSetupKey)
                                <div class="flex items-center justify-center w-full p-3 bg-stone-100 dark:bg-stone-700">
                                    <flux:icon.loading variant="mini"/>
                                </div>
                            @else
                                <input
                                    type="text"
                                    readonly
                                    value="{{ $manualSetupKey }}"
                                    class="w-full p-3 bg-transparent outline-none text-stone-900 dark:text-stone-100"
                                />

                                <button
                                    @click="copy()"
                                    class="px-3 transition-colors border-l cursor-pointer border-stone-200 dark:border-stone-600"
                                >
                                    <flux:icon.document-duplicate x-show="!copied" variant="outline"></flux:icon>
                                    <flux:icon.check
                                        x-show="copied"
                                        variant="solid"
                                        class="text-green-500"
                                    ></flux:icon>
                                </button>
                            @endempty
                        </div>
                    </div>
                </div>
            @endif
        </div>
    </flux:modal>
</section>
</file>

<file path="resources/views/livewire/settings/two-factor/recovery-codes.blade.php">
<div
    class="py-6 space-y-6 border shadow-sm rounded-xl border-zinc-200 dark:border-white/10"
    wire:cloak
    x-data="{ showRecoveryCodes: false }"
>
    <div class="px-6 space-y-2">
        <div class="flex items-center gap-2">
            <flux:icon.lock-closed variant="outline" class="size-4"/>
            <flux:heading size="lg" level="3">{{ __('2FA Recovery Codes') }}</flux:heading>
        </div>
        <flux:text variant="subtle">
            {{ __('Recovery codes let you regain access if you lose your 2FA device. Store them in a secure password manager.') }}
        </flux:text>
    </div>

    <div class="px-6">
        <div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
            <flux:button
                x-show="!showRecoveryCodes"
                icon="eye"
                icon:variant="outline"
                variant="primary"
                @click="showRecoveryCodes = true;"
                aria-expanded="false"
                aria-controls="recovery-codes-section"
            >
                {{ __('View Recovery Codes') }}
            </flux:button>

            <flux:button
                x-show="showRecoveryCodes"
                icon="eye-slash"
                icon:variant="outline"
                variant="primary"
                @click="showRecoveryCodes = false"
                aria-expanded="true"
                aria-controls="recovery-codes-section"
            >
                {{ __('Hide Recovery Codes') }}
            </flux:button>

            @if (filled($recoveryCodes))
                <flux:button
                    x-show="showRecoveryCodes"
                    icon="arrow-path"
                    variant="filled"
                    wire:click="regenerateRecoveryCodes"
                >
                    {{ __('Regenerate Codes') }}
                </flux:button>
            @endif
        </div>

        <div
            x-show="showRecoveryCodes"
            x-transition
            id="recovery-codes-section"
            class="relative overflow-hidden"
            x-bind:aria-hidden="!showRecoveryCodes"
        >
            <div class="mt-3 space-y-3">
                @error('recoveryCodes')
                    <flux:callout variant="danger" icon="x-circle" heading="{{$message}}"/>
                @enderror

                @if (filled($recoveryCodes))
                    <div
                        class="grid gap-1 p-4 font-mono text-sm rounded-lg bg-zinc-100 dark:bg-white/5"
                        role="list"
                        aria-label="Recovery codes"
                    >
                        @foreach($recoveryCodes as $code)
                            <div
                                role="listitem"
                                class="select-text"
                                wire:loading.class="opacity-50 animate-pulse"
                            >
                                {{ $code }}
                            </div>
                        @endforeach
                    </div>
                    <flux:text variant="subtle" class="text-xs">
                        {{ __('Each recovery code can be used once to access your account and will be removed after use. If you need more, click Regenerate Codes above.') }}
                    </flux:text>
                @endif
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/partials/settings-heading.blade.php">
<div class="relative mb-6 w-full">
    <flux:heading size="xl" level="1">{{ __('Settings') }}</flux:heading>
    <flux:subheading size="lg" class="mb-6">{{ __('Manage your profile and account settings') }}</flux:subheading>
    <flux:separator variant="subtle" />
</div>
</file>

<file path="routes/auth.php">
<?php

use App\Http\Controllers\Auth\VerifyEmailController;
use App\Livewire\Actions\Logout;
use App\Livewire\Auth\ForgotPassword;
use App\Livewire\Auth\Login;
use App\Livewire\Auth\Register;
use App\Livewire\Auth\ResetPassword;
use App\Livewire\Auth\VerifyEmail;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('login', Login::class)->name('login');
    Route::get('register', Register::class)->name('register');
    Route::get('forgot-password', ForgotPassword::class)->name('password.request');
    Route::get('reset-password/{token}', ResetPassword::class)->name('password.reset');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', VerifyEmail::class)
        ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');
});

Route::post('logout', Logout::class)
    ->name('logout');
</file>

<file path="routes/console.php">
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
</file>

<file path="storage/app/.gitignore">
*
!private/
!public/
!.gitignore
</file>

<file path="storage/app/private/.gitignore">
*
!.gitignore
</file>

<file path="storage/app/public/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/.gitignore">
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json
</file>

<file path="storage/framework/cache/.gitignore">
*
!data/
!.gitignore
</file>

<file path="storage/framework/cache/data/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/sessions/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/testing/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/views/.gitignore">
*
!.gitignore
</file>

<file path="storage/logs/.gitignore">
*
!.gitignore
</file>

<file path="tests/Feature/Auth/AuthenticationTest.php">
<?php

use App\Livewire\Auth\Login;
use App\Models\User;
use Laravel\Fortify\Features;
use Livewire\Livewire;

test('login screen can be rendered', function () {
    $response = $this->get('/login');

    $response->assertStatus(200);
});

test('users can authenticate using the login screen', function () {
    $user = User::factory()->withoutTwoFactor()->create();

    $response = Livewire::test(Login::class)
        ->set('email', $user->email)
        ->set('password', 'password')
        ->call('login');

    $response
        ->assertHasNoErrors()
        ->assertRedirect(route('dashboard', absolute: false));

    $this->assertAuthenticated();
});

test('users can not authenticate with invalid password', function () {
    $user = User::factory()->create();

    $response = Livewire::test(Login::class)
        ->set('email', $user->email)
        ->set('password', 'wrong-password')
        ->call('login');

    $response->assertHasErrors('email');

    $this->assertGuest();
});

test('users with two factor enabled are redirected to two factor challenge', function () {
    if (! Features::canManageTwoFactorAuthentication()) {
        $this->markTestSkipped('Two-factor authentication is not enabled.');
    }

    Features::twoFactorAuthentication([
        'confirm' => true,
        'confirmPassword' => true,
    ]);

    $user = User::factory()->create();

    $user->forceFill([
        'two_factor_secret' => encrypt('test-secret'),
        'two_factor_recovery_codes' => encrypt(json_encode(['code1', 'code2'])),
        'two_factor_confirmed_at' => now(),
    ])->save();

    $response = Livewire::test('auth.login')
        ->set('email', $user->email)
        ->set('password', 'password')
        ->call('login');

    $response->assertRedirect(route('two-factor.login'));
    $response->assertSessionHas('login.id', $user->id);
    $this->assertGuest();
});

test('users can logout', function () {
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post('/logout');

    $response->assertRedirect('/');

    $this->assertGuest();
});
</file>

<file path="tests/Feature/Auth/EmailVerificationTest.php">
<?php

use App\Models\User;
use Illuminate\Auth\Events\Verified;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\URL;

test('email verification screen can be rendered', function () {
    $user = User::factory()->unverified()->create();

    $response = $this->actingAs($user)->get('/verify-email');

    $response->assertStatus(200);
});

test('email can be verified', function () {
    $user = User::factory()->unverified()->create();

    Event::fake();

    $verificationUrl = URL::temporarySignedRoute(
        'verification.verify',
        now()->addMinutes(60),
        ['id' => $user->id, 'hash' => sha1($user->email)]
    );

    $response = $this->actingAs($user)->get($verificationUrl);

    Event::assertDispatched(Verified::class);

    expect($user->fresh()->hasVerifiedEmail())->toBeTrue();
    $response->assertRedirect(route('dashboard', absolute: false).'?verified=1');
});

test('email is not verified with invalid hash', function () {
    $user = User::factory()->unverified()->create();

    $verificationUrl = URL::temporarySignedRoute(
        'verification.verify',
        now()->addMinutes(60),
        ['id' => $user->id, 'hash' => sha1('wrong-email')]
    );

    $this->actingAs($user)->get($verificationUrl);

    expect($user->fresh()->hasVerifiedEmail())->toBeFalse();
});
</file>

<file path="tests/Feature/Auth/PasswordConfirmationTest.php">
<?php

use App\Models\User;

test('confirm password screen can be rendered', function () {
    $user = User::factory()->create();

    $response = $this->actingAs($user)->get(route('password.confirm'));

    $response->assertStatus(200);
});
</file>

<file path="tests/Feature/Auth/PasswordResetTest.php">
<?php

use App\Livewire\Auth\ForgotPassword;
use App\Livewire\Auth\ResetPassword;
use App\Models\User;
use Illuminate\Auth\Notifications\ResetPassword as ResetPasswordNotification;
use Illuminate\Support\Facades\Notification;
use Livewire\Livewire;

test('reset password link screen can be rendered', function () {
    $response = $this->get('/forgot-password');

    $response->assertStatus(200);
});

test('reset password link can be requested', function () {
    Notification::fake();

    $user = User::factory()->create();

    Livewire::test(ForgotPassword::class)
        ->set('email', $user->email)
        ->call('sendPasswordResetLink');

    Notification::assertSentTo($user, ResetPasswordNotification::class);
});

test('reset password screen can be rendered', function () {
    Notification::fake();

    $user = User::factory()->create();

    Livewire::test(ForgotPassword::class)
        ->set('email', $user->email)
        ->call('sendPasswordResetLink');

    Notification::assertSentTo($user, ResetPasswordNotification::class, function ($notification) {
        $response = $this->get('/reset-password/'.$notification->token);

        $response->assertStatus(200);

        return true;
    });
});

test('password can be reset with valid token', function () {
    Notification::fake();

    $user = User::factory()->create();

    Livewire::test(ForgotPassword::class)
        ->set('email', $user->email)
        ->call('sendPasswordResetLink');

    Notification::assertSentTo($user, ResetPasswordNotification::class, function ($notification) use ($user) {
        $response = Livewire::test(ResetPassword::class, ['token' => $notification->token])
            ->set('email', $user->email)
            ->set('password', 'password')
            ->set('password_confirmation', 'password')
            ->call('resetPassword');

        $response
            ->assertHasNoErrors()
            ->assertRedirect(route('login', absolute: false));

        return true;
    });
});
</file>

<file path="tests/Feature/Auth/RegistrationTest.php">
<?php

use App\Livewire\Auth\Register;
use Livewire\Livewire;

test('registration screen can be rendered', function () {
    $response = $this->get('/register');

    $response->assertStatus(200);
});

test('new users can register', function () {
    $response = Livewire::test(Register::class)
        ->set('name', 'Test User')
        ->set('email', 'test@example.com')
        ->set('password', 'password')
        ->set('password_confirmation', 'password')
        ->call('register');

    $response
        ->assertHasNoErrors()
        ->assertRedirect(route('dashboard', absolute: false));

    $this->assertAuthenticated();
});
</file>

<file path="tests/Feature/Auth/TwoFactorChallengeTest.php">
<?php

use App\Models\User;
use Laravel\Fortify\Features;
use Livewire\Livewire;

test('two factor challenge redirects to login when not authenticated', function () {
    if (! Features::canManageTwoFactorAuthentication()) {
        $this->markTestSkipped('Two-factor authentication is not enabled.');
    }

    $response = $this->get(route('two-factor.login'));

    $response->assertRedirect(route('login'));
});

test('two factor challenge can be rendered', function () {
    if (! Features::canManageTwoFactorAuthentication()) {
        $this->markTestSkipped('Two-factor authentication is not enabled.');
    }

    Features::twoFactorAuthentication([
        'confirm' => true,
        'confirmPassword' => true,
    ]);

    $user = User::factory()->create();

    $user->forceFill([
        'two_factor_secret' => encrypt('test-secret'),
        'two_factor_recovery_codes' => encrypt(json_encode(['code1', 'code2'])),
        'two_factor_confirmed_at' => now(),
    ])->save();

    Livewire::test('auth.login')
        ->set('email', $user->email)
        ->set('password', 'password')
        ->call('login')
        ->assertRedirect(route('two-factor.login'))
        ->assertOk();
});
</file>

<file path="tests/Feature/DashboardTest.php">
<?php

use App\Models\User;

test('guests are redirected to the login page', function () {
    $this->get('/dashboard')->assertRedirect('/login');
});

test('authenticated users can visit the dashboard', function () {
    $this->actingAs($user = User::factory()->create());

    $this->get('/dashboard')->assertStatus(200);
});
</file>

<file path="tests/Feature/ExampleTest.php">
<?php

test('returns a successful response', function () {
    $response = $this->get('/');

    $response->assertStatus(200);
});
</file>

<file path="tests/Feature/Settings/PasswordUpdateTest.php">
<?php

use App\Livewire\Settings\Password;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Livewire\Livewire;

test('password can be updated', function () {
    $user = User::factory()->create([
        'password' => Hash::make('password'),
    ]);

    $this->actingAs($user);

    $response = Livewire::test(Password::class)
        ->set('current_password', 'password')
        ->set('password', 'new-password')
        ->set('password_confirmation', 'new-password')
        ->call('updatePassword');

    $response->assertHasNoErrors();

    expect(Hash::check('new-password', $user->refresh()->password))->toBeTrue();
});

test('correct password must be provided to update password', function () {
    $user = User::factory()->create([
        'password' => Hash::make('password'),
    ]);

    $this->actingAs($user);

    $response = Livewire::test(Password::class)
        ->set('current_password', 'wrong-password')
        ->set('password', 'new-password')
        ->set('password_confirmation', 'new-password')
        ->call('updatePassword');

    $response->assertHasErrors(['current_password']);
});
</file>

<file path="tests/Feature/Settings/ProfileUpdateTest.php">
<?php

use App\Livewire\Settings\Profile;
use App\Models\User;
use Livewire\Livewire;

test('profile page is displayed', function () {
    $this->actingAs($user = User::factory()->create());

    $this->get('/settings/profile')->assertOk();
});

test('profile information can be updated', function () {
    $user = User::factory()->create();

    $this->actingAs($user);

    $response = Livewire::test(Profile::class)
        ->set('name', 'Test User')
        ->set('email', 'test@example.com')
        ->call('updateProfileInformation');

    $response->assertHasNoErrors();

    $user->refresh();

    expect($user->name)->toEqual('Test User');
    expect($user->email)->toEqual('test@example.com');
    expect($user->email_verified_at)->toBeNull();
});

test('email verification status is unchanged when email address is unchanged', function () {
    $user = User::factory()->create();

    $this->actingAs($user);

    $response = Livewire::test(Profile::class)
        ->set('name', 'Test User')
        ->set('email', $user->email)
        ->call('updateProfileInformation');

    $response->assertHasNoErrors();

    expect($user->refresh()->email_verified_at)->not->toBeNull();
});

test('user can delete their account', function () {
    $user = User::factory()->create();

    $this->actingAs($user);

    $response = Livewire::test('settings.delete-user-form')
        ->set('password', 'password')
        ->call('deleteUser');

    $response
        ->assertHasNoErrors()
        ->assertRedirect('/');

    expect($user->fresh())->toBeNull();
    expect(auth()->check())->toBeFalse();
});

test('correct password must be provided to delete account', function () {
    $user = User::factory()->create();

    $this->actingAs($user);

    $response = Livewire::test('settings.delete-user-form')
        ->set('password', 'wrong-password')
        ->call('deleteUser');

    $response->assertHasErrors(['password']);

    expect($user->fresh())->not->toBeNull();
});
</file>

<file path="tests/Feature/Settings/TwoFactorAuthenticationTest.php">
<?php

use App\Models\User;
use Laravel\Fortify\Features;
use Livewire\Livewire;

beforeEach(function () {
    if (! Features::canManageTwoFactorAuthentication()) {
        $this->markTestSkipped('Two-factor authentication is not enabled.');
    }

    Features::twoFactorAuthentication([
        'confirm' => true,
        'confirmPassword' => true,
    ]);
});

test('two factor settings page can be rendered', function () {
    $user = User::factory()->withoutTwoFactor()->create();

    $this->actingAs($user)
        ->withSession(['auth.password_confirmed_at' => time()])
        ->get(route('two-factor.show'))
        ->assertOk()
        ->assertSee('Two Factor Authentication')
        ->assertSee('Disabled');
});

test('two factor settings page requires password confirmation when enabled', function () {
    $user = User::factory()->create();

    $response = $this->actingAs($user)
        ->get(route('two-factor.show'));

    $response->assertRedirect(route('password.confirm'));
});

test('two factor settings page returns forbidden response when two factor is disabled', function () {
    config(['fortify.features' => []]);

    $user = User::factory()->create();

    $response = $this->actingAs($user)
        ->withSession(['auth.password_confirmed_at' => time()])
        ->get(route('two-factor.show'));

    $response->assertForbidden();
});

test('two factor authentication disabled when confirmation abandoned between requests', function () {
    $user = User::factory()->create();

    $user->forceFill([
        'two_factor_secret' => encrypt('test-secret'),
        'two_factor_recovery_codes' => encrypt(json_encode(['code1', 'code2'])),
        'two_factor_confirmed_at' => null,
    ])->save();

    $this->actingAs($user);

    $component = Livewire::test('settings.two-factor');

    $component->assertSet('twoFactorEnabled', false);

    $this->assertDatabaseHas('users', [
        'id' => $user->id,
        'two_factor_secret' => null,
        'two_factor_recovery_codes' => null,
    ]);
});
</file>

<file path="tests/Pest.php">
<?php

/*
|--------------------------------------------------------------------------
| Test Case
|--------------------------------------------------------------------------
|
| The closure you provide to your test functions is always bound to a specific PHPUnit test
| case class. By default, that class is "PHPUnit\Framework\TestCase". Of course, you may
| need to change it using the "pest()" function to bind a different classes or traits.
|
*/

pest()->extend(Tests\TestCase::class)
    ->use(Illuminate\Foundation\Testing\RefreshDatabase::class)
    ->in('Feature');

/*
|--------------------------------------------------------------------------
| Expectations
|--------------------------------------------------------------------------
|
| When you're writing tests, you often need to check that values meet certain conditions. The
| "expect()" function gives you access to a set of "expectations" methods that you can use
| to assert different things. Of course, you may extend the Expectation API at any time.
|
*/

expect()->extend('toBeOne', function () {
    return $this->toBe(1);
});

/*
|--------------------------------------------------------------------------
| Functions
|--------------------------------------------------------------------------
|
| While Pest is very powerful out-of-the-box, you may have some testing code specific to your
| project that you don't want to repeat in every file. Here you can also expose helpers as
| global functions to help you to reduce the number of lines of code in your test files.
|
*/

function something()
{
    // ..
}
</file>

<file path="tests/TestCase.php">
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    //
}
</file>

<file path="tests/Unit/ExampleTest.php">
<?php

test('that true is true', function () {
    expect(true)->toBeTrue();
});
</file>

<file path="vite.config.js">
import {
    defineConfig
} from 'vite';
import laravel from 'laravel-vite-plugin';
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: true,
        }),
        tailwindcss(),
    ],
    server: {
        cors: true,
    },
});
</file>

<file path=".env.example">
APP_NAME=Nexo-Emprendedores
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=es
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=sqlite
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database

CACHE_STORE=database
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"
</file>

<file path=".gitattributes">
* text=auto eol=lf
*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php
CHANGELOG.md export-ignore
README.md export-ignore
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text
</file>

<file path="app/Http/Controllers/Auth/VerifyEmailController.php">
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Auth;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if (Auth::user()?->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
        }

        $request->fulfill();

        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}
</file>

<file path="app/Livewire/AccesibilidadWidget.php">
<?php

namespace App\Livewire;

use Livewire\Component;

class AccesibilidadWidget extends Component
{
    /**
     * Propiedad pública para recibir la clase de CSS que define
     * la posición del widget en pantallas de escritorio (lg).
     * @var string
     */
    public string $desktopPositionClass;

    /**
     * El método mount se ejecuta cuando el componente es creado.
     * Le damos un valor por defecto ('lg:left-6') si no se especifica
     * ninguna clase al llamar al componente.
     *
     * @param string $desktopPositionClass
     * @return void
     */
    public function mount(string $desktopPositionClass = 'lg:left-6')
    {
        $this->desktopPositionClass = $desktopPositionClass;
    }

    /**
     * Renderiza la vista del componente.
     *
     * @return \Illuminate\View\View
     */
    public function render()
    {
        return view('livewire.accesibilidad-widget');
    }
}
</file>

<file path="app/Livewire/Auth/Register.php">
<?php

namespace App\Livewire\Auth;

use App\Models\User;
use App\Services\FaceRecognitionService;
use Illuminate\Auth\Events\Registered;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Illuminate\Validation\Rule;
use Illuminate\Validation\Rules;
use Livewire\Attributes\Layout;
use Livewire\Component;

#[Layout('components.layouts.auth')]
class Register extends Component
{
    public string $name = '';
    public string $email = '';
    public string $password = '';
    public string $password_confirmation = '';
    public ?string $faceImage = null;
    public string $role = '';

    public function register(FaceRecognitionService $faceService): void
    {
        // <-- CAMBIO CLAVE 2: La validación ahora usa las constantes en inglés del modelo User.
        $validated = $this->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'string', 'confirmed', Rules\Password::defaults()],
            'role' => ['required', 'string', Rule::in([User::ROLE_ENTREPRENEUR, User::ROLE_INVESTOR])],
        ]);

        $user = User::create($validated);

        event(new Registered($user));

        if (!empty($this->faceImage)) {
            $faceService->enroll($user, $this->faceImage);
        }

        Auth::login($user);

        Session::regenerate();

        $this->redirect(route('dashboard', absolute: false), navigate: true);
    }
}
</file>

<file path="app/Livewire/MostrarProyectos.php">
<?php

namespace App\Livewire;

use App\Models\Project;
use Livewire\Component;

class MostrarProyectos extends Component
{
    public function render()
    {
        // Consulta la base de datos para obtener los proyectos.
        $proyectos = Project::with('photos') // Carga las fotos para eficiencia
                            ->withCount('likes')      // Crea una nueva columna virtual 'likes_count'
                            ->orderBy('likes_count', 'desc') // Ordena por la cantidad de likes de mayor a menor
                            ->take(6)                 // Limita a los 6 proyectos más populares
                            ->get();

        return view('livewire.mostrar-proyectos', [
            'proyectos' => $proyectos
        ]);
    }
}
</file>

<file path="app/Models/User.php">
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Str;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */


    // Añade constantes para los roles
    public const ROLE_INVESTOR = 'investor';
    public const ROLE_ENTREPRENEUR = 'entrepreneur';


    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'role' => 'string',
    ];

    /**
     * Un usuario tiene un perfil.
     */
    public function profile(): HasOne
    {
        return $this->hasOne(Profile::class);
    }

    /**
     * Un usuario (emprendedor) tiene muchos proyectos.
     */
    public function projects(): HasMany
    {
        return $this->hasMany(Project::class);
    }

    /**
     * Un usuario (inversor) realiza muchas inversiones.
     */
    public function investments(): HasMany
    {
        // Especificamos la clave foránea porque no sigue la convención 'user_id'
        return $this->hasMany(Investment::class, 'investor_id');
    }

    /**
     * Un usuario puede dar 'like' a muchos proyectos.
     */
    public function likes(): BelongsToMany
    {
        return $this->belongsToMany(Project::class, 'project_likes')->withTimestamps();
    }

    /**
     * Devuelve las iniciales del nombre del usuario.
     *
     * @return string
     */
    public function initials(): string
    {
        $words = explode(' ', trim($this->name));
        $initials = '';

        if (count($words) >= 2) {
            // Para nombres como "John Doe", devuelve "JD"
            $initials = strtoupper(substr($words[0], 0, 1) . substr(end($words), 0, 1));
        } elseif (count($words) === 1 && strlen($words[0]) > 0) {
            // Para un solo nombre como "John", devuelve "JO"
            $initials = strtoupper(substr($words[0], 0, 2));
        } else {
            // Caso por defecto si el nombre está vacío
            $initials = '??';
        }

        return $initials;
    }

    /**
     * Un usuario (emprendedor) recibe muchas propuestas de inversión a través de sus proyectos.
     */
    public function proposals(): HasManyThrough
    {
        // "Para este Usuario, encuentra las Inversiones (Investment) a través de sus Proyectos (Project)."
        return $this->hasManyThrough(Investment::class, Project::class);
    }

    public function messages(): HasMany
    {
        return $this->hasMany(Message::class, 'sender_id');
    }

    /**
     * Un usuario tiene muchas notificaciones.
     */
    public function notifications(): HasMany
    {
        return $this->hasMany(Notification::class)->orderBy('created_at', 'desc');
    }
}
</file>

<file path="app/Providers/AppServiceProvider.php">
<?php

namespace App\Providers;

use App\Models\Project;
use App\Observers\ProjectObserver;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Project::observe(ProjectObserver::class);
    }
}
</file>

<file path="config/database.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'require',
            'options' => [
                PDO::MYSQL_ATTR_SSL_CA => database_path('certs/ca.crt'),
                PDO::ATTR_PERSISTENT => false,
                PDO::ATTR_EMULATE_PREPARES => true,
            ],
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_') . '_database_'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
            'max_retries' => env('REDIS_MAX_RETRIES', 3),
            'backoff_algorithm' => env('REDIS_BACKOFF_ALGORITHM', 'decorrelated_jitter'),
            'backoff_base' => env('REDIS_BACKOFF_BASE', 100),
            'backoff_cap' => env('REDIS_BACKOFF_CAP', 1000),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
            'max_retries' => env('REDIS_MAX_RETRIES', 3),
            'backoff_algorithm' => env('REDIS_BACKOFF_ALGORITHM', 'decorrelated_jitter'),
            'backoff_base' => env('REDIS_BACKOFF_BASE', 100),
            'backoff_cap' => env('REDIS_BACKOFF_CAP', 1000),
        ],

    ],

];
</file>

<file path="config/fortify.php">
<?php

use Laravel\Fortify\Features;

return [

    /*
    |--------------------------------------------------------------------------
    | Fortify Guard
    |--------------------------------------------------------------------------
    |
    | Here you may specify which authentication guard Fortify will use while
    | authenticating users. This value should correspond with one of your
    | guards that is already present in your "auth" configuration file.
    |
    */

    'guard' => 'web',

    /*
    |--------------------------------------------------------------------------
    | Fortify Password Broker
    |--------------------------------------------------------------------------
    |
    | Here you may specify which password broker Fortify can use when a user
    | is resetting their password. This configured value should match one
    | of your password brokers setup in your "auth" configuration file.
    |
    */

    'passwords' => 'users',

    /*
    |--------------------------------------------------------------------------
    | Username / Email
    |--------------------------------------------------------------------------
    |
    | This value defines which model attribute should be considered as your
    | application's "username" field. Typically, this might be the email
    | address of the users but you are free to change this value here.
    |
    | Out of the box, Fortify expects forgot password and reset password
    | requests to have a field named 'email'. If the application uses
    | another name for the field you may define it below as needed.
    |
    */

    'username' => 'email',

    'email' => 'email',

    /*
    |--------------------------------------------------------------------------
    | Lowercase Usernames
    |--------------------------------------------------------------------------
    |
    | This value defines whether usernames should be lowercased before saving
    | them in the database, as some database system string fields are case
    | sensitive. You may disable this for your application if necessary.
    |
    */

    'lowercase_usernames' => true,

    /*
    |--------------------------------------------------------------------------
    | Home Path
    |--------------------------------------------------------------------------
    |
    | Here you may configure the path where users will get redirected during
    | authentication or password reset when the operations are successful
    | and the user is authenticated. You are free to change this value.
    |
    */

    'home' => '/dashboard',

    /*
    |--------------------------------------------------------------------------
    | Fortify Routes Prefix / Subdomain
    |--------------------------------------------------------------------------
    |
    | Here you may specify which prefix Fortify will assign to all the routes
    | that it registers with the application. If necessary, you may change
    | subdomain under which all of the Fortify routes will be available.
    |
    */

    'prefix' => '',

    'domain' => null,

    /*
    |--------------------------------------------------------------------------
    | Fortify Routes Middleware
    |--------------------------------------------------------------------------
    |
    | Here you may specify which middleware Fortify will assign to the routes
    | that it registers with the application. If necessary, you may change
    | these middleware but typically this provided default is preferred.
    |
    */

    'middleware' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Rate Limiting
    |--------------------------------------------------------------------------
    |
    | By default, Fortify will throttle logins to five requests per minute for
    | every email and IP address combination. However, if you would like to
    | specify a custom rate limiter to call then you may specify it here.
    |
    */

    'limiters' => [
        'login' => 'login',
        'two-factor' => 'two-factor',
    ],

    /*
    |--------------------------------------------------------------------------
    | Register View Routes
    |--------------------------------------------------------------------------
    |
    | Here you may specify if the routes returning views should be disabled as
    | you may not need them when building your own application. This may be
    | especially true if you're writing a custom single-page application.
    |
    */

    'views' => true,

    /*
    |--------------------------------------------------------------------------
    | Features
    |--------------------------------------------------------------------------
    |
    | Some of the Fortify features are optional. You may disable the features
    | by removing them from this array. You're free to only remove some of
    | these features or you can even remove all of these if you need to.
    |
    */

    'features' => [
        // Features::registration(),
        // Features::resetPasswords(),
        // Features::emailVerification(),
        // Features::updateProfileInformation(),
        // Features::updatePasswords(),
       /* Features::twoFactorAuthentication([
            'confirm' => true,
            'confirmPassword' => true,
            // 'window' => 0,
        ]),*/
    ],

];
</file>

<file path="config/services.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */
    'face_api' => [
        'url' => env('FACE_API_URL'),
    ],
    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

    'groq' => [
        'api_key' => env('GROQ_API_KEY'),
        'model' => env('GROQ_MODEL', 'llama-3.1-8b-instant'),
    ],
    'huggingface' => [
        'api_key' => env('HUGGINGFACE_API_KEY'),
    ],

    'azure' => [
        'speech_key' => env('AZURE_SPEECH_KEY'),
        'speech_region' => env('AZURE_SPEECH_REGION'),
    ],

];
</file>

<file path="database/migrations/0001_01_01_000000_create_users_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->enum('role', ['entrepreneur', 'investor', 'admin'])->default('entrepreneur');
            $table->rememberToken();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
</file>

<file path="database/seeders/DatabaseSeeder.php">
<?php

namespace Database\Seeders;
use Illuminate\Support\Facades\DB;

use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        DB::reconnect();
        // User::factory(10)->create();

        //User::factory()->create([
            //'name' => 'Test User',
            //'email' => 'test@example.com',
        //]);
        $this->call(CategorySeeder::class);
    }
}
</file>

<file path="package.json">
{
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build",
        "dev": "vite"
    },
    "dependencies": {
        "@tailwindcss/vite": "^4.1.11",
        "axios": "^1.7.4",
        "concurrently": "^9.0.1",
        "laravel-vite-plugin": "^2.0",
        "vite": "^7.0.4"
    },
    "optionalDependencies": {
        "@rollup/rollup-linux-x64-gnu": "4.9.5",
        "@tailwindcss/oxide-linux-x64-gnu": "^4.0.1",
        "lightningcss-linux-x64-gnu": "^1.29.1"
    },
    "devDependencies": {
        "autoprefixer": "^10.4.21",
        "postcss": "^8.5.6",
        "tailwindcss": "^4.1.14"
    }
}
</file>

<file path="resources/views/components/layouts/app/header.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" x-data x-bind:class="$store.theme.dark ? 'dark' : ''">
    <head>
        @include('partials.head')
    </head>
    <body class="min-h-screen bg-white dark:bg-zinc-800">
        <flux:header container class="border-b border-zinc-200 bg-zinc-50 dark:border-zinc-700 dark:bg-zinc-900">
            <flux:sidebar.toggle class="lg:hidden" icon="bars-2" inset="left" />

            <a href="{{ route('dashboard') }}" class="ms-2 me-5 flex items-center space-x-2 rtl:space-x-reverse lg:ms-0" wire:navigate>
                <x-app-logo />
            </a>

            <flux:navbar class="-mb-px max-lg:hidden">
                <flux:navbar.item icon="layout-grid" :href="route('dashboard')" :current="request()->routeIs('dashboard')" wire:navigate>
                    {{ __('Dashboard') }}
                </flux:navbar.item>
            </flux:navbar>

            <flux:spacer />

            <!-- Botón de modo oscuro en el header de la app -->
            <button 
                @click="$store.theme.toggle()"
                class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition mr-2"
                aria-label="Alternar modo oscuro"
            >
                <svg x-show="!$store.theme.dark" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 2a.75.75 0 01.75.75V4a.75.75 0 01-1.5 0V2.75A.75.75 0 0110 2zM10 16a.75.75 0 01.75.75V18a.75.75 0 01-1.5 0v-1.25A.75.75 0 0110 16zM4 9.25a.75.75 0 000 1.5H2.75a.75.75 0 000-1.5H4zM17.25 9.25a.75.75 0 000 1.5H19a.75.75 0 000-1.5h-1.75zM4.22 4.22a.75.75 0 011.06 0L6.5 5.44a.75.75 0 11-1.06 1.06L4.22 5.28a.75.75 0 010-1.06zM14.56 14.56a.75.75 0 011.06 0l1.22 1.22a.75.75 0 01-1.06 1.06l-1.22-1.22a.75.75 0 010-1.06zM14.56 5.44a.75.75 0 010-1.06l1.22-1.22a.75.75 0 111.06 1.06L15.62 5.44a.75.75 0 01-1.06 0zM4.22 15.78a.75.75 0 010-1.06l1.22-1.22a.75.75 0 111.06 1.06L5.28 15.78a.75.75 0 01-1.06 0z"></path>
                </svg>
                <svg x-show="$store.theme.dark" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M17.293 13.293A8 8 0 016.707 2.707 8 8 0 1017.293 13.293z"></path>
                </svg>
            </button>

            <flux:navbar class="me-1.5 space-x-0.5 rtl:space-x-reverse py-0!">
                <flux:tooltip :content="__('Search')" position="bottom">
                    <flux:navbar.item class="!h-10 [&>div>svg]:size-5" icon="magnifying-glass" href="#" :label="__('Search')" />
                </flux:tooltip>
                <flux:tooltip :content="__('Repository')" position="bottom">
                    <flux:navbar.item
                        class="h-10 max-lg:hidden [&>div>svg]:size-5"
                        icon="folder-git-2"
                        href="https://github.com/laravel/livewire-starter-kit"
                        target="_blank"
                        :label="__('Repository')"
                    />
                </flux:tooltip>
                <flux:tooltip :content="__('Documentation')" position="bottom">
                    <flux:navbar.item
                        class="h-10 max-lg:hidden [&>div>svg]:size-5"
                        icon="book-open-text"
                        href="https://laravel.com/docs/starter-kits#livewire"
                        target="_blank"
                        label="Documentation"
                    />
                </flux:tooltip>
            </flux:navbar>

            <!-- Desktop User Menu -->
            <flux:dropdown position="top" align="end">
                <flux:profile
                    class="cursor-pointer"
                    :initials="auth()->user()->initials()"
                />

                <flux:menu>
                    <flux:menu.radio.group>
                        <div class="p-0 text-sm font-normal">
                            <div class="flex items-center gap-2 px-1 py-1.5 text-start text-sm">
                                <span class="relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg">
                                    <span
                                        class="flex h-full w-full items-center justify-center rounded-lg bg-neutral-200 text-black dark:bg-neutral-700 dark:text-white"
                                    >
                                        {{ auth()->user()->initials() }}
                                    </span>
                                </span>

                                <div class="grid flex-1 text-start text-sm leading-tight">
                                    <span class="truncate font-semibold">{{ auth()->user()->name }}</span>
                                    <span class="truncate text-xs">{{ auth()->user()->email }}</span>
                                </div>
                            </div>
                        </div>
                    </flux:menu.radio.group>

                    <flux:menu.separator />

                    <flux:menu.radio.group>
                        <flux:menu.item :href="route('settings.profile')" icon="cog" wire:navigate>{{ __('Settings') }}</flux:menu.item>
                    </flux:menu.radio.group>

                    <flux:menu.separator />

                    <form method="POST" action="{{ route('logout') }}" class="w-full">
                        @csrf
                        <flux:menu.item as="button" type="submit" icon="arrow-right-start-on-rectangle" class="w-full">
                            {{ __('Log Out') }}
                        </flux:menu.item>
                    </form>
                </flux:menu>
            </flux:dropdown>
        </flux:header>

        <!-- Mobile Menu -->
        <flux:sidebar stashable sticky class="lg:hidden border-e border-zinc-200 bg-zinc-50 dark:border-zinc-700 dark:bg-zinc-900">
            <flux:sidebar.toggle class="lg:hidden" icon="x-mark" />

            <a href="{{ route('dashboard') }}" class="ms-1 flex items-center space-x-2 rtl:space-x-reverse" wire:navigate>
                <x-app-logo />
            </a>

            <flux:navlist variant="outline">
                <flux:navlist.group :heading="__('Platform')">
                    <flux:navlist.item icon="layout-grid" :href="route('dashboard')" :current="request()->routeIs('dashboard')" wire:navigate>
                      {{ __('Dashboard') }}
                    </flux:navlist.item>
                </flux:navlist.group>
            </flux:navlist>

            <flux:spacer />

            <flux:navlist variant="outline">
                <flux:navlist.item icon="folder-git-2" href="https://github.com/laravel/livewire-starter-kit" target="_blank">
                    {{ __('Repository') }}
                </flux:navlist.item>

                <flux:navlist.item icon="book-open-text" href="https://laravel.com/docs/starter-kits#livewire" target="_blank">
                    {{ __('Documentation') }}
                </flux:navlist.item>
            </flux:navlist>
        </flux:sidebar>

        {{ $slot }}

        <script>
            // Store de tema para el layout de app
            document.addEventListener('alpine:init', () => {
                if (!Alpine.store('theme')) {
                    Alpine.store('theme', {
                        dark: localStorage.getItem('theme') === 'dark' || 
                              (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches),

                        init() {
                            this.updateDocumentClass();
                        },

                        toggle() {
                            this.dark = !this.dark;
                            localStorage.setItem('theme', this.dark ? 'dark' : 'light');
                            this.updateDocumentClass();
                        },

                        updateDocumentClass() {
                            if (this.dark) {
                                document.documentElement.classList.add('dark');
                            } else {
                                document.documentElement.classList.remove('dark');
                            }
                        }
                    });

                    Alpine.store('theme').init();
                }
            });

            // Fallback para aplicar el tema inmediatamente
            if (localStorage.getItem('theme') === 'dark') {
                document.documentElement.classList.add('dark');
            } else if (localStorage.getItem('theme') === 'light') {
                document.documentElement.classList.remove('dark');
            }
        </script>

        @fluxScripts
    </body>
</html>
</file>

<file path="resources/views/components/layouts/auth/simple.blade.php">
<x-layouts.guest>
    <div class="flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10">
        <div class="flex w-full max-w-sm flex-col gap-2">
            <div class="flex flex-col gap-6">
                {{ $slot }}
            </div>
        </div>
    </div>
</x-layouts.guest>
</file>

<file path="resources/views/dashboard.blade.php">
<x-layouts.app :title="__('Dashboard')">
    <div class="h-full w-full flex-1 flex-col gap-4 rounded-xl">
        
        @if (auth()->user()->role === \App\Models\User::ROLE_ENTREPRENEUR)
            
            <livewire:entrepreneur-dashboard />

        @elseif (auth()->user()->role === \App\Models\User::ROLE_INVESTOR)

            <livewire:investor-dashboard />

        @else
            {{-- Opcional: un dashboard para el admin o un mensaje por defecto --}}
            <h2 class="text-2xl font-bold">Panel de Administración</h2>
            <p>Bienvenido, {{ auth()->user()->name }}.</p>
            
        @endif

    </div>
</x-layouts.app>
<div class="fixed bottom-5 right-5 z-50">
    <livewire:chatbot-widget />
</div>
</file>

<file path="resources/views/livewire/settings/profile.blade.php">
<section class="w-full">
    @include('partials.settings-heading')

    <x-settings.layout :heading="__('Profile')" :subheading="__('Update your name and email address')">
        {{-- FORMULARIO EXISTENTE PARA ACTUALIZAR PERFIL --}}
        <form wire:submit="updateProfileInformation" class="my-6 w-full space-y-6">
            <flux:input wire:model="name" :label="__('Name')" type="text" required autofocus autocomplete="name" />

            <div>
                <flux:input wire:model="email" :label="__('Email')" type="email" required autocomplete="email" />

                @if (auth()->user() instanceof \Illuminate\Contracts\Auth\MustVerifyEmail &&! auth()->user()->hasVerifiedEmail())
                    <div>
                        <flux:text class="mt-4">
                            {{ __('Your email address is unverified.') }}

                            <flux:link class="text-sm cursor-pointer" wire:click.prevent="resendVerificationNotification">
                                {{ __('Click here to re-send the verification email.') }}
                            </flux:link>
                        </flux:text>

                        @if (session('status') === 'verification-link-sent')
                            <flux:text class="mt-2 font-medium !dark:text-green-400 !text-green-600">
                                {{ __('A new verification link has been sent to your email address.') }}
                            </flux:text>
                        @endif
                    </div>
                @endif
            </div>

            <div class="flex items-center gap-4">
                <div class="flex items-center justify-end">
                    <flux:button variant="primary" type="submit" class="w-full">{{ __('Save') }}</flux:button>
                </div>

                <x-action-message class="me-3" on="profile-updated">
                    {{ __('Saved.') }}
                </x-action-message>
            </div>
        </form>

        {{-- COMPONENTE EXISTENTE PARA BORRAR USUARIO --}}
        <livewire:settings.delete-user-form />

        {{-- ========================================================== --}}
        {{-- INICIO DEL CÓDIGO AÑADIDO PARA REGISTRO FACIAL --}}
        {{-- ========================================================== --}}
        <div x-data="faceEnroll()" class="mt-10 pt-6 border-t border-zinc-200 dark:border-zinc-700">
            <flux:heading>{{ __('Inicio de Sesión Facial') }}</flux:heading>
            <flux:subheading>{{ __('Registra tu rostro para iniciar sesión de forma rápida y segura.') }}</flux:subheading>

            <div class="mt-4">
                {{-- Contenedor del video y canvas que solo se muestra si la cámara está activa --}}
                <div x-show="cameraOpen" style="display: none;" class="relative w-64 h-48 bg-zinc-200 dark:bg-zinc-700 rounded-lg overflow-hidden">
                    <video x-ref="video" class="w-full h-full object-cover" autoplay playsinline></video>
                    <canvas x-ref="canvas" class="hidden"></canvas>
                </div>

                {{-- Botones de control --}}
                <div class="mt-4 flex gap-4">
                    <flux:button x-show="!cameraOpen" @click="startCamera()" type="button">{{ __('Activar Cámara') }}</flux:button>
                    <flux:button x-show="cameraOpen" style="display: none;" @click="captureAndEnroll()" :disabled="loading" type="button">
                        <span x-show="!loading">{{ __('Registrar Mi Rostro') }}</span>
                        <span x-show="loading">{{ __('Procesando...') }}</span>
                    </flux:button>
                    <flux:button x-show="cameraOpen" style="display: none;" @click="stopCamera()" variant="secondary" type="button">{{ __('Cancelar') }}</flux:button>
                </div>

                {{-- Mensajes de estado para el usuario --}}
                <p x-text="message" class="mt-2 text-sm" :class="{ 'text-green-600 dark:text-green-400': success, 'text-red-600 dark:text-red-400': !success }"></p>
            </div>
        </div>

        <script>
            function faceEnroll() {
                return {
                    cameraOpen: false,
                    loading: false,
                    message: '',
                    success: false,
                    stream: null,

                    startCamera() {
                        this.message = '';
                        this.cameraOpen = true;
                        navigator.mediaDevices.getUserMedia({ video: true })
                            .then(stream => {
                                this.stream = stream;
                                this.$refs.video.srcObject = stream;
                            })
                            .catch(err => {
                                this.message = 'No se pudo acceder a la cámara. Revisa los permisos en tu navegador.';
                                this.success = false;
                                this.cameraOpen = false;
                            });
                    },

                    stopCamera() {
                        this.cameraOpen = false;
                        if (this.stream) {
                            this.stream.getTracks().forEach(track => track.stop());
                        }
                    },

                    captureAndEnroll() {
                        this.loading = true;
                        this.message = '';
                        const video = this.$refs.video;
                        const canvas = this.$refs.canvas;
                        canvas.width = video.videoWidth;
                        canvas.height = video.videoHeight;
                        canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
                        const imageDataUrl = canvas.toDataURL('image/jpeg');

                        fetch('{{ route("face.enroll") }}', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': '{{ csrf_token() }}'
                            },
                            body: JSON.stringify({ image: imageDataUrl })
                        })
                        .then(res => res.json().then(data => ({ status: res.status, body: data })))
                        .then(({ status, body }) => {
                            this.message = body.message;
                            this.success = (status === 200);
                            if (this.success) {
                                this.stopCamera();
                            }
                        })
                        .catch(() => {
                            this.message = 'Ocurrió un error inesperado al contactar al servidor.';
                            this.success = false;
                        })
                        .finally(() => {
                            this.loading = false;
                        });
                    }
                }
            }
        </script>
        {{-- ========================================================== --}}
        {{-- FIN DEL CÓDIGO AÑADIDO --}}
        {{-- ========================================================== --}}

    </x-settings.layout>
</section>
</file>

<file path="resources/views/partials/head.blade.php">
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<title>{{ $title ?? config('app.name') }}</title>

<link rel="icon" href="/favicon.ico" sizes="any">
<link rel="icon" href="/favicon.svg" type="image/svg+xml">
<link rel="apple-touch-icon" href="/apple-touch-icon.png">

<link rel="preconnect" href="https://fonts.bunny.net">
<link href="https://fonts.bunny.net/css?family=instrument-sans:400,500,600" rel="stylesheet" />

@vite(['resources/css/app.css', 'resources/js/app.js'])
@fluxAppearance

<script>
    if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
    } else {
        document.documentElement.classList.remove('dark');
    }

    document.addEventListener('alpine:init', () => {
        Alpine.store('theme', {
            dark: document.documentElement.classList.contains('dark'),

            toggle() {
                this.dark = !this.dark;
                localStorage.theme = this.dark ? 'dark' : 'light';
                document.documentElement.classList.toggle('dark', this.dark);
            },
        });
    });
</script>
</file>

<file path="routes/web.php">
<?php

use App\Http\Controllers\FaceAuthController;
use App\Livewire\Settings\Appearance;
use App\Livewire\Settings\Password;
use App\Livewire\Settings\Profile;
use App\Livewire\Settings\TwoFactor;
use App\Livewire\Project\ProjectForm;
use Illuminate\Support\Facades\Route;
use Laravel\Fortify\Features;
use App\Livewire\Project\View as ProjectView;
use App\Livewire\Conversation\Show as ConversationShow;

Route::get('/', function () {
    return view('welcome');
})->name('home');

Route::view('dashboard', 'dashboard')
    ->middleware(['auth', 'verified'])
    ->name('dashboard');

Route::post('/face-login', [FaceAuthController::class, 'login'])->name('face.login');

Route::middleware(['auth'])->group(function () {
    Route::redirect('settings', 'settings/profile');

    Route::get('settings/profile', Profile::class)->name('settings.profile');
    Route::get('settings/password', Password::class)->name('settings.password');
    Route::get('settings/appearance', Appearance::class)->name('settings.appearance');

    Route::post('/user/face-enroll', [FaceAuthController::class, 'enroll'])->name('face.enroll');

    Route::get('/projects/create', ProjectForm::class)->name('project.create');

    Route::get('/projects/{project}/edit', ProjectForm::class)->name('project.edit');

    Route::get('settings/two-factor', TwoFactor::class)
        ->middleware(
            when(
                Features::canManageTwoFactorAuthentication()
                    && Features::optionEnabled(Features::twoFactorAuthentication(), 'confirmPassword'),
                ['password.confirm'],
                [],
            ),
        )
        ->name('two-factor.show');
        
    Route::get('/projects/{project}', ProjectView::class)->name('project.view');

    Route::get('/conversation/{investment}', ConversationShow::class)->name('conversation.show');
});

require __DIR__.'/auth.php';
</file>

<file path="composer.json">
{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/livewire-starter-kit",
    "type": "project",
    "description": "The official Laravel starter kit for Livewire.",
    "keywords": [
        "laravel",
        "framework"
    ],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "guzzlehttp/guzzle": "^7.10",
        "laravel/fortify": "^1.30",
        "laravel/framework": "^12.0",
        "laravel/tinker": "^2.10.1",
        "livewire/flux": "^2.1.1",
        "livewire/livewire": "^3.6",
        "livewire/volt": "^1.7.0"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel-lang/common": "^6.7",
        "laravel/pail": "^1.2.2",
        "laravel/pint": "^1.18",
        "laravel/sail": "^1.41",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.6",
        "pestphp/pest": "^4.1",
        "pestphp/pest-plugin-laravel": "^4.0"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "setup": [
            "composer install",
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\"",
            "@php artisan key:generate",
            "@php artisan migrate --force",
            "npm install",
            "npm run build"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"npm run dev\" --names='server,queue,vite'"
        ],
        "test": [
            "@php artisan config:clear --ansi",
            "@php artisan test"
        ],
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "pre-package-uninstall": [
            "Illuminate\\Foundation\\ComposerScripts::prePackageUninstall"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}
</file>

<file path="README.md">
# Nexo Emprendedor 🌱

[![Laravel](https://img.shields.io/badge/Laravel-12-FF2D20.svg)](https://laravel.com)
[![Livewire](https://img.shields.io/badge/Livewire-3-4d55d2.svg)](https://livewire.laravel.com)
[![Python](https://img.shields.io/badge/Python-3.11-3776AB.svg)](https://www.python.org)
[![Docker](https://img.shields.io/badge/Docker-blue.svg)](https://www.docker.com)
[![Hackathon](https://img.shields.io/badge/Hackathon-24hs-brightgreen.svg)](https://example.com)

**Conectando Innovación e Inversión en la Región NEA.**

Nexo Emprendedor es un ecosistema digital desarrollado en 24 horas que busca resolver una problemática clave en la región del Noreste Argentino (NEA): la desconexión entre emprendedores con ideas innovadoras y los inversores que buscan oportunidades de crecimiento.

## 🎯 Sobre el Proyecto

Muchos emprendedores con proyectos de gran potencial no logran encontrar la financiación necesaria. Por otro lado, existen inversores (grandes y pequeños) buscando activamente oportunidades para apoyar nuevos negocios, pero carecen de un espacio centralizado y confiable para descubrarlos.

Nexo Emprendedor es la solución, una plataforma que sirve como puente entre estas dos partes, facilitando el descubrimiento, la comunicación y el crecimiento económico regional.

## ✨ Características Principales

*   **Doble Rol de Usuario:** Regístrate como **Emprendedor** para presentar tus proyectos o como **Inversor** para descubrir nuevas oportunidades.
*   **Gestión de Proyectos (CRUD):** Los emprendedores pueden crear, editar y eliminar sus proyectos, incluyendo descripciones detalladas, metas de financiación y fotos.
*   **Galería de Proyectos para Inversores:** Un dashboard visual donde los inversores pueden explorar todos los proyectos disponibles en un formato de tarjetas atractivo.
*   **Autenticación Biométrica:** ¡Inicia sesión sin contraseña! La plataforma integra un microservicio de **reconocimiento facial** para un acceso rápido y seguro.
*   **Asistente Virtual con IA:** Un chatbot inteligente que utiliza **RAG (Retrieval-Augmented Generation)** para responder preguntas sobre los proyectos, buscando en la base de datos en tiempo real. Incluye soporte para **voz a texto** y **texto a voz**.
*   **Widgets Dinámicos:** Módulos en tiempo real para **cotizaciones de divisas** y **noticias económicas** relevantes para la región.
*   **Accesibilidad:** Un widget flotante que permite a los usuarios ajustar el tamaño del texto, activar el modo de alto contraste (blanco y negro) y más.

## 🛠️ Stack Tecnológico

La plataforma está construida con una arquitectura de microservicios moderna y ágil:

*   **Aplicación Principal (Monolito):**
    *   **Framework:** Laravel 12
    *   **Frontend Dinámico:** TALL Stack (Tailwind CSS, Alpine.js, Livewire)
    *   **Base de Datos:** PostgreSQL (conectado a Supabase)
*   **Microservicio de Reconocimiento Facial:**
    *   **Framework:** Python con FastAPI
    *   **Librerías de IA:** `face-recognition`, `dlib`
    *   **Contenerización:** Docker y Docker Compose
*   **Servicios de IA (Chatbot):**
    *   **LLM:** Groq (usando Llama 3.1)
    *   **Embeddings:** Hugging Face (`BAAI/bge-base-en-v1.5`)
    *   **Voz (STT/TTS):** Hugging Face (Whisper) y Azure AI Speech

---

## 🚀 Puesta en Marcha (Local Setup)

Para levantar el proyecto completo, necesitas correr dos servicios: la aplicación Laravel y el microservicio de Python.

### Prerrequisitos

*   Git
*   PHP 8.2+
*   Composer
*   Node.js y NPM
*   Docker y Docker Compose

### Parte 1: Configurar la Aplicación Laravel

1.  **Clonar el repositorio:**
    ```bash
    git clone https://tu-repositorio.git
    cd Nexo-Emprendedor
    ```

2.  **Instalar dependencias:**
    ```bash
    composer install
    npm install
    ```

3.  **Configurar el entorno:**
    Copia el archivo de ejemplo y genera la clave de la aplicación.
    ```bash
    cp .env.example .env
    php artisan key:generate
    ```

4.  **Editar el archivo `.env`:**
    Abre el archivo `.env` y configura las siguientes variables:
    ```dotenv
    # Conexión a tu base de datos de Supabase
    DB_CONNECTION=pgsql
    DB_HOST=tu-host-de-supabase.com
    DB_PORT=5432
    DB_DATABASE=postgres
    DB_USERNAME=postgres
    DB_PASSWORD="tu-contraseña-de-supabase"

    # URL del microservicio de reconocimiento facial (que correrá en Docker)
    FACE_API_URL=http://127.0.0.1:8000

    # API Keys para los servicios de IA
    GROQ_API_KEY="gsk_..."
    HUGGINGFACE_API_KEY="hf_..."
    AZURE_SPEECH_KEY="tu-clave-de-azure"
    AZURE_SPEECH_REGION="tu-region-de-azure"
    ```

5.  **Ejecutar las migraciones:**
    Esto creará toda la estructura de tablas en tu base de datos de Supabase.
    ```bash
    php artisan migrate
    ```

6.  **Crear el Symlink para las imágenes:**
    Este paso es crucial para que las fotos de los proyectos sean visibles.
    ```bash
    php artisan storage:link
    ```

### Parte 2: Configurar el Microservicio de Python (Face API)

1.  **Navega a la carpeta del microservicio** (asumiendo que está dentro del proyecto principal).
    ```bash
    cd reconocimiento-facial-main 
    ```

2.  **Crea un archivo `.env`** para el servicio de Docker. Mueve las variables de la base de datos de Supabase aquí también para que la API de Python pueda conectarse.
    ```dotenv
    # .env (dentro de la carpeta de la API de Python)
    DB_HOST=tu-host-de-supabase.com
    DB_PORT=6543 # Puerto del Pooler de Supabase
    DB_DATABASE=postgres
    DB_USERNAME=postgres.xxxxxxxxxx
    DB_PASSWORD="tu-contraseña-del-pooler"
    ```

3.  **Asegúrate de que `docker-compose.yml` use el archivo `.env`:**
    Verifica que tu `docker-compose.yml` tenga la clave `env_file`.
    ```yaml
    services:
      faceapi:
        # ...
        env_file:
          - .env
    ```

### Parte 3: ¡Ejecutar Todo!

1.  **Levanta el servicio de Docker:**
    Desde la carpeta de la API de Python, ejecuta:
    ```bash
    docker-compose up --build -d
    ```

2.  **Levanta la aplicación Laravel:**
    Desde la carpeta principal del proyecto Laravel, ejecuta:
    ```bash
    npm run dev
    ```

¡Y listo! Ahora puedes acceder a tu aplicación en la URL que te proporcione Vite (usualmente `http://127.0.0.1:8000`).

---

## ⚙️ Comandos de Artisan Útiles

### Indexación de Proyectos para Búsqueda Semántica

Para que el chatbot pueda encontrar proyectos, necesitas generar los "embeddings" para cada uno. Ejecuta este comando cada vez que añadas o modifiques proyectos.

```bash
php artisan projects:index
```

## 🗺️ Roadmap (Próximos Pasos)

-   [ ] **Mensajería en Tiempo Real:** Implementar un chat directo entre Inversores y Emprendedores.
-   [ ] **Dashboard Avanzado para Inversores:** Métricas, seguimiento de inversiones y notificaciones.
-   [ ] **Sistema de "Likes" y "Seguimiento":** Permitir a los inversores guardar y seguir los proyectos que les interesan.
-   [ ] **Panel de Administración:** Un panel para moderar proyectos y gestionar usuarios.
-   [ ] **Detalle de Proyecto Completo:** Crear la vista de detalle a la que apunta el botón "Ver Más".

## 📄 Licencia

Este proyecto está bajo la Licencia MIT. Ver el archivo `LICENSE` para más detalles.
</file>

<file path="resources/views/components/layouts/app/sidebar.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}" class="dark">

<head>
    @include('partials.head')
</head>

<body class="min-h-screen bg-white dark:bg-zinc-800">
    {{-- Sidebar --}}
    <flux:sidebar sticky stashable class="border-e border-zinc-200 bg-zinc-50 dark:border-zinc-700 dark:bg-zinc-900 z-10 flex flex-col">
        {{-- Contenido superior (logo y navegación) --}}
        <div>
            <flux:sidebar.toggle class="lg:hidden" icon="x-mark" />

            <a href="{{ route('dashboard') }}" class="me-5 flex items-center space-x-2 rtl:space-x-reverse px-4 py-2" wire:navigate>
                <img 
                    src="{{ asset('images/nexo.png') }}" 
                    alt="Nexo Emprendedores" 
                    class="w-32 h-16 dark:drop-shadow-[0_0_15px_rgba(255,255,255,0.95)] transition duration-300"
                />
            </a>

            <flux:navlist variant="outline">
                <flux:navlist.group :heading="__('Plataforma')" class="grid">
                    <flux:navlist.item icon="home" :href="route('dashboard')" :current="request()->routeIs('dashboard')" wire:navigate>{{ __('Panel') }}</flux:navlist.item>
                </flux:navlist.group>
            </flux:navlist>
        </div>

        <flux:spacer />

        {{-- Panel de usuario ESCRITORIO --}}
        <div class="hidden lg:flex flex-col w-full p-2 gap-2">
            {{-- Fila superior: campanita izquierda, modo oscuro derecha --}}
            <div class="flex items-center justify-between w-full">
                <livewire:notifications-bell />

                <button 
                    @click="$store.theme.toggle()"
                    class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-zinc-700 transition"
                    aria-label="Alternar modo oscuro"
                >
                    <svg x-show="!$store.theme.dark" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 2a.75.75 0 01.75.75V4a.75.75 0 01-1.5 0V2.75A.75.75 0 0110 2zM10 16a.75.75 0 01.75.75V18a.75.75 0 01-1.5 0v-1.25A.75.75 0 0110 16zM4 9.25a.75.75 0 000 1.5H2.75a.75.75 0 000-1.5H4zM17.25 9.25a.75.75 0 000 1.5H19a.75.75 0 000-1.5h-1.75zM4.22 4.22a.75.75 0 011.06 0L6.5 5.44a.75.75 0 11-1.06 1.06L4.22 5.28a.75.75 0 010-1.06zM14.56 14.56a.75.75 0 011.06 0l1.22 1.22a.75.75 0 01-1.06 1.06l-1.22-1.22a.75.75 0 010-1.06zM14.56 5.44a.75.75 0 010-1.06l1.22-1.22a.75.75 0 111.06 1.06L15.62 5.44a.75.75 0 01-1.06 0zM4.22 15.78a.75.75 0 010-1.06l1.22-1.22a.75.75 0 111.06 1.06L5.28 15.78a.75.75 0 01-1.06 0z"></path>
                    </svg>
                    <svg x-show="$store.theme.dark" style="display: none;" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M17.293 13.293A8 8 0 016.707 2.707 8 8 0 1017.293 13.293z"></path>
                    </svg>
                </button>
            </div>

            {{-- Fila inferior: perfil con menú --}}
            <flux:dropdown class="flex-grow" position="top" align="start">
                <flux:profile
                    :name="auth()->user()->name"
                    :initials="auth()->user()->initials()"
                />
                <flux:menu class="w-[220px]">
                    <flux:menu.radio.group>
                        <div class="p-0 text-sm font-normal">
                            <div class="flex items-center gap-2 px-1 py-1.5 text-start text-sm">
                                <span class="relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg">
                                    <span class="flex h-full w-full items-center justify-center rounded-lg bg-neutral-200 text-black dark:bg-neutral-700 dark:text-white">
                                        {{ auth()->user()->initials() }}
                                    </span>
                                </span>
                                <div class="grid flex-1 text-start text-sm leading-tight">
                                    <span class="truncate font-semibold">{{ auth()->user()->name }}</span>
                                    <span class="truncate text-xs">{{ auth()->user()->email }}</span>
                                </div>
                            </div>
                        </div>
                    </flux:menu.radio.group>
                    <flux:menu.separator />
                    <flux:menu.radio.group>
                        <flux:menu.item :href="route('settings.profile')" icon="cog" wire:navigate>{{ __('Ajustes') }}</flux:menu.item>
                    </flux:menu.radio.group>
                    <flux:menu.separator />
                    <form method="POST" action="{{ route('logout') }}" class="w-full">
                        @csrf
                        <flux:menu.item as="button" type="submit" icon="arrow-right-start-on-rectangle" class="w-full">
                            {{ __('Cerrar Sesión') }}
                        </flux:menu.item>
                    </form>
                </flux:menu>
            </flux:dropdown>
        </div>

        {{-- Panel de usuario MÓVIL --}}
        <div class="flex lg:hidden flex-col w-full p-2 gap-2">
            {{-- Fila superior: campanita izquierda, modo oscuro derecha --}}
            <div class="flex items-center justify-between w-full">
                <livewire:notifications-bell />

                <button 
                    @click="$store.theme.toggle()"
                    class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-zinc-700 transition"
                    aria-label="Alternar modo oscuro"
                >
                    <svg x-show="!$store.theme.dark" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 2a.75.75 0 01.75.75V4a.75.75 0 01-1.5 0V2.75A.75.75 0 0110 2zM10 16a.75.75 0 01.75.75V18a.75.75 0 01-1.5 0v-1.25A.75.75 0 0110 16zM4 9.25a.75.75 0 000 1.5H2.75a.75.75 0 000-1.5H4zM17.25 9.25a.75.75 0 000 1.5H19a.75.75 0 000-1.5h-1.75zM4.22 4.22a.75.75 0 011.06 0L6.5 5.44a.75.75 0 11-1.06 1.06L4.22 5.28a.75.75 0 010-1.06zM14.56 14.56a.75.75 0 011.06 0l1.22 1.22a.75.75 0 01-1.06 1.06l-1.22-1.22a.75.75 0 010-1.06zM14.56 5.44a.75.75 0 010-1.06l1.22-1.22a.75.75 0 111.06 1.06L15.62 5.44a.75.75 0 01-1.06 0zM4.22 15.78a.75.75 0 010-1.06l1.22-1.22a.75.75 0 111.06 1.06L5.28 15.78a.75.75 0 01-1.06 0z"></path>
                    </svg>
                    <svg x-show="$store.theme.dark" style="display: none;" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M17.293 13.293A8 8 0 016.707 2.707 8 8 0 1017.293 13.293z"></path>
                    </svg>
                </button>
            </div>

            {{-- Fila inferior: perfil con menú --}}
            <flux:dropdown class="flex-grow" position="top" align="start">
                <flux:profile
                    :name="auth()->user()->name"
                    :initials="auth()->user()->initials()"
                />
                <flux:menu class="w-[220px]">
                    <flux:menu.radio.group>
                        <div class="p-0 text-sm font-normal">
                            <div class="flex items-center gap-2 px-1 py-1.5 text-start text-sm">
                                <span class="relative flex h-8 w-8 shrink-0 overflow-hidden rounded-lg">
                                    <span class="flex h-full w-full items-center justify-center rounded-lg bg-neutral-200 text-black dark:bg-neutral-700 dark:text-white">
                                        {{ auth()->user()->initials() }}
                                    </span>
                                </span>
                                <div class="grid flex-1 text-start text-sm leading-tight">
                                    <span class="truncate font-semibold">{{ auth()->user()->name }}</span>
                                    <span class="truncate text-xs">{{ auth()->user()->email }}</span>
                                </div>
                            </div>
                        </div>
                    </flux:menu.radio.group>
                    <flux:menu.separator />
                    <flux:menu.radio.group>
                        <flux:menu.item :href="route('settings.profile')" icon="cog" wire:navigate>{{ __('Ajustes') }}</flux:menu.item>
                    </flux:menu.radio.group>
                    <flux:menu.separator />
                    <form method="POST" action="{{ route('logout') }}" class="w-full">
                        @csrf
                        <flux:menu.item as="button" type="submit" icon="arrow-right-start-on-rectangle" class="w-full">
                            {{ __('Cerrar Sesión') }}
                        </flux:menu.item>
                    </form>
                </flux:menu>
            </flux:dropdown>
        </div>
    </flux:sidebar>

    {{-- Header móvil --}}
    <flux:header class="lg:hidden z-10">
        {{-- Contenido del header móvil --}}
        <flux:sidebar.toggle icon="bars-3" />
        {{-- Agregar contenido aquí --}}
    </flux:header>

    {{-- Contenido principal --}}
    {{ $slot }}
    
    {{-- Widget de accesibilidad --}}
    <livewire:accesibilidad-widget desktopPositionClass="lg:left-72" />

    @fluxScripts
</body>
</html>
</file>

<file path="resources/views/livewire/accesibilidad-widget.blade.php">
<div 
    class="fixed bottom-6 left-6 z-50 {{ $desktopPositionClass }}"
    x-data="{
        fontSize: 1,
        grayscale: false,
        reducedMotion: false,
        isSpeaking: false,

        init() {
            this.loadSettings();
            this.applySettings();
        },
        loadSettings() {
            const saved = localStorage.getItem('accesibilidad');
            if (saved) {
                const s = JSON.parse(saved);
                this.fontSize = s.fontSize || 1;
                this.grayscale = s.grayscale || false;
                this.reducedMotion = s.reducedMotion || false;
            }
        },
        saveSettings() {
            localStorage.setItem('accesibilidad', JSON.stringify({
                fontSize: this.fontSize,
                grayscale: this.grayscale,
                reducedMotion: this.reducedMotion
            }));
        },
        applySettings() {
            document.body.style.fontSize = (16 * this.fontSize) + 'px';
            const mainContent = document.getElementById('main-content');
            if (mainContent) {
                mainContent.style.filter = this.grayscale ? 'grayscale(100%)' : 'none';
            }
            document.body.style.scrollBehavior = this.reducedMotion ? 'auto' : 'smooth';
            const video = document.querySelector('video');
            if (video) {
                this.reducedMotion ? video.pause() : video.play().catch(e => {});
            }
            this.saveSettings();
        },
        increaseFont() {
            if (this.fontSize < 2) { this.fontSize += 0.2; this.applySettings(); }
        },
        decreaseFont() {
            if (this.fontSize > 0.8) { this.fontSize -= 0.2; this.applySettings(); }
        },
        toggleGrayscale() {
            this.grayscale = !this.grayscale; this.applySettings();
        },
        toggleReducedMotion() {
            this.reducedMotion = !this.reducedMotion; this.applySettings();
        },
        speakText() {
            if (!('speechSynthesis' in window)) return;
            if (this.isSpeaking) {
                speechSynthesis.cancel();
                this.isSpeaking = false;
                return;
            }
            const text = document.body.innerText;
            const msg = new SpeechSynthesisUtterance(text.substring(0, 1000));
            msg.lang = 'es-AR';
            msg.onend = () => this.isSpeaking = false;
            msg.onerror = () => this.isSpeaking = false;
            speechSynthesis.speak(msg);
            this.isSpeaking = true;
        },
        resetAll() {
            this.fontSize = 1; this.grayscale = false; this.reducedMotion = false;
            this.applySettings();
            localStorage.removeItem('accesibilidad');
            if (Alpine.store('theme').dark) {
                Alpine.store('theme').toggle();
            }
        }
    }"
>
    <!-- Botón flotante -->
    <button @click="$refs.panel.classList.toggle('hidden')" class="bg-blue-600 text-white p-3 rounded-full shadow-lg hover:bg-blue-700 transition flex items-center justify-center" aria-label="Abrir panel de accesibilidad">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z"/></svg>
    </button>

    <!-- Panel de accesibilidad -->
    <div x-ref="panel" class="hidden bottom-0 mb-16 bg-white dark:bg-gray-800 rounded-lg shadow-xl p-4 w-64 border">
        <div class="flex justify-between items-center mb-3">
            <h3 class="font-bold text-gray-800 dark:text-white">Accesibilidad</h3>
            <button @click="$refs.panel.classList.add('hidden')" class="text-gray-500 hover:text-gray-700 text-lg">✕</button>
        </div>
        <div class="mb-3">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tamaño de texto</label>
            <div class="flex space-x-2">
                <button @click="decreaseFont()" class="flex-1 bg-gray-200 dark:bg-gray-700 py-1 rounded text-sm">A−</button>
                <button @click="increaseFont()" class="flex-1 bg-gray-200 dark:bg-gray-700 py-1 rounded text-sm">A+</button>
            </div>
        </div>
        <div class="mb-3"><button @click="toggleGrayscale()" class="w-full text-left px-3 py-2 rounded bg-gray-100 dark:bg-gray-700 text-sm">Blanco y negro</button></div>
        <div class="mb-3"><button @click="toggleReducedMotion()" class="w-full text-left px-3 py-2 rounded bg-gray-100 dark:bg-gray-700 text-sm"><span x-text="reducedMotion ? 'Activar animaciones' : 'Sin animaciones'"></span></button></div>
        <div class="mb-3"><button @click="speakText()" class="w-full text-left px-3 py-2 rounded bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-200 text-sm font-medium">🎧 <span x-text="isSpeaking ? 'Detener lectura' : 'Leer en voz alta'"></span></button></div>
        <div class="mb-3"><button @click="$store.theme.toggle()" class="w-full text-left px-3 py-2 rounded bg-gray-100 dark:bg-gray-700 text-sm">Modo nocturno</button></div>
        <button @click="resetAll()" class="w-full mt-2 px-3 py-2 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 text-sm rounded">Restablecer todo</button>
    </div>
</div>
</file>

<file path="resources/views/livewire/auth/login.blade.php">
<div class="flex flex-col gap-6">
    <x-auth-header :title="__('Inicia sesión en tu cuenta')" :description="__('Ingresa tu correo y contraseña para acceder')" />

    <!-- Session Status -->
    <x-auth-session-status class="text-center" :status="session('status')" />

    <form method="POST" wire:submit="login" class="flex flex-col gap-6">
        <!-- Email Address -->
        <flux:input
            wire:model="email"
            :label="__('Correo Electrónico')"
            type="email"
            required
            autofocus
            autocomplete="email"
            placeholder="email@ejemplo.com"
        />

        <!-- Password -->
        <div class="relative">
            <flux:input
                wire:model="password"
                :label="__('Contraseña')"
                type="password"
                required
                autocomplete="current-password"
                :placeholder="__('Contraseña')"
                viewable
            />

            @if (Route::has('password.request'))
                <flux:link class="absolute top-0 text-sm end-0" :href="route('password.request')" wire:navigate>
                    {{ __('¿Olvidaste tu contraseña?') }}
                </flux:link>
            @endif
        </div>

        <!-- Remember Me -->
        <flux:checkbox wire:model="remember" :label="__('Recuérdame')" />

        <div class="flex items-center justify-end">
            <flux:button variant="primary" type="submit" class="w-full" data-test="login-button">
                {{ __('Iniciar Sesión') }}
            </flux:button>
        </div>
    </form>

    <div class="relative flex items-center">
        <span class="flex-grow border-t border-zinc-300 dark:border-zinc-700"></span>
        <span class="mx-4 flex-shrink text-xs text-zinc-500 uppercase">O</span>
        <span class="flex-grow border-t border-zinc-300 dark:border-zinc-700"></span>
    </div>

    <div x-data="faceLogin()" class="flex flex-col items-center">
        <flux:button @click="startCamera()" type="button" variant="outline" class="w-full" x-bind:disabled="loading">
            <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
            <span x-show="!loading">{{ __('Iniciar Sesión con Rostro') }}</span>
            <span x-show="loading">{{ __('Verificando...') }}</span>
        </flux:button>
        <p x-text="message" class="mt-2 text-sm text-red-600 dark:text-red-400"></p>

        <div x-show="cameraOpen" style="display: none;" x-transition class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50" @click.self="stopCamera()">
            <div class="bg-white dark:bg-zinc-800 p-4 rounded-lg shadow-xl text-center">
                <h3 class="font-semibold mb-2 text-zinc-800 dark:text-zinc-200">Posiciona tu rostro en el centro</h3>
                <video x-ref="video" class="w-96 h-72 rounded bg-zinc-200 dark:bg-zinc-700" autoplay playsinline></video>
                <canvas x-ref="canvas" class="hidden"></canvas>
                <p class="mt-2 text-sm text-zinc-500">Verificando automáticamente...</p>
            </div>
        </div>
    </div>

    <script>
    function faceLogin() {
        return {
            cameraOpen: false, loading: false, message: '', stream: null,
            startCamera() {
                this.message = ''; this.cameraOpen = true;
                navigator.mediaDevices.getUserMedia({ video: true })
                    .then(stream => {
                        this.stream = stream;
                        this.$refs.video.srcObject = stream;
                        this.$refs.video.oncanplay = () => {
                            setTimeout(() => this.captureAndLogin(), 1500);
                        };
                    })
                    .catch(err => {
                        this.message = 'No se pudo acceder a la cámara. Revisa los permisos.';
                        this.stopCamera();
                    });
            },
            stopCamera() {
                this.cameraOpen = false; this.loading = false;
                if (this.stream) { this.stream.getTracks().forEach(track => track.stop()); }
            },
            captureAndLogin() {
                if (!this.cameraOpen) return;
                this.loading = true;
                const video = this.$refs.video; const canvas = this.$refs.canvas;
                canvas.width = video.videoWidth; canvas.height = video.videoHeight;
                canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
                const imageDataUrl = canvas.toDataURL('image/jpeg');
                this.stopCamera();

                fetch('{{ route("face.login") }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token() }}'
                    },
                    body: JSON.stringify({ image: imageDataUrl })
                })
                .then(res => res.json().then(data => ({ status: res.status, body: data })))
                .then(({ status, body }) => {
                    if (status === 200 && body.success) {
                        window.location.href = body.redirect;
                    } else {
                        this.message = body.message || 'No se pudo iniciar sesión.';
                    }
                })
                .catch(() => this.message = 'Error de comunicación con el servidor.')
                .finally(() => this.loading = false);
            }
        }
    }
    </script>

    @if (Route::has('register'))
        <div class="space-x-1 text-sm text-center rtl:space-x-reverse text-zinc-600 dark:text-zinc-400">
            <span>{{ __("¿No tienes una cuenta?") }}</span>
            <flux:link :href="route('register')" wire:navigate>{{ __('Regístrate') }}</flux:link>
        </div>
    @endif
</div>
</file>

<file path="resources/views/livewire/auth/register.blade.php">
<div class="flex flex-col gap-6">
    <x-auth-header :title="__('Crea una cuenta')" :description="__('Ingresa tus datos para crear tu cuenta')" />

    <x-auth-session-status class="text-center" :status="session('status')" />

    <div x-data="faceRegister()">
        <form wire:submit="register" class="flex flex-col gap-6">
            <flux:input wire:model="name" :label="__('Nombre')" type="text" required autofocus autocomplete="name" :placeholder="__('Nombre completo')" />
            <flux:input wire:model="email" :label="__('Correo Electrónico')" type="email" required autocomplete="email" placeholder="email@ejemplo.com" />
            <flux:input wire:model="password" :label="__('Contraseña')" type="password" required autocomplete="new-password" :placeholder="__('Contraseña')" viewable />
            <flux:input wire:model="password_confirmation" :label="__('Confirmar Contraseña')" type="password" required autocomplete="new-password" :placeholder="__('Confirmar Contraseña')" viewable />
            
            <div class="grid gap-2">
                <label for="role" class="font-medium text-sm text-zinc-700 dark:text-zinc-300">{{ __('Soy un...') }}</label>
                <select wire:model="role" id="role" class="block w-full border-zinc-300 dark:border-zinc-700 dark:bg-zinc-900 dark:text-zinc-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm">
                    <option value="" disabled>{{ __('Selecciona tu rol') }}</option>
                    <option value="entrepreneur">{{ __('Emprendedor') }}</option>
                    <option value="investor">{{ __('Inversor') }}</option>
                </select>
                @error('role') <span class="text-sm text-red-600">{{ $message }}</span> @enderror
            </div>

            <div class="mt-2 pt-4 border-t border-zinc-200 dark:border-zinc-700">
                <flux:subheading>{{ __('(Opcional) Añade tu rostro para un inicio de sesión rápido') }}</flux:subheading>
                
                <div class="mt-2">
                    <div x-show="cameraOpen" style="display: none;" class="relative w-full h-48 bg-zinc-200 dark:bg-zinc-700 rounded-lg overflow-hidden">
                        <video x-ref="video" class="w-full h-full object-cover" autoplay playsinline></video>
                        <canvas x-ref="canvas" class="hidden"></canvas>
                    </div>
                    <div class="mt-2 flex gap-4">
                        <flux:button x-show="!cameraOpen && !faceImageCaptured" @click="startCamera()" type="button" variant="outline">{{ __('Añadir Rostro') }}</flux:button>
                        <flux:button x-show="cameraOpen" style="display: none;" @click="captureAndSetImageData()" x-bind:disabled="loading" type="button">
                            <span x-show="!loading">{{ __('Capturar Foto') }}</span>
                            <span x-show="loading">{{ __('Procesando...') }}</span>
                        </flux:button>
                        <flux:button x-show="cameraOpen" style="display: none;" @click="stopCamera()" variant="outline" type="button">{{ __('Cancelar') }}</flux:button>
                    </div>
                    <p x-text="message" class="mt-2 text-sm" :class="{ 'text-green-600 dark:text-green-400': success, 'text-red-600 dark:text-red-400': !success }"></p>
                </div>
            </div>

            <div class="flex items-center justify-end mt-4">
                <flux:button type="submit" variant="primary" class="w-full">{{ __('Crear cuenta') }}</flux:button>
            </div>
        </form>
    </div>

    <script>
        function faceRegister() {
            return {
                cameraOpen: false, loading: false, message: '', success: false, stream: null, faceImageCaptured: false,
                startCamera() {
                    this.message = ''; this.cameraOpen = true;
                    navigator.mediaDevices.getUserMedia({ video: true })
                        .then(stream => { this.stream = stream; this.$refs.video.srcObject = stream; })
                        .catch(err => {
                            this.message = 'No se pudo acceder a la cámara. Revisa los permisos.';
                            this.success = false; this.cameraOpen = false;
                        });
                },
                stopCamera() {
                    this.cameraOpen = false;
                    if (this.stream) { this.stream.getTracks().forEach(track => track.stop()); }
                },
                captureAndSetImageData() {
                    this.loading = true; this.message = '';
                    const video = this.$refs.video; const canvas = this.$refs.canvas;
                    canvas.width = video.videoWidth; canvas.height = video.videoHeight;
                    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
                    const imageDataUrl = canvas.toDataURL('image/jpeg');

                    @this.set('faceImage', imageDataUrl);
                    
                    this.loading = false;
                    this.success = true;
                    this.faceImageCaptured = true;
                    this.message = '¡Rostro capturado! Puedes terminar tu registro.';
                    this.stopCamera();
                }
            }
        }
    </script>

    <div class="space-x-1 rtl:space-x-reverse text-center text-sm text-zinc-600 dark:text-zinc-400">
        <span>{{ __('¿Ya tienes una cuenta?') }}</span>
        <flux:link :href="route('login')" wire:navigate>{{ __('Inicia Sesión') }}</flux:link>
    </div>
</div>
</file>

<file path="resources/views/welcome.blade.php">
<x-layouts.guest>
    <!-- Hero -->
    <section class="relative text-center py-16 px-6 min-h-[60vh] flex flex-col justify-center items-center overflow-hidden">
        <video autoplay muted loop playsinline class="absolute inset-0 w-full h-full object-cover z-0"><source src="{{ asset('images/video.mp4') }}" type="video/mp4">Tu navegador no soporta videos.</video>
        <div class="absolute inset-0 bg-white/40 z-10"></div>
        <div class="relative z-20 max-w-3xl">
            <img src="{{ asset('images/nexo.png') }}" alt="Logo" class="w-80 h-40 mx-auto drop-shadow-[0_0_14px_rgba(255,255,255,1.8)] animate-fade-in-up"/>
            <h1 class="text-3xl md:text-5xl font-bold mb-4 text-black">Conectando Emprendedores e Inversores en la Zona NEA 🇦🇷</h1>
            <p class="max-w-4xl mx-auto text-white mb-6 drop-shadow-lg">Un ecosistema digital donde las ideas innovadoras encuentran el apoyo que necesitan para crecer.</p>
            @guest
                <a href="{{ route('register') }}" wire:navigate class="inline-block px-6 py-3 bg-blue-600 text-white rounded-lg text-lg hover:bg-blue-700 transition">Comenzar Ahora</a>
            @endguest
        </div>
    </section>

    <!-- Componentes Livewire -->
    <section>@livewire('mostrar-proyectos')</section>
    <section>@livewire('cotizaciones')</section>
    <section>@livewire('noticias-economia')</section>

    @push('scripts')
        <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js" data-navigate-once></script>
        
        {{-- 2. Nuestro script de inicialización. --}}
        <script>
            function initSwiper() {
                if (typeof Swiper === 'undefined') {
                    return;
                }

                const swiperEl = document.querySelector('.mySwiper');
                if (swiperEl && swiperEl.swiper) {
                    swiperEl.swiper.destroy(true, true);
                }

                const slides = document.querySelectorAll('.mySwiper .swiper-slide');
                if (slides.length === 0) return;

                new Swiper('.mySwiper', {
                    slidesPerView: 1,
                    spaceBetween: 20,
                    loop: slides.length > 3,
                    pagination: { el: '.swiper-pagination', clickable: true },
                    navigation: { nextEl: '.swiper-button-next', prevEl: '.swiper-button-prev' },
                    breakpoints: {
                        640: { slidesPerView: 2 },
                        1024: { slidesPerView: 3 },
                    },
                });
            }

            document.addEventListener('livewire:navigated', function () {
                setTimeout(initSwiper, 50); 
            });
        </script>
    @endpush
</x-layouts.guest>
</file>

</files>
